/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export interface AdapterInformationListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: AdapterInformation[] | null;
  location?: string | null;
}

export interface AdapterInformation {
  type?: AdapterInformationType;
  displayName?: string | null;
  inputDataSchema?: string | null;
  inputDataForm?: string | null;
}

export interface ErrorResult {
  code?: number;
  status?: string | null;
  errors?: ResultError[] | null;
}

export interface ResultError {
  code?: ResultErrorCode;
  message?: string | null;
  errors?: ValidationError[] | null;
}

export interface ValidationError {
  field?: string | null;
  message?: string | null;
}

export interface ComponentListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: Component[] | null;
  location?: string | null;
}

export interface Component {
  href?: string | null;
  organization: string;
  templateId: string;
  projectId: string;
  creator: string;
  displayName?: string | null;
  description?: string | null;
  inputJson?: string | null;
  valueJson?: string | null;
  type: ComponentType;
  resourceId?: string | null;
  resourceUrl?: string | null;
  resourceState?: ComponentResourceState;
  deploymentScopeId?: string | null;
  identityId?: string | null;
  deleted?: Date | null;
  ttl?: number | null;
  slug: string;
  id: string;
}

export interface ComponentDefinition {
  templateId: string;
  displayName: string;
  inputJson?: string | null;
  deploymentScopeId?: string | null;
}

export interface ComponentDataResult {
  code?: number;
  status?: string | null;
  data?: Component;
  location?: string | null;
}

export interface StatusResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly state?: string | null;
  stateMessage?: string | null;
  location?: string | null;
  errors?: ResultError[] | null;
  trackingId?: string | null;
}

export interface ComponentTaskListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: ComponentTask[] | null;
  location?: string | null;
}

export interface ComponentTask {
  organization: string;
  componentId: string;
  projectId: string;
  requestedBy?: string | null;
  scheduleId?: string | null;
  type?: ComponentTaskType;
  typeName?: string | null;
  created?: Date;
  started?: Date | null;
  finished?: Date | null;
  inputJson?: string | null;
  output?: string | null;
  resourceId?: string | null;
  resourceState?: ComponentTaskResourceState;
  exitCode?: number | null;
  id: string;
}

export interface ComponentTaskDefinition {
  taskId: string;
  inputJson?: string | null;
}

export interface ComponentTaskDataResult {
  code?: number;
  status?: string | null;
  data?: ComponentTask;
  location?: string | null;
}

export interface ComponentTemplateListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: ComponentTemplate[] | null;
  location?: string | null;
}

export interface ComponentTemplate {
  organization: string;
  parentId: string;
  displayName?: string | null;
  description?: string | null;
  repository: RepositoryReference;
  permissions?: ComponentTemplatePermissions | null;
  inputJsonSchema?: string | null;
  tasks?: ComponentTaskTemplate[] | null;
  taskRunner?: ComponentTaskRunner;
  type: ComponentTemplateType;
  folder?: string | null;
  /** Any object */
  configuration?: any | null;
  id: string;
}

export interface RepositoryReference {
  url: string;
  token?: string | null;
  version?: string | null;
  baselUrl?: string | null;
  mountUrl?: string | null;
  ref?: string | null;
  provider: RepositoryReferenceProvider;
  type: RepositoryReferenceType;
  organization?: string | null;
  repository?: string | null;
  project?: string | null;
}

export interface ComponentTemplatePermissions {
  none?: string[];
  member?: string[];
  admin?: string[];
  owner?: string[];
  adapter?: string[];
}

export interface ComponentTaskTemplate {
  id?: string | null;
  displayName?: string | null;
  description?: string | null;
  inputJsonSchema?: string | null;
  type?: ComponentTaskTemplateType;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly typeName?: string | null;
}

export interface ComponentTaskRunner {
  id?: string | null;
  /** Dictionary of <string> */
  with?: { [propertyName: string]: string } | null;
}

export interface ComponentTemplateDataResult {
  code?: number;
  status?: string | null;
  data?: ComponentTemplate;
  location?: string | null;
}

export interface DeploymentScopeListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: DeploymentScope[] | null;
  location?: string | null;
}

export interface DeploymentScope {
  organization: string;
  displayName: string;
  slug: string;
  isDefault: boolean;
  type: DeploymentScopeType;
  inputDataSchema?: string | null;
  inputData?: string | null;
  managementGroupId?: string | null;
  subscriptionIds?: string[] | null;
  authorizable?: boolean;
  authorized?: boolean;
  authorizeUrl?: string | null;
  componentTypes?: DeploymentScopeComponentTypesItem[] | null;
  id: string;
}

export interface DeploymentScopeDefinition {
  displayName: string;
  type: DeploymentScopeDefinitionType;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly slug?: string | null;
  inputData?: string | null;
  isDefault?: boolean;
}

export interface DeploymentScopeDataResult {
  code?: number;
  status?: string | null;
  data?: DeploymentScope;
  location?: string | null;
}

export interface CommandAuditEntityListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: CommandAuditEntity[] | null;
  location?: string | null;
}

export interface CommandAuditEntity {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly commandId?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly organizationId?: string | null;
  commandJson?: string | null;
  resultJson?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly projectId?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly userId?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly parentId?: string | null;
  command?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly componentTask?: string | null;
  runtimeStatus?: CommandAuditEntityRuntimeStatus;
  customStatus?: string | null;
  errors?: string | null;
  created?: Date | null;
  updated?: Date | null;
}

export interface CommandAuditEntityDataResult {
  code?: number;
  status?: string | null;
  data?: CommandAuditEntity;
  location?: string | null;
}

export interface StringListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: string[] | null;
  location?: string | null;
}

export interface OrganizationListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: Organization[] | null;
  location?: string | null;
}

export interface Organization {
  tenant: string;
  slug: string;
  displayName: string;
  subscriptionId: string;
  location: string;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string } | null;
  resourceId?: string | null;
  resourceState?: OrganizationResourceState;
  galleryId?: string | null;
  registryId?: string | null;
  storageId?: string | null;
  id: string;
}

export interface OrganizationDefinition {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly slug?: string | null;
  displayName: string;
  subscriptionId: string;
  location: string;
}

export interface OrganizationDataResult {
  code?: number;
  status?: string | null;
  data?: Organization;
  location?: string | null;
}

export interface UserListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: User[] | null;
  location?: string | null;
}

export interface User {
  organization: string;
  displayName?: string | null;
  loginName?: string | null;
  mailAddress?: string | null;
  userType: UserType;
  role: UserRole;
  projectMemberships?: ProjectMembership[] | null;
  alternateIdentities?: UserAlternateIdentities | null;
  /** Dictionary of <string> */
  properties?: { [propertyName: string]: string } | null;
  id: string;
}

export interface ProjectMembership {
  projectId: string;
  role: ProjectMembershipRole;
  /** Dictionary of <string> */
  properties?: { [propertyName: string]: string } | null;
}

export interface UserAlternateIdentities {
  azureResourceManager?: AlternateIdentity;
  azureDevOps?: AlternateIdentity;
  gitHub?: AlternateIdentity;
}

export interface AlternateIdentity {
  login?: string | null;
}

export interface UserDefinition {
  identifier: string;
  role: string;
  /** Dictionary of <string> */
  properties?: { [propertyName: string]: string } | null;
}

export interface UserDataResult {
  code?: number;
  status?: string | null;
  data?: User;
  location?: string | null;
}

export interface ProjectListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: Project[] | null;
  location?: string | null;
}

export interface Project {
  organization: string;
  slug: string;
  displayName: string;
  template: string;
  templateInput?: string | null;
  users?: User[] | null;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string } | null;
  resourceId?: string | null;
  resourceState?: ProjectResourceState;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly vaultId?: string | null;
  sharedVaultId?: string | null;
  secretsVaultId?: string | null;
  storageId?: string | null;
  id: string;
}

export interface ProjectDefinition {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly slug?: string | null;
  displayName: string;
  template: string;
  templateInput: string;
  users?: UserDefinition[] | null;
}

export interface ProjectDataResult {
  code?: number;
  status?: string | null;
  data?: Project;
  location?: string | null;
}

export interface ProjectIdentityListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: ProjectIdentity[] | null;
  location?: string | null;
}

export interface ProjectIdentity {
  projectId: string;
  organization: string;
  displayName: string;
  deploymentScopeId: string;
  tenantId?: string;
  clientId?: string;
  clientSecret?: string | null;
  redirectUrls?: string[] | null;
  objectId?: string;
  id: string;
}

export interface ProjectIdentityDefinition {
  displayName: string;
  deploymentScopeId: string;
}

export interface ProjectIdentityDataResult {
  code?: number;
  status?: string | null;
  data?: ProjectIdentity;
  location?: string | null;
}

export interface StringDictionaryDataResult {
  code?: number;
  status?: string | null;
  /**
   * Dictionary of <string>
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly data?: { [propertyName: string]: string } | null;
  location?: string | null;
}

export interface ProjectTemplateListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: ProjectTemplate[] | null;
  location?: string | null;
}

export interface ProjectTemplate {
  organization: string;
  slug: string;
  name?: string | null;
  displayName: string;
  components?: string[] | null;
  repository: RepositoryReference;
  description?: string | null;
  isDefault: boolean;
  inputJsonSchema?: string | null;
  id: string;
}

export interface ProjectTemplateDefinition {
  displayName: string;
  repository: RepositoryDefinition;
}

export interface RepositoryDefinition {
  url: string;
  token?: string | null;
  version?: string | null;
}

export interface ProjectTemplateDataResult {
  code?: number;
  status?: string | null;
  data?: ProjectTemplate;
  location?: string | null;
}

export interface ScheduleListDataResult {
  code?: number;
  status?: string | null;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly data?: Schedule[] | null;
  location?: string | null;
}

export interface Schedule {
  organization: string;
  projectId: string;
  enabled?: boolean;
  recurring?: boolean;
  daysOfWeek?: ScheduleDaysOfWeekItem[] | null;
  utcHour?: number;
  utcMinute?: number;
  creator?: string | null;
  created?: Date;
  lastUpdatedBy?: string | null;
  lastUpdated?: Date;
  lastRun?: Date | null;
  componentTasks?: ComponentTaskReference[] | null;
  id: string;
}

export interface ComponentTaskReference {
  componentId?: string | null;
  componentTaskTemplateId?: string | null;
  inputJson?: string | null;
}

export interface ScheduleDefinition {
  enabled?: boolean;
  recurring?: boolean;
  daysOfWeek?: ScheduleDefinitionDaysOfWeekItem[] | null;
  utcHour?: number;
  utcMinute?: number;
  componentTasks?: ComponentTaskReference[] | null;
}

export interface ScheduleDataResult {
  code?: number;
  status?: string | null;
  data?: Schedule;
  location?: string | null;
}

/** Known values of {@link AdapterInformationType} that the service accepts. */
export const enum KnownAdapterInformationType {
  AzureResourceManager = "AzureResourceManager",
  AzureDevOps = "AzureDevOps",
  GitHub = "GitHub"
}

/**
 * Defines values for AdapterInformationType. \
 * {@link KnownAdapterInformationType} can be used interchangeably with AdapterInformationType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **AzureResourceManager** \
 * **AzureDevOps** \
 * **GitHub**
 */
export type AdapterInformationType = string;

/** Known values of {@link ResultErrorCode} that the service accepts. */
export const enum KnownResultErrorCode {
  Unknown = "Unknown",
  Failed = "Failed",
  Conflict = "Conflict",
  NotFound = "NotFound",
  ServerError = "ServerError",
  ValidationError = "ValidationError",
  Unauthorized = "Unauthorized",
  Forbidden = "Forbidden"
}

/**
 * Defines values for ResultErrorCode. \
 * {@link KnownResultErrorCode} can be used interchangeably with ResultErrorCode,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Unknown** \
 * **Failed** \
 * **Conflict** \
 * **NotFound** \
 * **ServerError** \
 * **ValidationError** \
 * **Unauthorized** \
 * **Forbidden**
 */
export type ResultErrorCode = string;

/** Known values of {@link ComponentType} that the service accepts. */
export const enum KnownComponentType {
  Environment = "Environment",
  Repository = "Repository"
}

/**
 * Defines values for ComponentType. \
 * {@link KnownComponentType} can be used interchangeably with ComponentType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Environment** \
 * **Repository**
 */
export type ComponentType = string;

/** Known values of {@link ComponentResourceState} that the service accepts. */
export const enum KnownComponentResourceState {
  Pending = "Pending",
  Initializing = "Initializing",
  Provisioning = "Provisioning",
  Succeeded = "Succeeded",
  Failed = "Failed"
}

/**
 * Defines values for ComponentResourceState. \
 * {@link KnownComponentResourceState} can be used interchangeably with ComponentResourceState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Pending** \
 * **Initializing** \
 * **Provisioning** \
 * **Succeeded** \
 * **Failed**
 */
export type ComponentResourceState = string;

/** Known values of {@link ComponentTaskType} that the service accepts. */
export const enum KnownComponentTaskType {
  Custom = "Custom",
  Create = "Create",
  Delete = "Delete"
}

/**
 * Defines values for ComponentTaskType. \
 * {@link KnownComponentTaskType} can be used interchangeably with ComponentTaskType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Custom** \
 * **Create** \
 * **Delete**
 */
export type ComponentTaskType = string;

/** Known values of {@link ComponentTaskResourceState} that the service accepts. */
export const enum KnownComponentTaskResourceState {
  Pending = "Pending",
  Initializing = "Initializing",
  Provisioning = "Provisioning",
  Succeeded = "Succeeded",
  Failed = "Failed"
}

/**
 * Defines values for ComponentTaskResourceState. \
 * {@link KnownComponentTaskResourceState} can be used interchangeably with ComponentTaskResourceState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Pending** \
 * **Initializing** \
 * **Provisioning** \
 * **Succeeded** \
 * **Failed**
 */
export type ComponentTaskResourceState = string;

/** Known values of {@link RepositoryReferenceProvider} that the service accepts. */
export const enum KnownRepositoryReferenceProvider {
  Unknown = "Unknown",
  GitHub = "GitHub",
  DevOps = "DevOps"
}

/**
 * Defines values for RepositoryReferenceProvider. \
 * {@link KnownRepositoryReferenceProvider} can be used interchangeably with RepositoryReferenceProvider,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Unknown** \
 * **GitHub** \
 * **DevOps**
 */
export type RepositoryReferenceProvider = string;

/** Known values of {@link RepositoryReferenceType} that the service accepts. */
export const enum KnownRepositoryReferenceType {
  Unknown = "Unknown",
  Tag = "Tag",
  Branch = "Branch",
  Hash = "Hash"
}

/**
 * Defines values for RepositoryReferenceType. \
 * {@link KnownRepositoryReferenceType} can be used interchangeably with RepositoryReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Unknown** \
 * **Tag** \
 * **Branch** \
 * **Hash**
 */
export type RepositoryReferenceType = string;

/** Known values of {@link ComponentTaskTemplateType} that the service accepts. */
export const enum KnownComponentTaskTemplateType {
  Custom = "Custom",
  Create = "Create",
  Delete = "Delete"
}

/**
 * Defines values for ComponentTaskTemplateType. \
 * {@link KnownComponentTaskTemplateType} can be used interchangeably with ComponentTaskTemplateType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Custom** \
 * **Create** \
 * **Delete**
 */
export type ComponentTaskTemplateType = string;

/** Known values of {@link ComponentTemplateType} that the service accepts. */
export const enum KnownComponentTemplateType {
  Environment = "Environment",
  Repository = "Repository"
}

/**
 * Defines values for ComponentTemplateType. \
 * {@link KnownComponentTemplateType} can be used interchangeably with ComponentTemplateType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Environment** \
 * **Repository**
 */
export type ComponentTemplateType = string;

/** Known values of {@link DeploymentScopeType} that the service accepts. */
export const enum KnownDeploymentScopeType {
  AzureResourceManager = "AzureResourceManager",
  AzureDevOps = "AzureDevOps",
  GitHub = "GitHub"
}

/**
 * Defines values for DeploymentScopeType. \
 * {@link KnownDeploymentScopeType} can be used interchangeably with DeploymentScopeType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **AzureResourceManager** \
 * **AzureDevOps** \
 * **GitHub**
 */
export type DeploymentScopeType = string;

/** Known values of {@link DeploymentScopeComponentTypesItem} that the service accepts. */
export const enum KnownDeploymentScopeComponentTypesItem {
  Environment = "Environment",
  Repository = "Repository"
}

/**
 * Defines values for DeploymentScopeComponentTypesItem. \
 * {@link KnownDeploymentScopeComponentTypesItem} can be used interchangeably with DeploymentScopeComponentTypesItem,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Environment** \
 * **Repository**
 */
export type DeploymentScopeComponentTypesItem = string;

/** Known values of {@link DeploymentScopeDefinitionType} that the service accepts. */
export const enum KnownDeploymentScopeDefinitionType {
  AzureResourceManager = "AzureResourceManager",
  AzureDevOps = "AzureDevOps",
  GitHub = "GitHub"
}

/**
 * Defines values for DeploymentScopeDefinitionType. \
 * {@link KnownDeploymentScopeDefinitionType} can be used interchangeably with DeploymentScopeDefinitionType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **AzureResourceManager** \
 * **AzureDevOps** \
 * **GitHub**
 */
export type DeploymentScopeDefinitionType = string;

/** Known values of {@link CommandAuditEntityRuntimeStatus} that the service accepts. */
export const enum KnownCommandAuditEntityRuntimeStatus {
  Unknown = "Unknown",
  Running = "Running",
  Completed = "Completed",
  ContinuedAsNew = "ContinuedAsNew",
  Failed = "Failed",
  Canceled = "Canceled",
  Terminated = "Terminated",
  Pending = "Pending"
}

/**
 * Defines values for CommandAuditEntityRuntimeStatus. \
 * {@link KnownCommandAuditEntityRuntimeStatus} can be used interchangeably with CommandAuditEntityRuntimeStatus,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Unknown** \
 * **Running** \
 * **Completed** \
 * **ContinuedAsNew** \
 * **Failed** \
 * **Canceled** \
 * **Terminated** \
 * **Pending**
 */
export type CommandAuditEntityRuntimeStatus = string;

/** Known values of {@link OrganizationResourceState} that the service accepts. */
export const enum KnownOrganizationResourceState {
  Pending = "Pending",
  Initializing = "Initializing",
  Provisioning = "Provisioning",
  Succeeded = "Succeeded",
  Failed = "Failed"
}

/**
 * Defines values for OrganizationResourceState. \
 * {@link KnownOrganizationResourceState} can be used interchangeably with OrganizationResourceState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Pending** \
 * **Initializing** \
 * **Provisioning** \
 * **Succeeded** \
 * **Failed**
 */
export type OrganizationResourceState = string;

/** Known values of {@link UserType} that the service accepts. */
export const enum KnownUserType {
  User = "User",
  Group = "Group",
  System = "System",
  Service = "Service"
}

/**
 * Defines values for UserType. \
 * {@link KnownUserType} can be used interchangeably with UserType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **User** \
 * **Group** \
 * **System** \
 * **Service**
 */
export type UserType = string;

/** Known values of {@link UserRole} that the service accepts. */
export const enum KnownUserRole {
  None = "None",
  Member = "Member",
  Admin = "Admin",
  Owner = "Owner"
}

/**
 * Defines values for UserRole. \
 * {@link KnownUserRole} can be used interchangeably with UserRole,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **None** \
 * **Member** \
 * **Admin** \
 * **Owner**
 */
export type UserRole = string;

/** Known values of {@link ProjectMembershipRole} that the service accepts. */
export const enum KnownProjectMembershipRole {
  None = "None",
  Member = "Member",
  Admin = "Admin",
  Owner = "Owner",
  Adapter = "Adapter"
}

/**
 * Defines values for ProjectMembershipRole. \
 * {@link KnownProjectMembershipRole} can be used interchangeably with ProjectMembershipRole,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **None** \
 * **Member** \
 * **Admin** \
 * **Owner** \
 * **Adapter**
 */
export type ProjectMembershipRole = string;

/** Known values of {@link ProjectResourceState} that the service accepts. */
export const enum KnownProjectResourceState {
  Pending = "Pending",
  Initializing = "Initializing",
  Provisioning = "Provisioning",
  Succeeded = "Succeeded",
  Failed = "Failed"
}

/**
 * Defines values for ProjectResourceState. \
 * {@link KnownProjectResourceState} can be used interchangeably with ProjectResourceState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Pending** \
 * **Initializing** \
 * **Provisioning** \
 * **Succeeded** \
 * **Failed**
 */
export type ProjectResourceState = string;

/** Known values of {@link ScheduleDaysOfWeekItem} that the service accepts. */
export const enum KnownScheduleDaysOfWeekItem {
  Sunday = "Sunday",
  Monday = "Monday",
  Tuesday = "Tuesday",
  Wednesday = "Wednesday",
  Thursday = "Thursday",
  Friday = "Friday",
  Saturday = "Saturday"
}

/**
 * Defines values for ScheduleDaysOfWeekItem. \
 * {@link KnownScheduleDaysOfWeekItem} can be used interchangeably with ScheduleDaysOfWeekItem,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Sunday** \
 * **Monday** \
 * **Tuesday** \
 * **Wednesday** \
 * **Thursday** \
 * **Friday** \
 * **Saturday**
 */
export type ScheduleDaysOfWeekItem = string;

/** Known values of {@link ScheduleDefinitionDaysOfWeekItem} that the service accepts. */
export const enum KnownScheduleDefinitionDaysOfWeekItem {
  Sunday = "Sunday",
  Monday = "Monday",
  Tuesday = "Tuesday",
  Wednesday = "Wednesday",
  Thursday = "Thursday",
  Friday = "Friday",
  Saturday = "Saturday"
}

/**
 * Defines values for ScheduleDefinitionDaysOfWeekItem. \
 * {@link KnownScheduleDefinitionDaysOfWeekItem} can be used interchangeably with ScheduleDefinitionDaysOfWeekItem,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Sunday** \
 * **Monday** \
 * **Tuesday** \
 * **Wednesday** \
 * **Thursday** \
 * **Friday** \
 * **Saturday**
 */
export type ScheduleDefinitionDaysOfWeekItem = string;

/** Contains response data for the getAdapters operation. */
export type TeamCloudGetAdaptersResponse = AdapterInformationListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: AdapterInformationListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudGetComponentsOptionalParams
  extends coreHttp.OperationOptions {
  deleted?: boolean;
}

/** Contains response data for the getComponents operation. */
export type TeamCloudGetComponentsResponse = ComponentListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ComponentListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateComponentOptionalParams
  extends coreHttp.OperationOptions {
  body?: ComponentDefinition;
}

/** Contains response data for the createComponent operation. */
export type TeamCloudCreateComponentResponse = ComponentDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ComponentDataResult;
  };
};

/** Contains response data for the getComponent operation. */
export type TeamCloudGetComponentResponse = ComponentDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ComponentDataResult;
  };
};

/** Contains response data for the deleteComponent operation. */
export type TeamCloudDeleteComponentResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Contains response data for the getComponentTasks operation. */
export type TeamCloudGetComponentTasksResponse = ComponentTaskListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ComponentTaskListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateComponentTaskOptionalParams
  extends coreHttp.OperationOptions {
  body?: ComponentTaskDefinition;
}

/** Contains response data for the createComponentTask operation. */
export type TeamCloudCreateComponentTaskResponse = ComponentTaskDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ComponentTaskDataResult;
  };
};

/** Contains response data for the getComponentTask operation. */
export type TeamCloudGetComponentTaskResponse = ComponentTaskDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ComponentTaskDataResult;
  };
};

/** Contains response data for the getComponentTemplates operation. */
export type TeamCloudGetComponentTemplatesResponse = ComponentTemplateListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ComponentTemplateListDataResult;
  };
};

/** Contains response data for the getComponentTemplate operation. */
export type TeamCloudGetComponentTemplateResponse = ComponentTemplateDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ComponentTemplateDataResult;
  };
};

/** Contains response data for the getDeploymentScopes operation. */
export type TeamCloudGetDeploymentScopesResponse = DeploymentScopeListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeploymentScopeListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateDeploymentScopeOptionalParams
  extends coreHttp.OperationOptions {
  body?: DeploymentScopeDefinition;
}

/** Contains response data for the createDeploymentScope operation. */
export type TeamCloudCreateDeploymentScopeResponse = DeploymentScopeDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeploymentScopeDataResult;
  };
};

/** Contains response data for the getDeploymentScope operation. */
export type TeamCloudGetDeploymentScopeResponse = DeploymentScopeDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeploymentScopeDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudUpdateDeploymentScopeOptionalParams
  extends coreHttp.OperationOptions {
  body?: DeploymentScope;
}

/** Contains response data for the updateDeploymentScope operation. */
export type TeamCloudUpdateDeploymentScopeResponse = DeploymentScopeDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeploymentScopeDataResult;
  };
};

/** Contains response data for the deleteDeploymentScope operation. */
export type TeamCloudDeleteDeploymentScopeResponse = DeploymentScopeDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeploymentScopeDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudAuthorizeDeploymentScopeOptionalParams
  extends coreHttp.OperationOptions {
  body?: DeploymentScope;
}

/** Contains response data for the authorizeDeploymentScope operation. */
export type TeamCloudAuthorizeDeploymentScopeResponse = DeploymentScopeDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeploymentScopeDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudGetAuditEntriesOptionalParams
  extends coreHttp.OperationOptions {
  timeRange?: string;
  /** Array of Get1ItemsItem */
  commands?: string[];
}

/** Contains response data for the getAuditEntries operation. */
export type TeamCloudGetAuditEntriesResponse = CommandAuditEntityListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: CommandAuditEntityListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudGetAuditEntryOptionalParams
  extends coreHttp.OperationOptions {
  expand?: boolean;
}

/** Contains response data for the getAuditEntry operation. */
export type TeamCloudGetAuditEntryResponse = CommandAuditEntityDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: CommandAuditEntityDataResult;
  };
};

/** Contains response data for the getAuditCommands operation. */
export type TeamCloudGetAuditCommandsResponse = StringListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StringListDataResult;
  };
};

/** Contains response data for the getOrganizations operation. */
export type TeamCloudGetOrganizationsResponse = OrganizationListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: OrganizationListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateOrganizationOptionalParams
  extends coreHttp.OperationOptions {
  body?: OrganizationDefinition;
}

/** Contains response data for the createOrganization operation. */
export type TeamCloudCreateOrganizationResponse = OrganizationDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: OrganizationDataResult;
  };
};

/** Contains response data for the getOrganization operation. */
export type TeamCloudGetOrganizationResponse = OrganizationDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: OrganizationDataResult;
  };
};

/** Contains response data for the deleteOrganization operation. */
export type TeamCloudDeleteOrganizationResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Contains response data for the getOrganizationUsers operation. */
export type TeamCloudGetOrganizationUsersResponse = UserListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateOrganizationUserOptionalParams
  extends coreHttp.OperationOptions {
  body?: UserDefinition;
}

/** Contains response data for the createOrganizationUser operation. */
export type TeamCloudCreateOrganizationUserResponse = UserDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserDataResult;
  };
};

/** Contains response data for the getOrganizationUser operation. */
export type TeamCloudGetOrganizationUserResponse = UserDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudUpdateOrganizationUserOptionalParams
  extends coreHttp.OperationOptions {
  body?: User;
}

/** Contains response data for the updateOrganizationUser operation. */
export type TeamCloudUpdateOrganizationUserResponse = UserDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserDataResult;
  };
};

/** Contains response data for the deleteOrganizationUser operation. */
export type TeamCloudDeleteOrganizationUserResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Contains response data for the getOrganizationUserMe operation. */
export type TeamCloudGetOrganizationUserMeResponse = UserDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudUpdateOrganizationUserMeOptionalParams
  extends coreHttp.OperationOptions {
  body?: User;
}

/** Contains response data for the updateOrganizationUserMe operation. */
export type TeamCloudUpdateOrganizationUserMeResponse = UserDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserDataResult;
  };
};

/** Contains response data for the getProjects operation. */
export type TeamCloudGetProjectsResponse = ProjectListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateProjectOptionalParams
  extends coreHttp.OperationOptions {
  body?: ProjectDefinition;
}

/** Contains response data for the createProject operation. */
export type TeamCloudCreateProjectResponse = ProjectDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectDataResult;
  };
};

/** Contains response data for the getProject operation. */
export type TeamCloudGetProjectResponse = ProjectDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectDataResult;
  };
};

/** Contains response data for the deleteProject operation. */
export type TeamCloudDeleteProjectResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Contains response data for the getProjectIdentities operation. */
export type TeamCloudGetProjectIdentitiesResponse = ProjectIdentityListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectIdentityListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateProjectIdentityOptionalParams
  extends coreHttp.OperationOptions {
  body?: ProjectIdentityDefinition;
}

/** Contains response data for the createProjectIdentity operation. */
export type TeamCloudCreateProjectIdentityResponse = ProjectIdentityDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectIdentityDataResult;
  };
};

/** Contains response data for the getProjectIdentity operation. */
export type TeamCloudGetProjectIdentityResponse = ProjectIdentityDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectIdentityDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudUpdateProjectIdentityOptionalParams
  extends coreHttp.OperationOptions {
  body?: ProjectIdentity;
}

/** Contains response data for the updateProjectIdentity operation. */
export type TeamCloudUpdateProjectIdentityResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Contains response data for the deleteProjectIdentity operation. */
export type TeamCloudDeleteProjectIdentityResponse = ProjectIdentityDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectIdentityDataResult;
  };
};

/** Contains response data for the getProjectTags operation. */
export type TeamCloudGetProjectTagsResponse = StringDictionaryDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StringDictionaryDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateProjectTagOptionalParams
  extends coreHttp.OperationOptions {
  /** Dictionary of <string> */
  body?: { [propertyName: string]: string };
}

/** Contains response data for the createProjectTag operation. */
export type TeamCloudCreateProjectTagResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Optional parameters. */
export interface TeamCloudUpdateProjectTagOptionalParams
  extends coreHttp.OperationOptions {
  /** Dictionary of <string> */
  body?: { [propertyName: string]: string };
}

/** Contains response data for the updateProjectTag operation. */
export type TeamCloudUpdateProjectTagResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Contains response data for the getProjectTagByKey operation. */
export type TeamCloudGetProjectTagByKeyResponse = StringDictionaryDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StringDictionaryDataResult;
  };
};

/** Contains response data for the deleteProjectTag operation. */
export type TeamCloudDeleteProjectTagResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Contains response data for the getProjectTemplates operation. */
export type TeamCloudGetProjectTemplatesResponse = ProjectTemplateListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectTemplateListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateProjectTemplateOptionalParams
  extends coreHttp.OperationOptions {
  body?: ProjectTemplateDefinition;
}

/** Contains response data for the createProjectTemplate operation. */
export type TeamCloudCreateProjectTemplateResponse = ProjectTemplateDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectTemplateDataResult;
  };
};

/** Contains response data for the getProjectTemplate operation. */
export type TeamCloudGetProjectTemplateResponse = ProjectTemplateDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectTemplateDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudUpdateProjectTemplateOptionalParams
  extends coreHttp.OperationOptions {
  body?: ProjectTemplate;
}

/** Contains response data for the updateProjectTemplate operation. */
export type TeamCloudUpdateProjectTemplateResponse = ProjectTemplateDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectTemplateDataResult;
  };
};

/** Contains response data for the deleteProjectTemplate operation. */
export type TeamCloudDeleteProjectTemplateResponse = ProjectTemplateDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectTemplateDataResult;
  };
};

/** Contains response data for the getProjectUsers operation. */
export type TeamCloudGetProjectUsersResponse = UserListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateProjectUserOptionalParams
  extends coreHttp.OperationOptions {
  body?: UserDefinition;
}

/** Contains response data for the createProjectUser operation. */
export type TeamCloudCreateProjectUserResponse = UserDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserDataResult;
  };
};

/** Contains response data for the getProjectUser operation. */
export type TeamCloudGetProjectUserResponse = UserDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudUpdateProjectUserOptionalParams
  extends coreHttp.OperationOptions {
  body?: User;
}

/** Contains response data for the updateProjectUser operation. */
export type TeamCloudUpdateProjectUserResponse = UserDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserDataResult;
  };
};

/** Contains response data for the deleteProjectUser operation. */
export type TeamCloudDeleteProjectUserResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Contains response data for the getProjectUserMe operation. */
export type TeamCloudGetProjectUserMeResponse = UserDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudUpdateProjectUserMeOptionalParams
  extends coreHttp.OperationOptions {
  body?: User;
}

/** Contains response data for the updateProjectUserMe operation. */
export type TeamCloudUpdateProjectUserMeResponse = UserDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UserDataResult;
  };
};

/** Contains response data for the getSchedules operation. */
export type TeamCloudGetSchedulesResponse = ScheduleListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ScheduleListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudCreateScheduleOptionalParams
  extends coreHttp.OperationOptions {
  body?: ScheduleDefinition;
}

/** Contains response data for the createSchedule operation. */
export type TeamCloudCreateScheduleResponse = ScheduleDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ScheduleDataResult;
  };
};

/** Contains response data for the getSchedule operation. */
export type TeamCloudGetScheduleResponse = ScheduleDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ScheduleDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudUpdateScheduleOptionalParams
  extends coreHttp.OperationOptions {
  body?: Schedule;
}

/** Contains response data for the updateSchedule operation. */
export type TeamCloudUpdateScheduleResponse = ScheduleDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ScheduleDataResult;
  };
};

/** Contains response data for the runSchedule operation. */
export type TeamCloudRunScheduleResponse = ScheduleDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ScheduleDataResult;
  };
};

/** Contains response data for the getStatus operation. */
export type TeamCloudGetStatusResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Contains response data for the getProjectStatus operation. */
export type TeamCloudGetProjectStatusResponse = StatusResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: StatusResult;
  };
};

/** Contains response data for the getUserProjects operation. */
export type TeamCloudGetUserProjectsResponse = ProjectListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectListDataResult;
  };
};

/** Contains response data for the getUserProjectsMe operation. */
export type TeamCloudGetUserProjectsMeResponse = ProjectListDataResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ProjectListDataResult;
  };
};

/** Optional parameters. */
export interface TeamCloudOptionalParams extends coreHttp.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
