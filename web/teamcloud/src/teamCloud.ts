/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { TeamCloudContext } from "./teamCloudContext";
import {
  TeamCloudOptionalParams,
  GetAdaptersOptionalParams,
  GetAdaptersResponse,
  GetComponentsOptionalParams,
  GetComponentsResponse,
  CreateComponentOptionalParams,
  CreateComponentResponse,
  GetComponentOptionalParams,
  GetComponentResponse,
  DeleteComponentOptionalParams,
  DeleteComponentResponse,
  GetComponentTasksOptionalParams,
  GetComponentTasksResponse,
  CreateComponentTaskOptionalParams,
  CreateComponentTaskResponse,
  GetComponentTaskOptionalParams,
  GetComponentTaskResponse,
  CancelComponentTaskOptionalParams,
  CancelComponentTaskResponse,
  ReRunComponentTaskOptionalParams,
  ReRunComponentTaskResponse,
  GetComponentTemplatesOptionalParams,
  GetComponentTemplatesResponse,
  GetComponentTemplateOptionalParams,
  GetComponentTemplateResponse,
  GetDeploymentScopesOptionalParams,
  GetDeploymentScopesResponse,
  CreateDeploymentScopeOptionalParams,
  CreateDeploymentScopeResponse,
  GetDeploymentScopeOptionalParams,
  GetDeploymentScopeResponse,
  UpdateDeploymentScopeOptionalParams,
  UpdateDeploymentScopeResponse,
  DeleteDeploymentScopeOptionalParams,
  DeleteDeploymentScopeResponse,
  InitializeAuthorizationOptionalParams,
  InitializeAuthorizationResponse,
  NegotiateSignalROptionalParams,
  GetAuditEntriesOptionalParams,
  GetAuditEntriesResponse,
  GetAuditEntryOptionalParams,
  GetAuditEntryResponse,
  GetAuditCommandsOptionalParams,
  GetAuditCommandsResponse,
  GetOrganizationsOptionalParams,
  GetOrganizationsResponse,
  CreateOrganizationOptionalParams,
  CreateOrganizationResponse,
  GetOrganizationOptionalParams,
  GetOrganizationResponse,
  DeleteOrganizationOptionalParams,
  DeleteOrganizationResponse,
  GetOrganizationUsersOptionalParams,
  GetOrganizationUsersResponse,
  CreateOrganizationUserOptionalParams,
  CreateOrganizationUserResponse,
  GetOrganizationUserOptionalParams,
  GetOrganizationUserResponse,
  UpdateOrganizationUserOptionalParams,
  UpdateOrganizationUserResponse,
  DeleteOrganizationUserOptionalParams,
  DeleteOrganizationUserResponse,
  GetOrganizationUserMeOptionalParams,
  GetOrganizationUserMeResponse,
  UpdateOrganizationUserMeOptionalParams,
  UpdateOrganizationUserMeResponse,
  GetProjectsOptionalParams,
  GetProjectsResponse,
  CreateProjectOptionalParams,
  CreateProjectResponse,
  GetProjectOptionalParams,
  GetProjectResponse,
  DeleteProjectOptionalParams,
  DeleteProjectResponse,
  GetProjectIdentitiesOptionalParams,
  GetProjectIdentitiesResponse,
  CreateProjectIdentityOptionalParams,
  CreateProjectIdentityResponse,
  GetProjectIdentityOptionalParams,
  GetProjectIdentityResponse,
  UpdateProjectIdentityOptionalParams,
  UpdateProjectIdentityResponse,
  DeleteProjectIdentityOptionalParams,
  DeleteProjectIdentityResponse,
  GetProjectTagsOptionalParams,
  GetProjectTagsResponse,
  CreateProjectTagOptionalParams,
  CreateProjectTagResponse,
  UpdateProjectTagOptionalParams,
  UpdateProjectTagResponse,
  GetProjectTagByKeyOptionalParams,
  GetProjectTagByKeyResponse,
  DeleteProjectTagOptionalParams,
  DeleteProjectTagResponse,
  GetProjectTemplatesOptionalParams,
  GetProjectTemplatesResponse,
  CreateProjectTemplateOptionalParams,
  CreateProjectTemplateResponse,
  GetProjectTemplateOptionalParams,
  GetProjectTemplateResponse,
  UpdateProjectTemplateOptionalParams,
  UpdateProjectTemplateResponse,
  DeleteProjectTemplateOptionalParams,
  DeleteProjectTemplateResponse,
  GetProjectUsersOptionalParams,
  GetProjectUsersResponse,
  CreateProjectUserOptionalParams,
  CreateProjectUserResponse,
  GetProjectUserOptionalParams,
  GetProjectUserResponse,
  UpdateProjectUserOptionalParams,
  UpdateProjectUserResponse,
  DeleteProjectUserOptionalParams,
  DeleteProjectUserResponse,
  GetProjectUserMeOptionalParams,
  GetProjectUserMeResponse,
  UpdateProjectUserMeOptionalParams,
  UpdateProjectUserMeResponse,
  GetInfoOptionalParams,
  GetInfoResponse,
  GetSchedulesOptionalParams,
  GetSchedulesResponse,
  CreateScheduleOptionalParams,
  CreateScheduleResponse,
  GetScheduleOptionalParams,
  GetScheduleResponse,
  UpdateScheduleOptionalParams,
  UpdateScheduleResponse,
  RunScheduleOptionalParams,
  RunScheduleResponse,
  GetStatusOptionalParams,
  GetStatusResponse,
  GetProjectStatusOptionalParams,
  GetProjectStatusResponse,
  GetUserProjectsOptionalParams,
  GetUserProjectsResponse,
  GetUserProjectsMeOptionalParams,
  GetUserProjectsMeResponse
} from "./models";

export class TeamCloud extends TeamCloudContext {
  /**
   * Initializes a new instance of the TeamCloud class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param $host server parameter
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    $host: string,
    options?: TeamCloudOptionalParams
  ) {
    super(credentials, $host, options);
  }

  /**
   * Gets all Adapters.
   * @param options The options parameters.
   */
  getAdapters(
    options?: GetAdaptersOptionalParams
  ): Promise<GetAdaptersResponse> {
    return this.sendOperationRequest({ options }, getAdaptersOperationSpec);
  }

  /**
   * Gets all Components for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponents(
    organizationId: string,
    projectId: string,
    options?: GetComponentsOptionalParams
  ): Promise<GetComponentsResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getComponentsOperationSpec
    );
  }

  /**
   * Creates a new Project Component.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createComponent(
    organizationId: string,
    projectId: string,
    options?: CreateComponentOptionalParams
  ): Promise<CreateComponentResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      createComponentOperationSpec
    );
  }

  /**
   * Gets a Project Component.
   * @param componentId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponent(
    componentId: string,
    organizationId: string,
    projectId: string,
    options?: GetComponentOptionalParams
  ): Promise<GetComponentResponse> {
    return this.sendOperationRequest(
      { componentId, organizationId, projectId, options },
      getComponentOperationSpec
    );
  }

  /**
   * Deletes an existing Project Component.
   * @param componentId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteComponent(
    componentId: string,
    organizationId: string,
    projectId: string,
    options?: DeleteComponentOptionalParams
  ): Promise<DeleteComponentResponse> {
    return this.sendOperationRequest(
      { componentId, organizationId, projectId, options },
      deleteComponentOperationSpec
    );
  }

  /**
   * Gets all Component Tasks.
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  getComponentTasks(
    organizationId: string,
    projectId: string,
    componentId: string,
    options?: GetComponentTasksOptionalParams
  ): Promise<GetComponentTasksResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, componentId, options },
      getComponentTasksOperationSpec
    );
  }

  /**
   * Creates a new Project Component Task.
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  createComponentTask(
    organizationId: string,
    projectId: string,
    componentId: string,
    options?: CreateComponentTaskOptionalParams
  ): Promise<CreateComponentTaskResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, componentId, options },
      createComponentTaskOperationSpec
    );
  }

  /**
   * Gets the Component Task.
   * @param taskId
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  getComponentTask(
    taskId: string,
    organizationId: string,
    projectId: string,
    componentId: string,
    options?: GetComponentTaskOptionalParams
  ): Promise<GetComponentTaskResponse> {
    return this.sendOperationRequest(
      { taskId, organizationId, projectId, componentId, options },
      getComponentTaskOperationSpec
    );
  }

  /**
   * Rerun a Project Component Task.
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param taskId
   * @param options The options parameters.
   */
  cancelComponentTask(
    organizationId: string,
    projectId: string,
    componentId: string,
    taskId: string,
    options?: CancelComponentTaskOptionalParams
  ): Promise<CancelComponentTaskResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, componentId, taskId, options },
      cancelComponentTaskOperationSpec
    );
  }

  /**
   * Cancel an active Project Component Task.
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param taskId
   * @param options The options parameters.
   */
  reRunComponentTask(
    organizationId: string,
    projectId: string,
    componentId: string,
    taskId: string,
    options?: ReRunComponentTaskOptionalParams
  ): Promise<ReRunComponentTaskResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, componentId, taskId, options },
      reRunComponentTaskOperationSpec
    );
  }

  /**
   * Gets all Component Templates for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponentTemplates(
    organizationId: string,
    projectId: string,
    options?: GetComponentTemplatesOptionalParams
  ): Promise<GetComponentTemplatesResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getComponentTemplatesOperationSpec
    );
  }

  /**
   * Gets the Component Template.
   * @param id
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponentTemplate(
    id: string,
    organizationId: string,
    projectId: string,
    options?: GetComponentTemplateOptionalParams
  ): Promise<GetComponentTemplateResponse> {
    return this.sendOperationRequest(
      { id, organizationId, projectId, options },
      getComponentTemplateOperationSpec
    );
  }

  /**
   * Gets all Deployment Scopes.
   * @param organizationId
   * @param options The options parameters.
   */
  getDeploymentScopes(
    organizationId: string,
    options?: GetDeploymentScopesOptionalParams
  ): Promise<GetDeploymentScopesResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getDeploymentScopesOperationSpec
    );
  }

  /**
   * Creates a new Deployment Scope.
   * @param organizationId
   * @param options The options parameters.
   */
  createDeploymentScope(
    organizationId: string,
    options?: CreateDeploymentScopeOptionalParams
  ): Promise<CreateDeploymentScopeResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      createDeploymentScopeOperationSpec
    );
  }

  /**
   * Gets a Deployment Scope.
   * @param organizationId
   * @param deploymentScopeId
   * @param options The options parameters.
   */
  getDeploymentScope(
    organizationId: string,
    deploymentScopeId: string,
    options?: GetDeploymentScopeOptionalParams
  ): Promise<GetDeploymentScopeResponse> {
    return this.sendOperationRequest(
      { organizationId, deploymentScopeId, options },
      getDeploymentScopeOperationSpec
    );
  }

  /**
   * Updates an existing Deployment Scope.
   * @param organizationId
   * @param deploymentScopeId
   * @param options The options parameters.
   */
  updateDeploymentScope(
    organizationId: string,
    deploymentScopeId: string,
    options?: UpdateDeploymentScopeOptionalParams
  ): Promise<UpdateDeploymentScopeResponse> {
    return this.sendOperationRequest(
      { organizationId, deploymentScopeId, options },
      updateDeploymentScopeOperationSpec
    );
  }

  /**
   * Deletes a Deployment Scope.
   * @param organizationId
   * @param deploymentScopeId
   * @param options The options parameters.
   */
  deleteDeploymentScope(
    organizationId: string,
    deploymentScopeId: string,
    options?: DeleteDeploymentScopeOptionalParams
  ): Promise<DeleteDeploymentScopeResponse> {
    return this.sendOperationRequest(
      { organizationId, deploymentScopeId, options },
      deleteDeploymentScopeOperationSpec
    );
  }

  /**
   * Initialize a new authorization session for a deployment scope.
   * @param organizationId
   * @param deploymentScopeId
   * @param options The options parameters.
   */
  initializeAuthorization(
    organizationId: string,
    deploymentScopeId: string,
    options?: InitializeAuthorizationOptionalParams
  ): Promise<InitializeAuthorizationResponse> {
    return this.sendOperationRequest(
      { organizationId, deploymentScopeId, options },
      initializeAuthorizationOperationSpec
    );
  }

  /**
   * Negotiates the SignalR connection.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  negotiateSignalR(
    organizationId: string,
    projectId: string,
    options?: NegotiateSignalROptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      negotiateSignalROperationSpec
    );
  }

  /**
   * Gets all audit entries.
   * @param organizationId
   * @param options The options parameters.
   */
  getAuditEntries(
    organizationId: string,
    options?: GetAuditEntriesOptionalParams
  ): Promise<GetAuditEntriesResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getAuditEntriesOperationSpec
    );
  }

  /**
   * Gets an audit entry.
   * @param commandId
   * @param organizationId
   * @param options The options parameters.
   */
  getAuditEntry(
    commandId: string,
    organizationId: string,
    options?: GetAuditEntryOptionalParams
  ): Promise<GetAuditEntryResponse> {
    return this.sendOperationRequest(
      { commandId, organizationId, options },
      getAuditEntryOperationSpec
    );
  }

  /**
   * Gets all auditable commands.
   * @param organizationId
   * @param options The options parameters.
   */
  getAuditCommands(
    organizationId: string,
    options?: GetAuditCommandsOptionalParams
  ): Promise<GetAuditCommandsResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getAuditCommandsOperationSpec
    );
  }

  /**
   * Gets all Organizations.
   * @param options The options parameters.
   */
  getOrganizations(
    options?: GetOrganizationsOptionalParams
  ): Promise<GetOrganizationsResponse> {
    return this.sendOperationRequest(
      { options },
      getOrganizationsOperationSpec
    );
  }

  /**
   * Creates a new Organization.
   * @param options The options parameters.
   */
  createOrganization(
    options?: CreateOrganizationOptionalParams
  ): Promise<CreateOrganizationResponse> {
    return this.sendOperationRequest(
      { options },
      createOrganizationOperationSpec
    );
  }

  /**
   * Gets an Organization.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganization(
    organizationId: string,
    options?: GetOrganizationOptionalParams
  ): Promise<GetOrganizationResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getOrganizationOperationSpec
    );
  }

  /**
   * Deletes an existing Organization.
   * @param organizationId
   * @param options The options parameters.
   */
  deleteOrganization(
    organizationId: string,
    options?: DeleteOrganizationOptionalParams
  ): Promise<DeleteOrganizationResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      deleteOrganizationOperationSpec
    );
  }

  /**
   * Gets all Users.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUsers(
    organizationId: string,
    options?: GetOrganizationUsersOptionalParams
  ): Promise<GetOrganizationUsersResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getOrganizationUsersOperationSpec
    );
  }

  /**
   * Creates a new User.
   * @param organizationId
   * @param options The options parameters.
   */
  createOrganizationUser(
    organizationId: string,
    options?: CreateOrganizationUserOptionalParams
  ): Promise<CreateOrganizationUserResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      createOrganizationUserOperationSpec
    );
  }

  /**
   * Gets a User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUser(
    userId: string,
    organizationId: string,
    options?: GetOrganizationUserOptionalParams
  ): Promise<GetOrganizationUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, options },
      getOrganizationUserOperationSpec
    );
  }

  /**
   * Updates an existing User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  updateOrganizationUser(
    userId: string,
    organizationId: string,
    options?: UpdateOrganizationUserOptionalParams
  ): Promise<UpdateOrganizationUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, options },
      updateOrganizationUserOperationSpec
    );
  }

  /**
   * Deletes an existing User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteOrganizationUser(
    userId: string,
    organizationId: string,
    options?: DeleteOrganizationUserOptionalParams
  ): Promise<DeleteOrganizationUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, options },
      deleteOrganizationUserOperationSpec
    );
  }

  /**
   * Gets a User A User matching the current authenticated user.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUserMe(
    organizationId: string,
    options?: GetOrganizationUserMeOptionalParams
  ): Promise<GetOrganizationUserMeResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getOrganizationUserMeOperationSpec
    );
  }

  /**
   * Updates an existing User.
   * @param organizationId
   * @param options The options parameters.
   */
  updateOrganizationUserMe(
    organizationId: string,
    options?: UpdateOrganizationUserMeOptionalParams
  ): Promise<UpdateOrganizationUserMeResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      updateOrganizationUserMeOperationSpec
    );
  }

  /**
   * Gets all Projects.
   * @param organizationId
   * @param options The options parameters.
   */
  getProjects(
    organizationId: string,
    options?: GetProjectsOptionalParams
  ): Promise<GetProjectsResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getProjectsOperationSpec
    );
  }

  /**
   * Creates a new Project.
   * @param organizationId
   * @param options The options parameters.
   */
  createProject(
    organizationId: string,
    options?: CreateProjectOptionalParams
  ): Promise<CreateProjectResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      createProjectOperationSpec
    );
  }

  /**
   * Gets a Project.
   * @param projectId
   * @param organizationId
   * @param options The options parameters.
   */
  getProject(
    projectId: string,
    organizationId: string,
    options?: GetProjectOptionalParams
  ): Promise<GetProjectResponse> {
    return this.sendOperationRequest(
      { projectId, organizationId, options },
      getProjectOperationSpec
    );
  }

  /**
   * Deletes a Project.
   * @param projectId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteProject(
    projectId: string,
    organizationId: string,
    options?: DeleteProjectOptionalParams
  ): Promise<DeleteProjectResponse> {
    return this.sendOperationRequest(
      { projectId, organizationId, options },
      deleteProjectOperationSpec
    );
  }

  /**
   * Gets all Project Identities.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectIdentities(
    organizationId: string,
    projectId: string,
    options?: GetProjectIdentitiesOptionalParams
  ): Promise<GetProjectIdentitiesResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getProjectIdentitiesOperationSpec
    );
  }

  /**
   * Creates a new Project Identity.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectIdentity(
    organizationId: string,
    projectId: string,
    options?: CreateProjectIdentityOptionalParams
  ): Promise<CreateProjectIdentityResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      createProjectIdentityOperationSpec
    );
  }

  /**
   * Gets a Project Identity.
   * @param projectIdentityId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectIdentity(
    projectIdentityId: string,
    organizationId: string,
    projectId: string,
    options?: GetProjectIdentityOptionalParams
  ): Promise<GetProjectIdentityResponse> {
    return this.sendOperationRequest(
      { projectIdentityId, organizationId, projectId, options },
      getProjectIdentityOperationSpec
    );
  }

  /**
   * Updates an existing Project Identity.
   * @param projectIdentityId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectIdentity(
    projectIdentityId: string,
    organizationId: string,
    projectId: string,
    options?: UpdateProjectIdentityOptionalParams
  ): Promise<UpdateProjectIdentityResponse> {
    return this.sendOperationRequest(
      { projectIdentityId, organizationId, projectId, options },
      updateProjectIdentityOperationSpec
    );
  }

  /**
   * Deletes a Project Identity.
   * @param projectIdentityId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectIdentity(
    projectIdentityId: string,
    organizationId: string,
    projectId: string,
    options?: DeleteProjectIdentityOptionalParams
  ): Promise<DeleteProjectIdentityResponse> {
    return this.sendOperationRequest(
      { projectIdentityId, organizationId, projectId, options },
      deleteProjectIdentityOperationSpec
    );
  }

  /**
   * Gets all Tags for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectTags(
    organizationId: string,
    projectId: string,
    options?: GetProjectTagsOptionalParams
  ): Promise<GetProjectTagsResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getProjectTagsOperationSpec
    );
  }

  /**
   * Creates a new Project Tag.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectTag(
    organizationId: string,
    projectId: string,
    options?: CreateProjectTagOptionalParams
  ): Promise<CreateProjectTagResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      createProjectTagOperationSpec
    );
  }

  /**
   * Updates an existing Project Tag.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectTag(
    organizationId: string,
    projectId: string,
    options?: UpdateProjectTagOptionalParams
  ): Promise<UpdateProjectTagResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      updateProjectTagOperationSpec
    );
  }

  /**
   * Gets a Project Tag by Key.
   * @param tagKey
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectTagByKey(
    tagKey: string,
    organizationId: string,
    projectId: string,
    options?: GetProjectTagByKeyOptionalParams
  ): Promise<GetProjectTagByKeyResponse> {
    return this.sendOperationRequest(
      { tagKey, organizationId, projectId, options },
      getProjectTagByKeyOperationSpec
    );
  }

  /**
   * Deletes an existing Project Tag.
   * @param tagKey
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectTag(
    tagKey: string,
    organizationId: string,
    projectId: string,
    options?: DeleteProjectTagOptionalParams
  ): Promise<DeleteProjectTagResponse> {
    return this.sendOperationRequest(
      { tagKey, organizationId, projectId, options },
      deleteProjectTagOperationSpec
    );
  }

  /**
   * Gets all Project Templates.
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectTemplates(
    organizationId: string,
    options?: GetProjectTemplatesOptionalParams
  ): Promise<GetProjectTemplatesResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getProjectTemplatesOperationSpec
    );
  }

  /**
   * Creates a new Project Template.
   * @param organizationId
   * @param options The options parameters.
   */
  createProjectTemplate(
    organizationId: string,
    options?: CreateProjectTemplateOptionalParams
  ): Promise<CreateProjectTemplateResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      createProjectTemplateOperationSpec
    );
  }

  /**
   * Gets a Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectTemplate(
    projectTemplateId: string,
    organizationId: string,
    options?: GetProjectTemplateOptionalParams
  ): Promise<GetProjectTemplateResponse> {
    return this.sendOperationRequest(
      { projectTemplateId, organizationId, options },
      getProjectTemplateOperationSpec
    );
  }

  /**
   * Updates an existing Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  updateProjectTemplate(
    projectTemplateId: string,
    organizationId: string,
    options?: UpdateProjectTemplateOptionalParams
  ): Promise<UpdateProjectTemplateResponse> {
    return this.sendOperationRequest(
      { projectTemplateId, organizationId, options },
      updateProjectTemplateOperationSpec
    );
  }

  /**
   * Deletes a Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteProjectTemplate(
    projectTemplateId: string,
    organizationId: string,
    options?: DeleteProjectTemplateOptionalParams
  ): Promise<DeleteProjectTemplateResponse> {
    return this.sendOperationRequest(
      { projectTemplateId, organizationId, options },
      deleteProjectTemplateOperationSpec
    );
  }

  /**
   * Gets all Users for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUsers(
    organizationId: string,
    projectId: string,
    options?: GetProjectUsersOptionalParams
  ): Promise<GetProjectUsersResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getProjectUsersOperationSpec
    );
  }

  /**
   * Creates a new Project User
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectUser(
    organizationId: string,
    projectId: string,
    options?: CreateProjectUserOptionalParams
  ): Promise<CreateProjectUserResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      createProjectUserOperationSpec
    );
  }

  /**
   * Gets a Project User by ID or email address.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUser(
    userId: string,
    organizationId: string,
    projectId: string,
    options?: GetProjectUserOptionalParams
  ): Promise<GetProjectUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, projectId, options },
      getProjectUserOperationSpec
    );
  }

  /**
   * Updates an existing Project User.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectUser(
    userId: string,
    organizationId: string,
    projectId: string,
    options?: UpdateProjectUserOptionalParams
  ): Promise<UpdateProjectUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, projectId, options },
      updateProjectUserOperationSpec
    );
  }

  /**
   * Deletes an existing Project User.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectUser(
    userId: string,
    organizationId: string,
    projectId: string,
    options?: DeleteProjectUserOptionalParams
  ): Promise<DeleteProjectUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, projectId, options },
      deleteProjectUserOperationSpec
    );
  }

  /**
   * Gets a Project User for the calling user.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUserMe(
    organizationId: string,
    projectId: string,
    options?: GetProjectUserMeOptionalParams
  ): Promise<GetProjectUserMeResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getProjectUserMeOperationSpec
    );
  }

  /**
   * Updates an existing Project User.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectUserMe(
    organizationId: string,
    projectId: string,
    options?: UpdateProjectUserMeOptionalParams
  ): Promise<UpdateProjectUserMeResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      updateProjectUserMeOperationSpec
    );
  }

  /**
   * Gets information about this TeamCloud deployment.
   * @param options The options parameters.
   */
  getInfo(options?: GetInfoOptionalParams): Promise<GetInfoResponse> {
    return this.sendOperationRequest({ options }, getInfoOperationSpec);
  }

  /**
   * Gets all Schedule.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getSchedules(
    organizationId: string,
    projectId: string,
    options?: GetSchedulesOptionalParams
  ): Promise<GetSchedulesResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getSchedulesOperationSpec
    );
  }

  /**
   * Creates a new Project Schedule.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createSchedule(
    organizationId: string,
    projectId: string,
    options?: CreateScheduleOptionalParams
  ): Promise<CreateScheduleResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      createScheduleOperationSpec
    );
  }

  /**
   * Gets the Schedule.
   * @param scheduleId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getSchedule(
    scheduleId: string,
    organizationId: string,
    projectId: string,
    options?: GetScheduleOptionalParams
  ): Promise<GetScheduleResponse> {
    return this.sendOperationRequest(
      { scheduleId, organizationId, projectId, options },
      getScheduleOperationSpec
    );
  }

  /**
   * Updates a Project Schedule.
   * @param scheduleId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateSchedule(
    scheduleId: string,
    organizationId: string,
    projectId: string,
    options?: UpdateScheduleOptionalParams
  ): Promise<UpdateScheduleResponse> {
    return this.sendOperationRequest(
      { scheduleId, organizationId, projectId, options },
      updateScheduleOperationSpec
    );
  }

  /**
   * Runs a Project Schedule.
   * @param scheduleId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  runSchedule(
    scheduleId: string,
    organizationId: string,
    projectId: string,
    options?: RunScheduleOptionalParams
  ): Promise<RunScheduleResponse> {
    return this.sendOperationRequest(
      { scheduleId, organizationId, projectId, options },
      runScheduleOperationSpec
    );
  }

  /**
   * Gets the status of a long-running operation.
   * @param trackingId
   * @param organizationId
   * @param options The options parameters.
   */
  getStatus(
    trackingId: string,
    organizationId: string,
    options?: GetStatusOptionalParams
  ): Promise<GetStatusResponse> {
    return this.sendOperationRequest(
      { trackingId, organizationId, options },
      getStatusOperationSpec
    );
  }

  /**
   * Gets the status of a long-running operation.
   * @param projectId
   * @param trackingId
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectStatus(
    projectId: string,
    trackingId: string,
    organizationId: string,
    options?: GetProjectStatusOptionalParams
  ): Promise<GetProjectStatusResponse> {
    return this.sendOperationRequest(
      { projectId, trackingId, organizationId, options },
      getProjectStatusOperationSpec
    );
  }

  /**
   * Gets all Projects for a User.
   * @param organizationId
   * @param userId
   * @param options The options parameters.
   */
  getUserProjects(
    organizationId: string,
    userId: string,
    options?: GetUserProjectsOptionalParams
  ): Promise<GetUserProjectsResponse> {
    return this.sendOperationRequest(
      { organizationId, userId, options },
      getUserProjectsOperationSpec
    );
  }

  /**
   * Gets all Projects for a User.
   * @param organizationId
   * @param options The options parameters.
   */
  getUserProjectsMe(
    organizationId: string,
    options?: GetUserProjectsMeOptionalParams
  ): Promise<GetUserProjectsMeResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getUserProjectsMeOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getAdaptersOperationSpec: coreClient.OperationSpec = {
  path: "/adapters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AdapterInformationListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  queryParameters: [Parameters.deleted],
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createComponentOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ComponentDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getComponentOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteComponentOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    204: {
      bodyMapper: Mappers.ComponentDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTasksOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTaskListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createComponentTaskOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ComponentTaskDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body1,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getComponentTaskOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{taskId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTaskDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId,
    Parameters.taskId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelComponentTaskOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{taskId}/cancel",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTaskDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId,
    Parameters.taskId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const reRunComponentTaskOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{taskId}/rerun",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.ComponentTaskDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId,
    Parameters.taskId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTemplatesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTemplateListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTemplateOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/templates/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeploymentScopesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createDeploymentScopeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body2,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDeploymentScopeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateDeploymentScopeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body3,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDeploymentScopeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const initializeAuthorizationOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/scopes/{deploymentScopeId}/authorize/initialize",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const negotiateSignalROperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/negotiate",
  httpMethod: "POST",
  responses: { 200: {}, 401: {}, 403: {} },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  serializer
};
const getAuditEntriesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/audit",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommandAuditEntityListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  queryParameters: [Parameters.timeRange, Parameters.commands],
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAuditEntryOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/audit/{commandId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommandAuditEntityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  queryParameters: [Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.commandId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAuditCommandsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/audit/commands",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrganizationOperationSpec: coreClient.OperationSpec = {
  path: "/orgs",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.OrganizationDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOrganizationOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOrganizationOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationUsersOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrganizationUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body5,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOrganizationUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOrganizationUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOrganizationUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    204: {
      bodyMapper: Mappers.UserDataResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationUserMeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/me",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOrganizationUserMeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/me",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body7,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteProjectOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectIdentitiesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/identities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectIdentityListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectIdentityOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/identities",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectIdentityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body8,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectIdentityOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectIdentityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.projectIdentityId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectIdentityOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body9,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.projectIdentityId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectIdentityOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.ProjectIdentityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.projectIdentityId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectTagsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionaryDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectTagOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body10,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateProjectTagOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body10,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectTagByKeyOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionaryDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.tagKey
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteProjectTagOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.tagKey
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectTemplatesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectTemplateOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/templates",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body11,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectTemplateOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectTemplateOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body12,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectTemplateOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectUsersOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body5,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectUserMeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/me",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectUserMeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/me",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getInfoOperationSpec: coreClient.OperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TeamCloudInformationDataResult
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getSchedulesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createScheduleOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body13,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getScheduleOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.scheduleId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateScheduleOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body14,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.scheduleId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const runScheduleOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}/run",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.scheduleId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStatusOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/status/{trackingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    302: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.trackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectStatusOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/status/{trackingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    302: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.trackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getUserProjectsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getUserProjectsMeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/me/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
