/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { TeamCloudContext } from "./teamCloudContext";
import {
  TeamCloudOptionalParams,
  TeamCloudGetAdaptersOptionalParams,
  TeamCloudGetAdaptersResponse,
  TeamCloudGetComponentsOptionalParams,
  TeamCloudGetComponentsResponse,
  TeamCloudCreateComponentOptionalParams,
  TeamCloudCreateComponentResponse,
  TeamCloudGetComponentOptionalParams,
  TeamCloudGetComponentResponse,
  TeamCloudDeleteComponentOptionalParams,
  TeamCloudDeleteComponentResponse,
  TeamCloudGetComponentTasksOptionalParams,
  TeamCloudGetComponentTasksResponse,
  TeamCloudCreateComponentTaskOptionalParams,
  TeamCloudCreateComponentTaskResponse,
  TeamCloudGetComponentTaskOptionalParams,
  TeamCloudGetComponentTaskResponse,
  TeamCloudGetComponentTemplatesOptionalParams,
  TeamCloudGetComponentTemplatesResponse,
  TeamCloudGetComponentTemplateOptionalParams,
  TeamCloudGetComponentTemplateResponse,
  TeamCloudGetDeploymentScopesOptionalParams,
  TeamCloudGetDeploymentScopesResponse,
  TeamCloudCreateDeploymentScopeOptionalParams,
  TeamCloudCreateDeploymentScopeResponse,
  TeamCloudGetDeploymentScopeOptionalParams,
  TeamCloudGetDeploymentScopeResponse,
  TeamCloudUpdateDeploymentScopeOptionalParams,
  TeamCloudUpdateDeploymentScopeResponse,
  TeamCloudDeleteDeploymentScopeOptionalParams,
  TeamCloudDeleteDeploymentScopeResponse,
  TeamCloudAuthorizeDeploymentScopeOptionalParams,
  TeamCloudAuthorizeDeploymentScopeResponse,
  TeamCloudNegotiateSignalROptionalParams,
  TeamCloudGetAuditEntriesOptionalParams,
  TeamCloudGetAuditEntriesResponse,
  TeamCloudGetAuditEntryOptionalParams,
  TeamCloudGetAuditEntryResponse,
  TeamCloudGetAuditCommandsOptionalParams,
  TeamCloudGetAuditCommandsResponse,
  TeamCloudGetOrganizationsOptionalParams,
  TeamCloudGetOrganizationsResponse,
  TeamCloudCreateOrganizationOptionalParams,
  TeamCloudCreateOrganizationResponse,
  TeamCloudGetOrganizationOptionalParams,
  TeamCloudGetOrganizationResponse,
  TeamCloudDeleteOrganizationOptionalParams,
  TeamCloudDeleteOrganizationResponse,
  TeamCloudGetOrganizationUsersOptionalParams,
  TeamCloudGetOrganizationUsersResponse,
  TeamCloudCreateOrganizationUserOptionalParams,
  TeamCloudCreateOrganizationUserResponse,
  TeamCloudGetOrganizationUserOptionalParams,
  TeamCloudGetOrganizationUserResponse,
  TeamCloudUpdateOrganizationUserOptionalParams,
  TeamCloudUpdateOrganizationUserResponse,
  TeamCloudDeleteOrganizationUserOptionalParams,
  TeamCloudDeleteOrganizationUserResponse,
  TeamCloudGetOrganizationUserMeOptionalParams,
  TeamCloudGetOrganizationUserMeResponse,
  TeamCloudUpdateOrganizationUserMeOptionalParams,
  TeamCloudUpdateOrganizationUserMeResponse,
  TeamCloudGetProjectsOptionalParams,
  TeamCloudGetProjectsResponse,
  TeamCloudCreateProjectOptionalParams,
  TeamCloudCreateProjectResponse,
  TeamCloudGetProjectOptionalParams,
  TeamCloudGetProjectResponse,
  TeamCloudDeleteProjectOptionalParams,
  TeamCloudDeleteProjectResponse,
  TeamCloudGetProjectIdentitiesOptionalParams,
  TeamCloudGetProjectIdentitiesResponse,
  TeamCloudCreateProjectIdentityOptionalParams,
  TeamCloudCreateProjectIdentityResponse,
  TeamCloudGetProjectIdentityOptionalParams,
  TeamCloudGetProjectIdentityResponse,
  TeamCloudUpdateProjectIdentityOptionalParams,
  TeamCloudUpdateProjectIdentityResponse,
  TeamCloudDeleteProjectIdentityOptionalParams,
  TeamCloudDeleteProjectIdentityResponse,
  TeamCloudGetProjectTagsOptionalParams,
  TeamCloudGetProjectTagsResponse,
  TeamCloudCreateProjectTagOptionalParams,
  TeamCloudCreateProjectTagResponse,
  TeamCloudUpdateProjectTagOptionalParams,
  TeamCloudUpdateProjectTagResponse,
  TeamCloudGetProjectTagByKeyOptionalParams,
  TeamCloudGetProjectTagByKeyResponse,
  TeamCloudDeleteProjectTagOptionalParams,
  TeamCloudDeleteProjectTagResponse,
  TeamCloudGetProjectTemplatesOptionalParams,
  TeamCloudGetProjectTemplatesResponse,
  TeamCloudCreateProjectTemplateOptionalParams,
  TeamCloudCreateProjectTemplateResponse,
  TeamCloudGetProjectTemplateOptionalParams,
  TeamCloudGetProjectTemplateResponse,
  TeamCloudUpdateProjectTemplateOptionalParams,
  TeamCloudUpdateProjectTemplateResponse,
  TeamCloudDeleteProjectTemplateOptionalParams,
  TeamCloudDeleteProjectTemplateResponse,
  TeamCloudGetProjectUsersOptionalParams,
  TeamCloudGetProjectUsersResponse,
  TeamCloudCreateProjectUserOptionalParams,
  TeamCloudCreateProjectUserResponse,
  TeamCloudGetProjectUserOptionalParams,
  TeamCloudGetProjectUserResponse,
  TeamCloudUpdateProjectUserOptionalParams,
  TeamCloudUpdateProjectUserResponse,
  TeamCloudDeleteProjectUserOptionalParams,
  TeamCloudDeleteProjectUserResponse,
  TeamCloudGetProjectUserMeOptionalParams,
  TeamCloudGetProjectUserMeResponse,
  TeamCloudUpdateProjectUserMeOptionalParams,
  TeamCloudUpdateProjectUserMeResponse,
  TeamCloudGetSchedulesOptionalParams,
  TeamCloudGetSchedulesResponse,
  TeamCloudCreateScheduleOptionalParams,
  TeamCloudCreateScheduleResponse,
  TeamCloudGetScheduleOptionalParams,
  TeamCloudGetScheduleResponse,
  TeamCloudUpdateScheduleOptionalParams,
  TeamCloudUpdateScheduleResponse,
  TeamCloudRunScheduleOptionalParams,
  TeamCloudRunScheduleResponse,
  TeamCloudGetStatusOptionalParams,
  TeamCloudGetStatusResponse,
  TeamCloudGetProjectStatusOptionalParams,
  TeamCloudGetProjectStatusResponse,
  TeamCloudGetUserProjectsOptionalParams,
  TeamCloudGetUserProjectsResponse,
  TeamCloudGetUserProjectsMeOptionalParams,
  TeamCloudGetUserProjectsMeResponse
} from "./models";

export class TeamCloud extends TeamCloudContext {
  /**
   * Initializes a new instance of the TeamCloud class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param $host server parameter
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    $host: string,
    options?: TeamCloudOptionalParams
  ) {
    super(credentials, $host, options);
  }

  /**
   * Gets all Adapters.
   * @param options The options parameters.
   */
  getAdapters(
    options?: TeamCloudGetAdaptersOptionalParams
  ): Promise<TeamCloudGetAdaptersResponse> {
    return this.sendOperationRequest({ options }, getAdaptersOperationSpec);
  }

  /**
   * Gets all Components for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponents(
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetComponentsOptionalParams
  ): Promise<TeamCloudGetComponentsResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getComponentsOperationSpec
    );
  }

  /**
   * Creates a new Project Component.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createComponent(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateComponentOptionalParams
  ): Promise<TeamCloudCreateComponentResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      createComponentOperationSpec
    );
  }

  /**
   * Gets a Project Component.
   * @param componentId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponent(
    componentId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetComponentOptionalParams
  ): Promise<TeamCloudGetComponentResponse> {
    return this.sendOperationRequest(
      { componentId, organizationId, projectId, options },
      getComponentOperationSpec
    );
  }

  /**
   * Deletes an existing Project Component.
   * @param componentId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteComponent(
    componentId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudDeleteComponentOptionalParams
  ): Promise<TeamCloudDeleteComponentResponse> {
    return this.sendOperationRequest(
      { componentId, organizationId, projectId, options },
      deleteComponentOperationSpec
    );
  }

  /**
   * Gets all Component Tasks.
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  getComponentTasks(
    organizationId: string,
    projectId: string,
    componentId: string | null,
    options?: TeamCloudGetComponentTasksOptionalParams
  ): Promise<TeamCloudGetComponentTasksResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, componentId, options },
      getComponentTasksOperationSpec
    );
  }

  /**
   * Creates a new Project Component Task.
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  createComponentTask(
    organizationId: string,
    projectId: string,
    componentId: string | null,
    options?: TeamCloudCreateComponentTaskOptionalParams
  ): Promise<TeamCloudCreateComponentTaskResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, componentId, options },
      createComponentTaskOperationSpec
    );
  }

  /**
   * Gets the Component Task.
   * @param id
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  getComponentTask(
    id: string | null,
    organizationId: string,
    projectId: string,
    componentId: string | null,
    options?: TeamCloudGetComponentTaskOptionalParams
  ): Promise<TeamCloudGetComponentTaskResponse> {
    return this.sendOperationRequest(
      { id, organizationId, projectId, componentId, options },
      getComponentTaskOperationSpec
    );
  }

  /**
   * Gets all Component Templates for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponentTemplates(
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetComponentTemplatesOptionalParams
  ): Promise<TeamCloudGetComponentTemplatesResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getComponentTemplatesOperationSpec
    );
  }

  /**
   * Gets the Component Template.
   * @param id
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponentTemplate(
    id: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetComponentTemplateOptionalParams
  ): Promise<TeamCloudGetComponentTemplateResponse> {
    return this.sendOperationRequest(
      { id, organizationId, projectId, options },
      getComponentTemplateOperationSpec
    );
  }

  /**
   * Gets all Deployment Scopes.
   * @param organizationId
   * @param options The options parameters.
   */
  getDeploymentScopes(
    organizationId: string,
    options?: TeamCloudGetDeploymentScopesOptionalParams
  ): Promise<TeamCloudGetDeploymentScopesResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getDeploymentScopesOperationSpec
    );
  }

  /**
   * Creates a new Deployment Scope.
   * @param organizationId
   * @param options The options parameters.
   */
  createDeploymentScope(
    organizationId: string,
    options?: TeamCloudCreateDeploymentScopeOptionalParams
  ): Promise<TeamCloudCreateDeploymentScopeResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      createDeploymentScopeOperationSpec
    );
  }

  /**
   * Gets a Deployment Scope.
   * @param deploymentScopeId
   * @param organizationId
   * @param options The options parameters.
   */
  getDeploymentScope(
    deploymentScopeId: string | null,
    organizationId: string,
    options?: TeamCloudGetDeploymentScopeOptionalParams
  ): Promise<TeamCloudGetDeploymentScopeResponse> {
    return this.sendOperationRequest(
      { deploymentScopeId, organizationId, options },
      getDeploymentScopeOperationSpec
    );
  }

  /**
   * Updates an existing Deployment Scope.
   * @param deploymentScopeId
   * @param organizationId
   * @param options The options parameters.
   */
  updateDeploymentScope(
    deploymentScopeId: string | null,
    organizationId: string,
    options?: TeamCloudUpdateDeploymentScopeOptionalParams
  ): Promise<TeamCloudUpdateDeploymentScopeResponse> {
    return this.sendOperationRequest(
      { deploymentScopeId, organizationId, options },
      updateDeploymentScopeOperationSpec
    );
  }

  /**
   * Deletes a Deployment Scope.
   * @param deploymentScopeId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteDeploymentScope(
    deploymentScopeId: string | null,
    organizationId: string,
    options?: TeamCloudDeleteDeploymentScopeOptionalParams
  ): Promise<TeamCloudDeleteDeploymentScopeResponse> {
    return this.sendOperationRequest(
      { deploymentScopeId, organizationId, options },
      deleteDeploymentScopeOperationSpec
    );
  }

  /**
   * Authorize an existing Deployment Scope.
   * @param deploymentScopeId
   * @param organizationId
   * @param options The options parameters.
   */
  authorizeDeploymentScope(
    deploymentScopeId: string | null,
    organizationId: string,
    options?: TeamCloudAuthorizeDeploymentScopeOptionalParams
  ): Promise<TeamCloudAuthorizeDeploymentScopeResponse> {
    return this.sendOperationRequest(
      { deploymentScopeId, organizationId, options },
      authorizeDeploymentScopeOperationSpec
    );
  }

  /**
   * Negotiates the SignalR connection.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  negotiateSignalR(
    organizationId: string,
    projectId: string,
    options?: TeamCloudNegotiateSignalROptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      negotiateSignalROperationSpec
    );
  }

  /**
   * Gets all audit entries.
   * @param organizationId
   * @param options The options parameters.
   */
  getAuditEntries(
    organizationId: string,
    options?: TeamCloudGetAuditEntriesOptionalParams
  ): Promise<TeamCloudGetAuditEntriesResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getAuditEntriesOperationSpec
    );
  }

  /**
   * Gets an audit entry.
   * @param commandId
   * @param organizationId
   * @param options The options parameters.
   */
  getAuditEntry(
    commandId: string,
    organizationId: string,
    options?: TeamCloudGetAuditEntryOptionalParams
  ): Promise<TeamCloudGetAuditEntryResponse> {
    return this.sendOperationRequest(
      { commandId, organizationId, options },
      getAuditEntryOperationSpec
    );
  }

  /**
   * Gets all auditable commands.
   * @param organizationId
   * @param options The options parameters.
   */
  getAuditCommands(
    organizationId: string,
    options?: TeamCloudGetAuditCommandsOptionalParams
  ): Promise<TeamCloudGetAuditCommandsResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getAuditCommandsOperationSpec
    );
  }

  /**
   * Gets all Organizations.
   * @param options The options parameters.
   */
  getOrganizations(
    options?: TeamCloudGetOrganizationsOptionalParams
  ): Promise<TeamCloudGetOrganizationsResponse> {
    return this.sendOperationRequest(
      { options },
      getOrganizationsOperationSpec
    );
  }

  /**
   * Creates a new Organization.
   * @param options The options parameters.
   */
  createOrganization(
    options?: TeamCloudCreateOrganizationOptionalParams
  ): Promise<TeamCloudCreateOrganizationResponse> {
    return this.sendOperationRequest(
      { options },
      createOrganizationOperationSpec
    );
  }

  /**
   * Gets an Organization.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganization(
    organizationId: string,
    options?: TeamCloudGetOrganizationOptionalParams
  ): Promise<TeamCloudGetOrganizationResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getOrganizationOperationSpec
    );
  }

  /**
   * Deletes an existing Organization.
   * @param organizationId
   * @param options The options parameters.
   */
  deleteOrganization(
    organizationId: string,
    options?: TeamCloudDeleteOrganizationOptionalParams
  ): Promise<TeamCloudDeleteOrganizationResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      deleteOrganizationOperationSpec
    );
  }

  /**
   * Gets all Users.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUsers(
    organizationId: string,
    options?: TeamCloudGetOrganizationUsersOptionalParams
  ): Promise<TeamCloudGetOrganizationUsersResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getOrganizationUsersOperationSpec
    );
  }

  /**
   * Creates a new User.
   * @param organizationId
   * @param options The options parameters.
   */
  createOrganizationUser(
    organizationId: string,
    options?: TeamCloudCreateOrganizationUserOptionalParams
  ): Promise<TeamCloudCreateOrganizationUserResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      createOrganizationUserOperationSpec
    );
  }

  /**
   * Gets a User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUser(
    userId: string | null,
    organizationId: string,
    options?: TeamCloudGetOrganizationUserOptionalParams
  ): Promise<TeamCloudGetOrganizationUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, options },
      getOrganizationUserOperationSpec
    );
  }

  /**
   * Updates an existing User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  updateOrganizationUser(
    userId: string | null,
    organizationId: string,
    options?: TeamCloudUpdateOrganizationUserOptionalParams
  ): Promise<TeamCloudUpdateOrganizationUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, options },
      updateOrganizationUserOperationSpec
    );
  }

  /**
   * Deletes an existing User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteOrganizationUser(
    userId: string | null,
    organizationId: string,
    options?: TeamCloudDeleteOrganizationUserOptionalParams
  ): Promise<TeamCloudDeleteOrganizationUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, options },
      deleteOrganizationUserOperationSpec
    );
  }

  /**
   * Gets a User A User matching the current authenticated user.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUserMe(
    organizationId: string,
    options?: TeamCloudGetOrganizationUserMeOptionalParams
  ): Promise<TeamCloudGetOrganizationUserMeResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getOrganizationUserMeOperationSpec
    );
  }

  /**
   * Updates an existing User.
   * @param organizationId
   * @param options The options parameters.
   */
  updateOrganizationUserMe(
    organizationId: string,
    options?: TeamCloudUpdateOrganizationUserMeOptionalParams
  ): Promise<TeamCloudUpdateOrganizationUserMeResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      updateOrganizationUserMeOperationSpec
    );
  }

  /**
   * Gets all Projects.
   * @param organizationId
   * @param options The options parameters.
   */
  getProjects(
    organizationId: string,
    options?: TeamCloudGetProjectsOptionalParams
  ): Promise<TeamCloudGetProjectsResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getProjectsOperationSpec
    );
  }

  /**
   * Creates a new Project.
   * @param organizationId
   * @param options The options parameters.
   */
  createProject(
    organizationId: string,
    options?: TeamCloudCreateProjectOptionalParams
  ): Promise<TeamCloudCreateProjectResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      createProjectOperationSpec
    );
  }

  /**
   * Gets a Project.
   * @param projectId
   * @param organizationId
   * @param options The options parameters.
   */
  getProject(
    projectId: string,
    organizationId: string,
    options?: TeamCloudGetProjectOptionalParams
  ): Promise<TeamCloudGetProjectResponse> {
    return this.sendOperationRequest(
      { projectId, organizationId, options },
      getProjectOperationSpec
    );
  }

  /**
   * Deletes a Project.
   * @param projectId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteProject(
    projectId: string,
    organizationId: string,
    options?: TeamCloudDeleteProjectOptionalParams
  ): Promise<TeamCloudDeleteProjectResponse> {
    return this.sendOperationRequest(
      { projectId, organizationId, options },
      deleteProjectOperationSpec
    );
  }

  /**
   * Gets all Project Identities.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectIdentities(
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetProjectIdentitiesOptionalParams
  ): Promise<TeamCloudGetProjectIdentitiesResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getProjectIdentitiesOperationSpec
    );
  }

  /**
   * Creates a new Project Identity.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectIdentity(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateProjectIdentityOptionalParams
  ): Promise<TeamCloudCreateProjectIdentityResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      createProjectIdentityOperationSpec
    );
  }

  /**
   * Gets a Project Identity.
   * @param projectIdentityId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectIdentity(
    projectIdentityId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetProjectIdentityOptionalParams
  ): Promise<TeamCloudGetProjectIdentityResponse> {
    return this.sendOperationRequest(
      { projectIdentityId, organizationId, projectId, options },
      getProjectIdentityOperationSpec
    );
  }

  /**
   * Updates an existing Project Identity.
   * @param projectIdentityId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectIdentity(
    projectIdentityId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectIdentityOptionalParams
  ): Promise<TeamCloudUpdateProjectIdentityResponse> {
    return this.sendOperationRequest(
      { projectIdentityId, organizationId, projectId, options },
      updateProjectIdentityOperationSpec
    );
  }

  /**
   * Deletes a Project Identity.
   * @param projectIdentityId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectIdentity(
    projectIdentityId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudDeleteProjectIdentityOptionalParams
  ): Promise<TeamCloudDeleteProjectIdentityResponse> {
    return this.sendOperationRequest(
      { projectIdentityId, organizationId, projectId, options },
      deleteProjectIdentityOperationSpec
    );
  }

  /**
   * Gets all Tags for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectTags(
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetProjectTagsOptionalParams
  ): Promise<TeamCloudGetProjectTagsResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getProjectTagsOperationSpec
    );
  }

  /**
   * Creates a new Project Tag.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectTag(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateProjectTagOptionalParams
  ): Promise<TeamCloudCreateProjectTagResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      createProjectTagOperationSpec
    );
  }

  /**
   * Updates an existing Project Tag.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectTag(
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectTagOptionalParams
  ): Promise<TeamCloudUpdateProjectTagResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      updateProjectTagOperationSpec
    );
  }

  /**
   * Gets a Project Tag by Key.
   * @param tagKey
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectTagByKey(
    tagKey: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetProjectTagByKeyOptionalParams
  ): Promise<TeamCloudGetProjectTagByKeyResponse> {
    return this.sendOperationRequest(
      { tagKey, organizationId, projectId, options },
      getProjectTagByKeyOperationSpec
    );
  }

  /**
   * Deletes an existing Project Tag.
   * @param tagKey
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectTag(
    tagKey: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudDeleteProjectTagOptionalParams
  ): Promise<TeamCloudDeleteProjectTagResponse> {
    return this.sendOperationRequest(
      { tagKey, organizationId, projectId, options },
      deleteProjectTagOperationSpec
    );
  }

  /**
   * Gets all Project Templates.
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectTemplates(
    organizationId: string,
    options?: TeamCloudGetProjectTemplatesOptionalParams
  ): Promise<TeamCloudGetProjectTemplatesResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getProjectTemplatesOperationSpec
    );
  }

  /**
   * Creates a new Project Template.
   * @param organizationId
   * @param options The options parameters.
   */
  createProjectTemplate(
    organizationId: string,
    options?: TeamCloudCreateProjectTemplateOptionalParams
  ): Promise<TeamCloudCreateProjectTemplateResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      createProjectTemplateOperationSpec
    );
  }

  /**
   * Gets a Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectTemplate(
    projectTemplateId: string | null,
    organizationId: string,
    options?: TeamCloudGetProjectTemplateOptionalParams
  ): Promise<TeamCloudGetProjectTemplateResponse> {
    return this.sendOperationRequest(
      { projectTemplateId, organizationId, options },
      getProjectTemplateOperationSpec
    );
  }

  /**
   * Updates an existing Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  updateProjectTemplate(
    projectTemplateId: string | null,
    organizationId: string,
    options?: TeamCloudUpdateProjectTemplateOptionalParams
  ): Promise<TeamCloudUpdateProjectTemplateResponse> {
    return this.sendOperationRequest(
      { projectTemplateId, organizationId, options },
      updateProjectTemplateOperationSpec
    );
  }

  /**
   * Deletes a Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteProjectTemplate(
    projectTemplateId: string | null,
    organizationId: string,
    options?: TeamCloudDeleteProjectTemplateOptionalParams
  ): Promise<TeamCloudDeleteProjectTemplateResponse> {
    return this.sendOperationRequest(
      { projectTemplateId, organizationId, options },
      deleteProjectTemplateOperationSpec
    );
  }

  /**
   * Gets all Users for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUsers(
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetProjectUsersOptionalParams
  ): Promise<TeamCloudGetProjectUsersResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getProjectUsersOperationSpec
    );
  }

  /**
   * Creates a new Project User
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectUser(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateProjectUserOptionalParams
  ): Promise<TeamCloudCreateProjectUserResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      createProjectUserOperationSpec
    );
  }

  /**
   * Gets a Project User by ID or email address.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUser(
    userId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetProjectUserOptionalParams
  ): Promise<TeamCloudGetProjectUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, projectId, options },
      getProjectUserOperationSpec
    );
  }

  /**
   * Updates an existing Project User.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectUser(
    userId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectUserOptionalParams
  ): Promise<TeamCloudUpdateProjectUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, projectId, options },
      updateProjectUserOperationSpec
    );
  }

  /**
   * Deletes an existing Project User.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectUser(
    userId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudDeleteProjectUserOptionalParams
  ): Promise<TeamCloudDeleteProjectUserResponse> {
    return this.sendOperationRequest(
      { userId, organizationId, projectId, options },
      deleteProjectUserOperationSpec
    );
  }

  /**
   * Gets a Project User for the calling user.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUserMe(
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetProjectUserMeOptionalParams
  ): Promise<TeamCloudGetProjectUserMeResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getProjectUserMeOperationSpec
    );
  }

  /**
   * Updates an existing Project User.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectUserMe(
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectUserMeOptionalParams
  ): Promise<TeamCloudUpdateProjectUserMeResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      updateProjectUserMeOperationSpec
    );
  }

  /**
   * Gets all Schedule.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getSchedules(
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetSchedulesOptionalParams
  ): Promise<TeamCloudGetSchedulesResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      getSchedulesOperationSpec
    );
  }

  /**
   * Creates a new Project Schedule.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createSchedule(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateScheduleOptionalParams
  ): Promise<TeamCloudCreateScheduleResponse> {
    return this.sendOperationRequest(
      { organizationId, projectId, options },
      createScheduleOperationSpec
    );
  }

  /**
   * Gets the Schedule.
   * @param scheduleId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getSchedule(
    scheduleId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetScheduleOptionalParams
  ): Promise<TeamCloudGetScheduleResponse> {
    return this.sendOperationRequest(
      { scheduleId, organizationId, projectId, options },
      getScheduleOperationSpec
    );
  }

  /**
   * Updates a Project Schedule.
   * @param scheduleId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateSchedule(
    scheduleId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateScheduleOptionalParams
  ): Promise<TeamCloudUpdateScheduleResponse> {
    return this.sendOperationRequest(
      { scheduleId, organizationId, projectId, options },
      updateScheduleOperationSpec
    );
  }

  /**
   * Runs a Project Schedule.
   * @param scheduleId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  runSchedule(
    scheduleId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudRunScheduleOptionalParams
  ): Promise<TeamCloudRunScheduleResponse> {
    return this.sendOperationRequest(
      { scheduleId, organizationId, projectId, options },
      runScheduleOperationSpec
    );
  }

  /**
   * Gets the status of a long-running operation.
   * @param trackingId
   * @param organizationId
   * @param options The options parameters.
   */
  getStatus(
    trackingId: string,
    organizationId: string,
    options?: TeamCloudGetStatusOptionalParams
  ): Promise<TeamCloudGetStatusResponse> {
    return this.sendOperationRequest(
      { trackingId, organizationId, options },
      getStatusOperationSpec
    );
  }

  /**
   * Gets the status of a long-running operation.
   * @param projectId
   * @param trackingId
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectStatus(
    projectId: string,
    trackingId: string,
    organizationId: string,
    options?: TeamCloudGetProjectStatusOptionalParams
  ): Promise<TeamCloudGetProjectStatusResponse> {
    return this.sendOperationRequest(
      { projectId, trackingId, organizationId, options },
      getProjectStatusOperationSpec
    );
  }

  /**
   * Gets all Projects for a User.
   * @param organizationId
   * @param userId
   * @param options The options parameters.
   */
  getUserProjects(
    organizationId: string,
    userId: string | null,
    options?: TeamCloudGetUserProjectsOptionalParams
  ): Promise<TeamCloudGetUserProjectsResponse> {
    return this.sendOperationRequest(
      { organizationId, userId, options },
      getUserProjectsOperationSpec
    );
  }

  /**
   * Gets all Projects for a User.
   * @param organizationId
   * @param options The options parameters.
   */
  getUserProjectsMe(
    organizationId: string,
    options?: TeamCloudGetUserProjectsMeOptionalParams
  ): Promise<TeamCloudGetUserProjectsMeResponse> {
    return this.sendOperationRequest(
      { organizationId, options },
      getUserProjectsMeOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getAdaptersOperationSpec: coreClient.OperationSpec = {
  path: "/adapters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AdapterInformationListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  queryParameters: [Parameters.deleted],
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createComponentOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ComponentDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getComponentOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteComponentOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    204: {
      bodyMapper: Mappers.ComponentDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTasksOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTaskListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createComponentTaskOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ComponentTaskDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body1,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getComponentTaskOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTaskDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTemplatesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTemplateListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTemplateOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/templates/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeploymentScopesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createDeploymentScopeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body2,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDeploymentScopeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateDeploymentScopeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body3,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDeploymentScopeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const authorizeDeploymentScopeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}/authorize",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body3,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const negotiateSignalROperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/negotiate",
  httpMethod: "POST",
  responses: { 200: {}, 401: {}, 403: {} },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  serializer
};
const getAuditEntriesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/audit",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommandAuditEntityListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  queryParameters: [Parameters.timeRange, Parameters.commands],
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAuditEntryOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/audit/{commandId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommandAuditEntityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  queryParameters: [Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.commandId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAuditCommandsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/audit/commands",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrganizationOperationSpec: coreClient.OperationSpec = {
  path: "/orgs",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.OrganizationDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOrganizationOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOrganizationOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationUsersOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrganizationUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body5,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOrganizationUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOrganizationUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOrganizationUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    204: {
      bodyMapper: Mappers.UserDataResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationUserMeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/me",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOrganizationUserMeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/me",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body7,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteProjectOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectIdentitiesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/identities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectIdentityListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectIdentityOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/identities",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectIdentityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body8,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectIdentityOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectIdentityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.projectIdentityId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectIdentityOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body9,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.projectIdentityId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectIdentityOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.ProjectIdentityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.projectIdentityId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectTagsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionaryDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectTagOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body10,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateProjectTagOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body10,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectTagByKeyOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionaryDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.tagKey
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteProjectTagOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.tagKey
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectTemplatesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectTemplateOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/templates",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body11,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectTemplateOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectTemplateOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body12,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectTemplateOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectUsersOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body5,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectUserOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectUserMeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/me",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectUserMeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/me",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getSchedulesOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createScheduleOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body13,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getScheduleOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.scheduleId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateScheduleOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body14,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.scheduleId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const runScheduleOperationSpec: coreClient.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}/run",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.scheduleId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStatusOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/status/{trackingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    302: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.trackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectStatusOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/status/{trackingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    302: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.trackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getUserProjectsOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getUserProjectsMeOperationSpec: coreClient.OperationSpec = {
  path: "/orgs/{organizationId}/me/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
