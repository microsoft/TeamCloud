/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { TeamCloudContext } from "./teamCloudContext";
export class TeamCloud extends TeamCloudContext {
    /**
     * Initializes a new instance of the TeamCloud class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param $host server parameter
     * @param options The parameter options
     */
    constructor(credentials, $host, options) {
        super(credentials, $host, options);
    }
    /**
     * Gets all Adapters.
     * @param options The options parameters.
     */
    getAdapters(options) {
        return this.sendOperationRequest({ options }, getAdaptersOperationSpec);
    }
    /**
     * Gets all Components for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getComponents(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getComponentsOperationSpec);
    }
    /**
     * Creates a new Project Component.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    createComponent(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, createComponentOperationSpec);
    }
    /**
     * Gets a Project Component.
     * @param componentId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getComponent(componentId, organizationId, projectId, options) {
        return this.sendOperationRequest({ componentId, organizationId, projectId, options }, getComponentOperationSpec);
    }
    /**
     * Deletes an existing Project Component.
     * @param componentId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    deleteComponent(componentId, organizationId, projectId, options) {
        return this.sendOperationRequest({ componentId, organizationId, projectId, options }, deleteComponentOperationSpec);
    }
    /**
     * Gets all Component Tasks.
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param options The options parameters.
     */
    getComponentTasks(organizationId, projectId, componentId, options) {
        return this.sendOperationRequest({ organizationId, projectId, componentId, options }, getComponentTasksOperationSpec);
    }
    /**
     * Creates a new Project Component Task.
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param options The options parameters.
     */
    createComponentTask(organizationId, projectId, componentId, options) {
        return this.sendOperationRequest({ organizationId, projectId, componentId, options }, createComponentTaskOperationSpec);
    }
    /**
     * Gets the Component Task.
     * @param taskId
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param options The options parameters.
     */
    getComponentTask(taskId, organizationId, projectId, componentId, options) {
        return this.sendOperationRequest({ taskId, organizationId, projectId, componentId, options }, getComponentTaskOperationSpec);
    }
    /**
     * Rerun a Project Component Task.
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param taskId
     * @param options The options parameters.
     */
    cancelComponentTask(organizationId, projectId, componentId, taskId, options) {
        return this.sendOperationRequest({ organizationId, projectId, componentId, taskId, options }, cancelComponentTaskOperationSpec);
    }
    /**
     * Cancel an active Project Component Task.
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param taskId
     * @param options The options parameters.
     */
    reRunComponentTask(organizationId, projectId, componentId, taskId, options) {
        return this.sendOperationRequest({ organizationId, projectId, componentId, taskId, options }, reRunComponentTaskOperationSpec);
    }
    /**
     * Gets all Component Templates for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getComponentTemplates(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getComponentTemplatesOperationSpec);
    }
    /**
     * Gets the Component Template.
     * @param id
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getComponentTemplate(id, organizationId, projectId, options) {
        return this.sendOperationRequest({ id, organizationId, projectId, options }, getComponentTemplateOperationSpec);
    }
    /**
     * Gets all Deployment Scopes.
     * @param organizationId
     * @param options The options parameters.
     */
    getDeploymentScopes(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getDeploymentScopesOperationSpec);
    }
    /**
     * Creates a new Deployment Scope.
     * @param organizationId
     * @param options The options parameters.
     */
    createDeploymentScope(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, createDeploymentScopeOperationSpec);
    }
    /**
     * Gets a Deployment Scope.
     * @param organizationId
     * @param deploymentScopeId
     * @param options The options parameters.
     */
    getDeploymentScope(organizationId, deploymentScopeId, options) {
        return this.sendOperationRequest({ organizationId, deploymentScopeId, options }, getDeploymentScopeOperationSpec);
    }
    /**
     * Updates an existing Deployment Scope.
     * @param organizationId
     * @param deploymentScopeId
     * @param options The options parameters.
     */
    updateDeploymentScope(organizationId, deploymentScopeId, options) {
        return this.sendOperationRequest({ organizationId, deploymentScopeId, options }, updateDeploymentScopeOperationSpec);
    }
    /**
     * Deletes a Deployment Scope.
     * @param organizationId
     * @param deploymentScopeId
     * @param options The options parameters.
     */
    deleteDeploymentScope(organizationId, deploymentScopeId, options) {
        return this.sendOperationRequest({ organizationId, deploymentScopeId, options }, deleteDeploymentScopeOperationSpec);
    }
    /**
     * Initialize a new authorization session for a deployment scope.
     * @param organizationId
     * @param deploymentScopeId
     * @param options The options parameters.
     */
    initializeAuthorization(organizationId, deploymentScopeId, options) {
        return this.sendOperationRequest({ organizationId, deploymentScopeId, options }, initializeAuthorizationOperationSpec);
    }
    /**
     * Negotiates the SignalR connection.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    negotiateSignalR(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, negotiateSignalROperationSpec);
    }
    /**
     * Gets all audit entries.
     * @param organizationId
     * @param options The options parameters.
     */
    getAuditEntries(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getAuditEntriesOperationSpec);
    }
    /**
     * Gets an audit entry.
     * @param commandId
     * @param organizationId
     * @param options The options parameters.
     */
    getAuditEntry(commandId, organizationId, options) {
        return this.sendOperationRequest({ commandId, organizationId, options }, getAuditEntryOperationSpec);
    }
    /**
     * Gets all auditable commands.
     * @param organizationId
     * @param options The options parameters.
     */
    getAuditCommands(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getAuditCommandsOperationSpec);
    }
    /**
     * Gets all Organizations.
     * @param options The options parameters.
     */
    getOrganizations(options) {
        return this.sendOperationRequest({ options }, getOrganizationsOperationSpec);
    }
    /**
     * Creates a new Organization.
     * @param options The options parameters.
     */
    createOrganization(options) {
        return this.sendOperationRequest({ options }, createOrganizationOperationSpec);
    }
    /**
     * Gets an Organization.
     * @param organizationId
     * @param options The options parameters.
     */
    getOrganization(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getOrganizationOperationSpec);
    }
    /**
     * Deletes an existing Organization.
     * @param organizationId
     * @param options The options parameters.
     */
    deleteOrganization(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, deleteOrganizationOperationSpec);
    }
    /**
     * Gets all Users.
     * @param organizationId
     * @param options The options parameters.
     */
    getOrganizationUsers(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getOrganizationUsersOperationSpec);
    }
    /**
     * Creates a new User.
     * @param organizationId
     * @param options The options parameters.
     */
    createOrganizationUser(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, createOrganizationUserOperationSpec);
    }
    /**
     * Gets a User.
     * @param userId
     * @param organizationId
     * @param options The options parameters.
     */
    getOrganizationUser(userId, organizationId, options) {
        return this.sendOperationRequest({ userId, organizationId, options }, getOrganizationUserOperationSpec);
    }
    /**
     * Updates an existing User.
     * @param userId
     * @param organizationId
     * @param options The options parameters.
     */
    updateOrganizationUser(userId, organizationId, options) {
        return this.sendOperationRequest({ userId, organizationId, options }, updateOrganizationUserOperationSpec);
    }
    /**
     * Deletes an existing User.
     * @param userId
     * @param organizationId
     * @param options The options parameters.
     */
    deleteOrganizationUser(userId, organizationId, options) {
        return this.sendOperationRequest({ userId, organizationId, options }, deleteOrganizationUserOperationSpec);
    }
    /**
     * Gets a User A User matching the current authenticated user.
     * @param organizationId
     * @param options The options parameters.
     */
    getOrganizationUserMe(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getOrganizationUserMeOperationSpec);
    }
    /**
     * Updates an existing User.
     * @param organizationId
     * @param options The options parameters.
     */
    updateOrganizationUserMe(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, updateOrganizationUserMeOperationSpec);
    }
    /**
     * Gets all Projects.
     * @param organizationId
     * @param options The options parameters.
     */
    getProjects(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getProjectsOperationSpec);
    }
    /**
     * Creates a new Project.
     * @param organizationId
     * @param options The options parameters.
     */
    createProject(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, createProjectOperationSpec);
    }
    /**
     * Gets a Project.
     * @param projectId
     * @param organizationId
     * @param options The options parameters.
     */
    getProject(projectId, organizationId, options) {
        return this.sendOperationRequest({ projectId, organizationId, options }, getProjectOperationSpec);
    }
    /**
     * Deletes a Project.
     * @param projectId
     * @param organizationId
     * @param options The options parameters.
     */
    deleteProject(projectId, organizationId, options) {
        return this.sendOperationRequest({ projectId, organizationId, options }, deleteProjectOperationSpec);
    }
    /**
     * Gets all Project Identities.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectIdentities(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getProjectIdentitiesOperationSpec);
    }
    /**
     * Creates a new Project Identity.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    createProjectIdentity(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, createProjectIdentityOperationSpec);
    }
    /**
     * Gets a Project Identity.
     * @param projectIdentityId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectIdentity(projectIdentityId, organizationId, projectId, options) {
        return this.sendOperationRequest({ projectIdentityId, organizationId, projectId, options }, getProjectIdentityOperationSpec);
    }
    /**
     * Updates an existing Project Identity.
     * @param projectIdentityId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    updateProjectIdentity(projectIdentityId, organizationId, projectId, options) {
        return this.sendOperationRequest({ projectIdentityId, organizationId, projectId, options }, updateProjectIdentityOperationSpec);
    }
    /**
     * Deletes a Project Identity.
     * @param projectIdentityId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    deleteProjectIdentity(projectIdentityId, organizationId, projectId, options) {
        return this.sendOperationRequest({ projectIdentityId, organizationId, projectId, options }, deleteProjectIdentityOperationSpec);
    }
    /**
     * Gets all Tags for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectTags(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getProjectTagsOperationSpec);
    }
    /**
     * Creates a new Project Tag.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    createProjectTag(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, createProjectTagOperationSpec);
    }
    /**
     * Updates an existing Project Tag.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    updateProjectTag(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, updateProjectTagOperationSpec);
    }
    /**
     * Gets a Project Tag by Key.
     * @param tagKey
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectTagByKey(tagKey, organizationId, projectId, options) {
        return this.sendOperationRequest({ tagKey, organizationId, projectId, options }, getProjectTagByKeyOperationSpec);
    }
    /**
     * Deletes an existing Project Tag.
     * @param tagKey
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    deleteProjectTag(tagKey, organizationId, projectId, options) {
        return this.sendOperationRequest({ tagKey, organizationId, projectId, options }, deleteProjectTagOperationSpec);
    }
    /**
     * Gets all Project Templates.
     * @param organizationId
     * @param options The options parameters.
     */
    getProjectTemplates(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getProjectTemplatesOperationSpec);
    }
    /**
     * Creates a new Project Template.
     * @param organizationId
     * @param options The options parameters.
     */
    createProjectTemplate(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, createProjectTemplateOperationSpec);
    }
    /**
     * Gets a Project Template.
     * @param projectTemplateId
     * @param organizationId
     * @param options The options parameters.
     */
    getProjectTemplate(projectTemplateId, organizationId, options) {
        return this.sendOperationRequest({ projectTemplateId, organizationId, options }, getProjectTemplateOperationSpec);
    }
    /**
     * Updates an existing Project Template.
     * @param projectTemplateId
     * @param organizationId
     * @param options The options parameters.
     */
    updateProjectTemplate(projectTemplateId, organizationId, options) {
        return this.sendOperationRequest({ projectTemplateId, organizationId, options }, updateProjectTemplateOperationSpec);
    }
    /**
     * Deletes a Project Template.
     * @param projectTemplateId
     * @param organizationId
     * @param options The options parameters.
     */
    deleteProjectTemplate(projectTemplateId, organizationId, options) {
        return this.sendOperationRequest({ projectTemplateId, organizationId, options }, deleteProjectTemplateOperationSpec);
    }
    /**
     * Gets all Users for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectUsers(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getProjectUsersOperationSpec);
    }
    /**
     * Creates a new Project User
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    createProjectUser(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, createProjectUserOperationSpec);
    }
    /**
     * Gets a Project User by ID or email address.
     * @param userId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectUser(userId, organizationId, projectId, options) {
        return this.sendOperationRequest({ userId, organizationId, projectId, options }, getProjectUserOperationSpec);
    }
    /**
     * Updates an existing Project User.
     * @param userId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    updateProjectUser(userId, organizationId, projectId, options) {
        return this.sendOperationRequest({ userId, organizationId, projectId, options }, updateProjectUserOperationSpec);
    }
    /**
     * Deletes an existing Project User.
     * @param userId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    deleteProjectUser(userId, organizationId, projectId, options) {
        return this.sendOperationRequest({ userId, organizationId, projectId, options }, deleteProjectUserOperationSpec);
    }
    /**
     * Gets a Project User for the calling user.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectUserMe(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getProjectUserMeOperationSpec);
    }
    /**
     * Updates an existing Project User.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    updateProjectUserMe(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, updateProjectUserMeOperationSpec);
    }
    /**
     * Gets information about this TeamCloud deployment.
     * @param options The options parameters.
     */
    getInfo(options) {
        return this.sendOperationRequest({ options }, getInfoOperationSpec);
    }
    /**
     * Gets all Schedule.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getSchedules(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getSchedulesOperationSpec);
    }
    /**
     * Creates a new Project Schedule.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    createSchedule(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, createScheduleOperationSpec);
    }
    /**
     * Gets the Schedule.
     * @param scheduleId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getSchedule(scheduleId, organizationId, projectId, options) {
        return this.sendOperationRequest({ scheduleId, organizationId, projectId, options }, getScheduleOperationSpec);
    }
    /**
     * Updates a Project Schedule.
     * @param scheduleId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    updateSchedule(scheduleId, organizationId, projectId, options) {
        return this.sendOperationRequest({ scheduleId, organizationId, projectId, options }, updateScheduleOperationSpec);
    }
    /**
     * Runs a Project Schedule.
     * @param scheduleId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    runSchedule(scheduleId, organizationId, projectId, options) {
        return this.sendOperationRequest({ scheduleId, organizationId, projectId, options }, runScheduleOperationSpec);
    }
    /**
     * Gets the status of a long-running operation.
     * @param trackingId
     * @param organizationId
     * @param options The options parameters.
     */
    getStatus(trackingId, organizationId, options) {
        return this.sendOperationRequest({ trackingId, organizationId, options }, getStatusOperationSpec);
    }
    /**
     * Gets the status of a long-running operation.
     * @param projectId
     * @param trackingId
     * @param organizationId
     * @param options The options parameters.
     */
    getProjectStatus(projectId, trackingId, organizationId, options) {
        return this.sendOperationRequest({ projectId, trackingId, organizationId, options }, getProjectStatusOperationSpec);
    }
    /**
     * Gets all Projects for a User.
     * @param organizationId
     * @param userId
     * @param options The options parameters.
     */
    getUserProjects(organizationId, userId, options) {
        return this.sendOperationRequest({ organizationId, userId, options }, getUserProjectsOperationSpec);
    }
    /**
     * Gets all Projects for a User.
     * @param organizationId
     * @param options The options parameters.
     */
    getUserProjectsMe(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getUserProjectsMeOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getAdaptersOperationSpec = {
    path: "/adapters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AdapterInformationListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const getComponentsOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    queryParameters: [Parameters.deleted],
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createComponentOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.ComponentDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getComponentOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.componentId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteComponentOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        204: {
            bodyMapper: Mappers.ComponentDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.componentId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getComponentTasksOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentTaskListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.componentId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createComponentTaskOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.ComponentTaskDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body1,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.componentId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getComponentTaskOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{taskId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentTaskDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.componentId,
        Parameters.taskId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const cancelComponentTaskOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{taskId}/cancel",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentTaskDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.componentId,
        Parameters.taskId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const reRunComponentTaskOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{taskId}/rerun",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: Mappers.ComponentTaskDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.componentId,
        Parameters.taskId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getComponentTemplatesOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/templates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentTemplateListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getComponentTemplateOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/templates/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentTemplateDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.id
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDeploymentScopesOperationSpec = {
    path: "/orgs/{organizationId}/scopes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentScopeListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer
};
const createDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.DeploymentScopeDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body2,
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentScopeDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.deploymentScopeId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentScopeDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body3,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.deploymentScopeId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
    httpMethod: "DELETE",
    responses: {
        204: {
            bodyMapper: Mappers.DeploymentScopeDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.deploymentScopeId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const initializeAuthorizationOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{deploymentScopeId}/authorize/initialize",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentScopeDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.deploymentScopeId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const negotiateSignalROperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/negotiate",
    httpMethod: "POST",
    responses: { 200: {}, 401: {}, 403: {} },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    serializer
};
const getAuditEntriesOperationSpec = {
    path: "/orgs/{organizationId}/audit",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CommandAuditEntityListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    queryParameters: [Parameters.timeRange, Parameters.commands],
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer
};
const getAuditEntryOperationSpec = {
    path: "/orgs/{organizationId}/audit/{commandId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CommandAuditEntityDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    queryParameters: [Parameters.expand],
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.commandId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getAuditCommandsOperationSpec = {
    path: "/orgs/{organizationId}/audit/commands",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.StringListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer
};
const getOrganizationsOperationSpec = {
    path: "/orgs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrganizationOperationSpec = {
    path: "/orgs",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.OrganizationDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body4,
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOrganizationOperationSpec = {
    path: "/orgs/{organizationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOrganizationOperationSpec = {
    path: "/orgs/{organizationId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer
};
const getOrganizationUsersOperationSpec = {
    path: "/orgs/{organizationId}/users",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.UserDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body5,
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body6,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        204: {
            bodyMapper: Mappers.UserDataResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOrganizationUserMeOperationSpec = {
    path: "/orgs/{organizationId}/me",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOrganizationUserMeOperationSpec = {
    path: "/orgs/{organizationId}/me",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body6,
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getProjectsOperationSpec = {
    path: "/orgs/{organizationId}/projects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer
};
const createProjectOperationSpec = {
    path: "/orgs/{organizationId}/projects",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.ProjectDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body7,
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getProjectOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteProjectOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getProjectIdentitiesOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/identities",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectIdentityListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createProjectIdentityOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/identities",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.ProjectIdentityDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body8,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getProjectIdentityOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectIdentityDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.projectIdentityId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateProjectIdentityOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
    httpMethod: "PUT",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body9,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.projectIdentityId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteProjectIdentityOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
    httpMethod: "DELETE",
    responses: {
        204: {
            bodyMapper: Mappers.ProjectIdentityDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.projectIdentityId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getProjectTagsOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionaryDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createProjectTagOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags",
    httpMethod: "POST",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body10,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateProjectTagOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags",
    httpMethod: "PUT",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body10,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getProjectTagByKeyOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionaryDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.tagKey
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteProjectTagOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.tagKey
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getProjectTemplatesOperationSpec = {
    path: "/orgs/{organizationId}/templates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectTemplateListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer
};
const createProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.ProjectTemplateDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body11,
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates/{projectTemplateId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectTemplateDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectTemplateId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates/{projectTemplateId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectTemplateDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body12,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectTemplateId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates/{projectTemplateId}",
    httpMethod: "DELETE",
    responses: {
        204: {
            bodyMapper: Mappers.ProjectTemplateDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectTemplateId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getProjectUsersOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.UserDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body5,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body6,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getProjectUserMeOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/me",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateProjectUserMeOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/me",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body6,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getInfoOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.TeamCloudInformationDataResult
        }
    },
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const getSchedulesOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/schedules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduleListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createScheduleOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/schedules",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.ScheduleDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body13,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getScheduleOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduleDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.scheduleId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateScheduleOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduleDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body14,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.scheduleId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const runScheduleOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}/run",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ScheduleDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.scheduleId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getStatusOperationSpec = {
    path: "/orgs/{organizationId}/status/{trackingId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.StatusResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        302: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.trackingId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getProjectStatusOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/status/{trackingId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.StatusResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        302: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.trackingId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getUserProjectsOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}/projects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getUserProjectsMeOperationSpec = {
    path: "/orgs/{organizationId}/me/projects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=teamCloud.js.map