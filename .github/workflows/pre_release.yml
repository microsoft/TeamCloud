name: Create Pre-release

on:
  push:
    branches: [main]

env:
  BUILD_CONFIGURATION: Release
  SOURCE_DIRECTORY: ./src

jobs:
  build:
    name: Create new Pre-release
    if: "!contains(join(github.event.commits.*.message), '+norelease')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.TEAMCLOUD_PAT }}
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.406'

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
          versionSpec: '5.x'

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.9
        with:
          useConfigFile: true

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      # Everything added to release_assets will be published as an asset on the release
      - name: Create Assets Directory
        uses: actions/github-script@v4
        with:
          script: await io.mkdirP('release_assets')

      - name: Build & Package for Release
        run: dotnet build ${{ env.SOURCE_DIRECTORY }}/TeamCloud.sln -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true

      - name: Create Release Asset - TeamCloud.API
        run: |
          dotnet publish ${{ env.SOURCE_DIRECTORY }}/TeamCloud.API/TeamCloud.API.csproj -o TeamCloud.API -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --no-build

          pushd TeamCloud.API
            zip -r ../release_assets/TeamCloud.API.zip *
          popd

      - name: Create Release Asset - TeamCloud.Orchestrator
        run: |
          dotnet publish ${{ env.SOURCE_DIRECTORY }}/TeamCloud.Orchestrator/TeamCloud.Orchestrator.csproj -o TeamCloud.Orchestrator -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --no-build

          pushd TeamCloud.Orchestrator
            zip -r ../release_assets/TeamCloud.Orchestrator.zip *
          popd

      - name: Create Release Asset - TeamCloud.Web
        run: |
          pushd web
            zip -r ../release_assets/TeamCloud.Web.zip * .deployment -x .vscode -x \*.md -x .DS_Store -x .env.development -x build/\* -x lib/\* -x node_modules/\* -x .gitignore
          popd

      - name: Compile Bicep Templates to ARM
        run: |
          pushd deploy/bicep
            az bicep build -f main.bicep --outfile ../../release_assets/azuredeploy.json
            az bicep build -f webUI.bicep --outfile ../../release_assets/azuredeploy.web.json
          popd

      - name: Create OpenAPI & Python Client
        run: bash ./scripts/create-clients.sh ../../TeamCloud.API/TeamCloud.API.dll

      - name: Build TeamCloud CLI
        run: bash ./scripts/build-cli.sh

      # This must be run LAST - AFTER everything is added to release_assets
      - name: Prepare Release Assets
        id: prepare_assets
        run: python ./scripts/prepare_assets.py ${{ steps.gitversion.outputs.majorMinorPatch }}

      - name: Create Pre-release
        id: publish_assets
        uses: actions/github-script@v4
        with:
          script: |

            const fs = require('fs');

            const assets = JSON.parse('${{steps.prepare_assets.outputs.assets}}');

            const releaseResult = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ steps.gitversion.outputs.majorMinorPatch }}',
              name: 'v${{ steps.gitversion.outputs.majorMinorPatch }}-pre',
              prerelease: true,
              body: 'Pre-release build.'
            });

            const release = releaseResult.data;

            assets.forEach(async a => await github.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: a.name,
              data: fs.readFileSync(a.path)
            }));

      - name: Trigger Publish
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.TEAMCLOUD_PAT }}
          script: |

            github.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: 'v${{ steps.gitversion.outputs.majorMinorPatch }}',
              inputs: {
                tag: 'v${{ steps.gitversion.outputs.majorMinorPatch }}',
                reset_demo: '${{ contains(join(github.event.commits.*.message), '+resetdemo') }}'
              }
            });
