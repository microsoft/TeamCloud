name: Create Pre-release

on:
  push:
    branches: [master]

env:
  TC_CLI_VERSION: 0.4.0
  BUILD_CONFIGURATION: Release
  SOURCE_DIRECTORY: ./src

jobs:
  build:
    name: Create new Pre-release
    if: "!contains(join(github.event.commits.*.message), '+norelease')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Checkout Tags
        run: git fetch --prune --tags

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.2
        with:
          versionSpec: '5.2.4'

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.300'

      - name: Build & Package for Pre-release
        run: dotnet build ${{ env.SOURCE_DIRECTORY }}/TeamCloud.sln -o Prerelease -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --version-suffix "pre"

      - name: Publish Pre-release NuGet Packages
        run: dotnet nuget push 'Prerelease/*.nupkg' --api-key '${{ secrets.MYGET_DEV_TOKEN }}' --source 'https://www.myget.org/F/teamcloud-dev/api/v2/package' --symbol-api-key '${{ secrets.MYGET_DEV_TOKEN }}' --symbol-source 'https://www.myget.org/F/teamcloud-dev/symbols/api/v2/package' --skip-duplicate

      - name: Build & Package for Release
        run: dotnet build ${{ env.SOURCE_DIRECTORY }}/TeamCloud.sln -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true

      - name: Create Release Asset - NuGet
        run: zip -r -j NuGet.zip src -i '*.nupkg'

      - name: Create Release Asset - TeamCloud.API
        run: |
          dotnet publish ${{ env.SOURCE_DIRECTORY }}/TeamCloud.API/TeamCloud.API.csproj -o TeamCloud.API -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --no-build

          pushd TeamCloud.API
            zip -r ../TeamCloud.API.zip *
          popd

      - name: Create Release Asset - TeamCloud.Orchestrator
        run: |
          dotnet publish ${{ env.SOURCE_DIRECTORY }}/TeamCloud.Orchestrator/TeamCloud.Orchestrator.csproj -o TeamCloud.Orchestrator -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --no-build

          pushd TeamCloud.Orchestrator
            zip -r ../TeamCloud.Orchestrator.zip *
          popd

      - name: Generate OpenAPI definition
        run: |
          pushd ${{ env.SOURCE_DIRECTORY }}/TeamCloud.API
            dotnet tool restore
            dotnet swagger tofile --output ../../client/swagger.json ../../TeamCloud.API/TeamCloud.API.dll v1
          popd

      - name: Generate index.json
        shell: python
        run: |
          import json
          index = {}
          index['teamcloud'] = {
              'version': 'v${{ steps.gitversion.outputs.majorMinorPatch }}',
              'deployUrl': 'https://github.com/microsoft/TeamCloud/releases/download/v${{ steps.gitversion.outputs.majorMinorPatch }}/azuredeploy.json',
              'apiZipUrl': 'https://github.com/microsoft/TeamCloud/releases/download/v${{ steps.gitversion.outputs.majorMinorPatch }}/TeamCloud.API.zip',
              'orchestratorZipUrl': 'https://github.com/microsoft/TeamCloud/releases/download/v${{ steps.gitversion.outputs.majorMinorPatch }}/TeamCloud.Orchestrator.zip',
          }
          with open('index.json', 'w') as f:
              json.dump(index, f, ensure_ascii=False, indent=4, sort_keys=True)

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'

      - name: Install Autorest
        run: npm install -g autorest

      - name: Generate Python SDK
        run: |
          pushd client
            autorest --v3
          popd

      - name: Setup Azure CLI Dev Tools (azdev)
        run: |
          python -m venv env
          source env/bin/activate
          pip install azdev
          azdev setup -r $PWD -e tc
          deactivate

      - name: TeamCloud CLI Lint & Style checks
        run: |
          source env/bin/activate
          azdev linter tc
          azdev style tc
          deactivate

      - name: Build TeamCloud CLI
        id: build_tc_cli
        run: |
          source env/bin/activate
          azdev extension build tc
          deactivate
          # echo ::set-output name=whl_file::$(ls dist)

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'v${{ steps.gitversion.outputs.majorMinorPatch }}'
          release_name: 'v${{ steps.gitversion.outputs.majorMinorPatch }}-pre'
          body: 'Pre-release build.'
          prerelease: true

      - name: Upload Release Asset - NuGet.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: NuGet.zip
          asset_name: NuGet.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - TeamCloud.API.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: TeamCloud.API.zip
          asset_name: TeamCloud.API.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - TeamCloud.Orchestrator.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: TeamCloud.Orchestrator.zip
          asset_name: TeamCloud.Orchestrator.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - azuredeploy.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/azuredeploy.json
          asset_name: azuredeploy.json
          asset_content_type: application/json

      - name: Upload Release Asset - index.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: index.json
          asset_name: index.json
          asset_content_type: application/json

      - name: Upload Release Asset - swagger.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: client/swagger.json
          asset_name: swagger.json
          asset_content_type: application/json

      - name: Upload Release Asset - TeamCloud CLI WHL
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/tc-${{ env.TC_CLI_VERSION }}-py2.py3-none-any.whl
          asset_name: tc-${{ env.TC_CLI_VERSION }}-py2.py3-none-any.whl
          asset_content_type: application/zip
