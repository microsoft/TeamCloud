# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, Union

import msrest.serialization

from ._team_cloud_client_enums import *


class AdapterInformation(msrest.serialization.Model):
    """AdapterInformation.

    :param type:  Possible values include: "AzureResourceManager", "AzureDevOps", "GitHub".
    :type type: str or ~teamcloud.models.AdapterInformationType
    :param display_name:
    :type display_name: str
    :param input_data_schema:
    :type input_data_schema: str
    :param input_data_form:
    :type input_data_form: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'input_data_schema': {'key': 'inputDataSchema', 'type': 'str'},
        'input_data_form': {'key': 'inputDataForm', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "AdapterInformationType"]] = None,
        display_name: Optional[str] = None,
        input_data_schema: Optional[str] = None,
        input_data_form: Optional[str] = None,
        **kwargs
    ):
        super(AdapterInformation, self).__init__(**kwargs)
        self.type = type
        self.display_name = display_name
        self.input_data_schema = input_data_schema
        self.input_data_form = input_data_form


class AdapterInformationListDataResult(msrest.serialization.Model):
    """AdapterInformationListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.AdapterInformation]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[AdapterInformation]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(AdapterInformationListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class AlternateIdentity(msrest.serialization.Model):
    """AlternateIdentity.

    :param login:
    :type login: str
    """

    _attribute_map = {
        'login': {'key': 'login', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        login: Optional[str] = None,
        **kwargs
    ):
        super(AlternateIdentity, self).__init__(**kwargs)
        self.login = login


class CommandAuditEntity(msrest.serialization.Model):
    """CommandAuditEntity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar command_id:
    :vartype command_id: str
    :ivar organization_id:
    :vartype organization_id: str
    :param command_json:
    :type command_json: str
    :param result_json:
    :type result_json: str
    :ivar project_id:
    :vartype project_id: str
    :ivar user_id:
    :vartype user_id: str
    :ivar parent_id:
    :vartype parent_id: str
    :param command:
    :type command: str
    :ivar component_task:
    :vartype component_task: str
    :param runtime_status:  Possible values include: "Unknown", "Running", "Completed",
     "ContinuedAsNew", "Failed", "Canceled", "Terminated", "Pending".
    :type runtime_status: str or ~teamcloud.models.CommandAuditEntityRuntimeStatus
    :param custom_status:
    :type custom_status: str
    :param errors:
    :type errors: str
    :param created:
    :type created: ~datetime.datetime
    :param updated:
    :type updated: ~datetime.datetime
    """

    _validation = {
        'command_id': {'readonly': True},
        'organization_id': {'readonly': True},
        'project_id': {'readonly': True},
        'user_id': {'readonly': True},
        'parent_id': {'readonly': True},
        'component_task': {'readonly': True},
    }

    _attribute_map = {
        'command_id': {'key': 'commandId', 'type': 'str'},
        'organization_id': {'key': 'organizationId', 'type': 'str'},
        'command_json': {'key': 'commandJson', 'type': 'str'},
        'result_json': {'key': 'resultJson', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'command': {'key': 'command', 'type': 'str'},
        'component_task': {'key': 'componentTask', 'type': 'str'},
        'runtime_status': {'key': 'runtimeStatus', 'type': 'str'},
        'custom_status': {'key': 'customStatus', 'type': 'str'},
        'errors': {'key': 'errors', 'type': 'str'},
        'created': {'key': 'created', 'type': 'iso-8601'},
        'updated': {'key': 'updated', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        command_json: Optional[str] = None,
        result_json: Optional[str] = None,
        command: Optional[str] = None,
        runtime_status: Optional[Union[str, "CommandAuditEntityRuntimeStatus"]] = None,
        custom_status: Optional[str] = None,
        errors: Optional[str] = None,
        created: Optional[datetime.datetime] = None,
        updated: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(CommandAuditEntity, self).__init__(**kwargs)
        self.command_id = None
        self.organization_id = None
        self.command_json = command_json
        self.result_json = result_json
        self.project_id = None
        self.user_id = None
        self.parent_id = None
        self.command = command
        self.component_task = None
        self.runtime_status = runtime_status
        self.custom_status = custom_status
        self.errors = errors
        self.created = created
        self.updated = updated


class CommandAuditEntityDataResult(msrest.serialization.Model):
    """CommandAuditEntityDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.CommandAuditEntity
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'CommandAuditEntity'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["CommandAuditEntity"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(CommandAuditEntityDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class CommandAuditEntityListDataResult(msrest.serialization.Model):
    """CommandAuditEntityListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.CommandAuditEntity]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[CommandAuditEntity]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(CommandAuditEntityListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class Component(msrest.serialization.Model):
    """Component.

    All required parameters must be populated in order to send to Azure.

    :param href:
    :type href: str
    :param organization: Required.
    :type organization: str
    :param template_id: Required.
    :type template_id: str
    :param project_id: Required.
    :type project_id: str
    :param creator: Required.
    :type creator: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param input_json:
    :type input_json: str
    :param value_json:
    :type value_json: str
    :param type: Required.  Possible values include: "Environment", "Repository".
    :type type: str or ~teamcloud.models.ComponentType
    :param resource_id:
    :type resource_id: str
    :param resource_url:
    :type resource_url: str
    :param resource_state:  Possible values include: "Pending", "Initializing", "Provisioning",
     "Succeeded", "Failed".
    :type resource_state: str or ~teamcloud.models.ComponentResourceState
    :param deployment_scope_id:
    :type deployment_scope_id: str
    :param identity_id:
    :type identity_id: str
    :param deleted:
    :type deleted: ~datetime.datetime
    :param ttl:
    :type ttl: int
    :param slug: Required.
    :type slug: str
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'template_id': {'required': True},
        'project_id': {'required': True},
        'creator': {'required': True},
        'type': {'required': True},
        'slug': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'href': {'key': 'href', 'type': 'str'},
        'organization': {'key': 'organization', 'type': 'str'},
        'template_id': {'key': 'templateId', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'creator': {'key': 'creator', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
        'value_json': {'key': 'valueJson', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_url': {'key': 'resourceUrl', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
        'identity_id': {'key': 'identityId', 'type': 'str'},
        'deleted': {'key': 'deleted', 'type': 'iso-8601'},
        'ttl': {'key': 'ttl', 'type': 'int'},
        'slug': {'key': 'slug', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        organization: str,
        template_id: str,
        project_id: str,
        creator: str,
        type: Union[str, "ComponentType"],
        slug: str,
        id: str,
        href: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        input_json: Optional[str] = None,
        value_json: Optional[str] = None,
        resource_id: Optional[str] = None,
        resource_url: Optional[str] = None,
        resource_state: Optional[Union[str, "ComponentResourceState"]] = None,
        deployment_scope_id: Optional[str] = None,
        identity_id: Optional[str] = None,
        deleted: Optional[datetime.datetime] = None,
        ttl: Optional[int] = None,
        **kwargs
    ):
        super(Component, self).__init__(**kwargs)
        self.href = href
        self.organization = organization
        self.template_id = template_id
        self.project_id = project_id
        self.creator = creator
        self.display_name = display_name
        self.description = description
        self.input_json = input_json
        self.value_json = value_json
        self.type = type
        self.resource_id = resource_id
        self.resource_url = resource_url
        self.resource_state = resource_state
        self.deployment_scope_id = deployment_scope_id
        self.identity_id = identity_id
        self.deleted = deleted
        self.ttl = ttl
        self.slug = slug
        self.id = id


class ComponentDataResult(msrest.serialization.Model):
    """ComponentDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.Component
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Component'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["Component"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ComponentDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class ComponentDefinition(msrest.serialization.Model):
    """ComponentDefinition.

    All required parameters must be populated in order to send to Azure.

    :param template_id: Required.
    :type template_id: str
    :param display_name: Required.
    :type display_name: str
    :param input_json:
    :type input_json: str
    :param deployment_scope_id:
    :type deployment_scope_id: str
    """

    _validation = {
        'template_id': {'required': True},
        'display_name': {'required': True},
    }

    _attribute_map = {
        'template_id': {'key': 'templateId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        template_id: str,
        display_name: str,
        input_json: Optional[str] = None,
        deployment_scope_id: Optional[str] = None,
        **kwargs
    ):
        super(ComponentDefinition, self).__init__(**kwargs)
        self.template_id = template_id
        self.display_name = display_name
        self.input_json = input_json
        self.deployment_scope_id = deployment_scope_id


class ComponentListDataResult(msrest.serialization.Model):
    """ComponentListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Component]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Component]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ComponentListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class ComponentTask(msrest.serialization.Model):
    """ComponentTask.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :param component_id: Required.
    :type component_id: str
    :param project_id: Required.
    :type project_id: str
    :param requested_by:
    :type requested_by: str
    :param schedule_id:
    :type schedule_id: str
    :param type:  Possible values include: "Custom", "Create", "Delete".
    :type type: str or ~teamcloud.models.ComponentTaskType
    :param type_name:
    :type type_name: str
    :param created:
    :type created: ~datetime.datetime
    :param started:
    :type started: ~datetime.datetime
    :param finished:
    :type finished: ~datetime.datetime
    :param input_json:
    :type input_json: str
    :param output:
    :type output: str
    :param resource_id:
    :type resource_id: str
    :param resource_state:  Possible values include: "Pending", "Initializing", "Provisioning",
     "Succeeded", "Failed".
    :type resource_state: str or ~teamcloud.models.ComponentTaskResourceState
    :param exit_code:
    :type exit_code: int
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'component_id': {'required': True},
        'project_id': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'component_id': {'key': 'componentId', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'requested_by': {'key': 'requestedBy', 'type': 'str'},
        'schedule_id': {'key': 'scheduleId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'type_name': {'key': 'typeName', 'type': 'str'},
        'created': {'key': 'created', 'type': 'iso-8601'},
        'started': {'key': 'started', 'type': 'iso-8601'},
        'finished': {'key': 'finished', 'type': 'iso-8601'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
        'output': {'key': 'output', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'exit_code': {'key': 'exitCode', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        organization: str,
        component_id: str,
        project_id: str,
        id: str,
        requested_by: Optional[str] = None,
        schedule_id: Optional[str] = None,
        type: Optional[Union[str, "ComponentTaskType"]] = None,
        type_name: Optional[str] = None,
        created: Optional[datetime.datetime] = None,
        started: Optional[datetime.datetime] = None,
        finished: Optional[datetime.datetime] = None,
        input_json: Optional[str] = None,
        output: Optional[str] = None,
        resource_id: Optional[str] = None,
        resource_state: Optional[Union[str, "ComponentTaskResourceState"]] = None,
        exit_code: Optional[int] = None,
        **kwargs
    ):
        super(ComponentTask, self).__init__(**kwargs)
        self.organization = organization
        self.component_id = component_id
        self.project_id = project_id
        self.requested_by = requested_by
        self.schedule_id = schedule_id
        self.type = type
        self.type_name = type_name
        self.created = created
        self.started = started
        self.finished = finished
        self.input_json = input_json
        self.output = output
        self.resource_id = resource_id
        self.resource_state = resource_state
        self.exit_code = exit_code
        self.id = id


class ComponentTaskDataResult(msrest.serialization.Model):
    """ComponentTaskDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ComponentTask
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ComponentTask'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["ComponentTask"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ComponentTaskDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class ComponentTaskDefinition(msrest.serialization.Model):
    """ComponentTaskDefinition.

    All required parameters must be populated in order to send to Azure.

    :param task_id: Required.
    :type task_id: str
    :param input_json:
    :type input_json: str
    """

    _validation = {
        'task_id': {'required': True},
    }

    _attribute_map = {
        'task_id': {'key': 'taskId', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        task_id: str,
        input_json: Optional[str] = None,
        **kwargs
    ):
        super(ComponentTaskDefinition, self).__init__(**kwargs)
        self.task_id = task_id
        self.input_json = input_json


class ComponentTaskListDataResult(msrest.serialization.Model):
    """ComponentTaskListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ComponentTask]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ComponentTask]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ComponentTaskListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class ComponentTaskReference(msrest.serialization.Model):
    """ComponentTaskReference.

    :param component_id:
    :type component_id: str
    :param component_task_template_id:
    :type component_task_template_id: str
    :param input_json:
    :type input_json: str
    """

    _attribute_map = {
        'component_id': {'key': 'componentId', 'type': 'str'},
        'component_task_template_id': {'key': 'componentTaskTemplateId', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        component_id: Optional[str] = None,
        component_task_template_id: Optional[str] = None,
        input_json: Optional[str] = None,
        **kwargs
    ):
        super(ComponentTaskReference, self).__init__(**kwargs)
        self.component_id = component_id
        self.component_task_template_id = component_task_template_id
        self.input_json = input_json


class ComponentTaskRunner(msrest.serialization.Model):
    """ComponentTaskRunner.

    :param id:
    :type id: str
    :param with_property: Dictionary of :code:`<string>`.
    :type with_property: dict[str, str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'with_property': {'key': 'with', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        with_property: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(ComponentTaskRunner, self).__init__(**kwargs)
        self.id = id
        self.with_property = with_property


class ComponentTaskTemplate(msrest.serialization.Model):
    """ComponentTaskTemplate.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id:
    :type id: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param input_json_schema:
    :type input_json_schema: str
    :param type:  Possible values include: "Custom", "Create", "Delete".
    :type type: str or ~teamcloud.models.ComponentTaskTemplateType
    :ivar type_name:
    :vartype type_name: str
    """

    _validation = {
        'type_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'input_json_schema': {'key': 'inputJsonSchema', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'type_name': {'key': 'typeName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        input_json_schema: Optional[str] = None,
        type: Optional[Union[str, "ComponentTaskTemplateType"]] = None,
        **kwargs
    ):
        super(ComponentTaskTemplate, self).__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.description = description
        self.input_json_schema = input_json_schema
        self.type = type
        self.type_name = None


class ComponentTemplate(msrest.serialization.Model):
    """ComponentTemplate.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :param parent_id: Required.
    :type parent_id: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param repository: Required.
    :type repository: ~teamcloud.models.RepositoryReference
    :param permissions:
    :type permissions: ~teamcloud.models.ComponentTemplatePermissions
    :param input_json_schema:
    :type input_json_schema: str
    :param tasks:
    :type tasks: list[~teamcloud.models.ComponentTaskTemplate]
    :param task_runner:
    :type task_runner: ~teamcloud.models.ComponentTaskRunner
    :param type: Required.  Possible values include: "Environment", "Repository".
    :type type: str or ~teamcloud.models.ComponentTemplateType
    :param folder:
    :type folder: str
    :param configuration: Anything.
    :type configuration: any
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'parent_id': {'required': True},
        'repository': {'required': True},
        'type': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'RepositoryReference'},
        'permissions': {'key': 'permissions', 'type': 'ComponentTemplatePermissions'},
        'input_json_schema': {'key': 'inputJsonSchema', 'type': 'str'},
        'tasks': {'key': 'tasks', 'type': '[ComponentTaskTemplate]'},
        'task_runner': {'key': 'taskRunner', 'type': 'ComponentTaskRunner'},
        'type': {'key': 'type', 'type': 'str'},
        'folder': {'key': 'folder', 'type': 'str'},
        'configuration': {'key': 'configuration', 'type': 'object'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        organization: str,
        parent_id: str,
        repository: "RepositoryReference",
        type: Union[str, "ComponentTemplateType"],
        id: str,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        permissions: Optional["ComponentTemplatePermissions"] = None,
        input_json_schema: Optional[str] = None,
        tasks: Optional[List["ComponentTaskTemplate"]] = None,
        task_runner: Optional["ComponentTaskRunner"] = None,
        folder: Optional[str] = None,
        configuration: Optional[Any] = None,
        **kwargs
    ):
        super(ComponentTemplate, self).__init__(**kwargs)
        self.organization = organization
        self.parent_id = parent_id
        self.display_name = display_name
        self.description = description
        self.repository = repository
        self.permissions = permissions
        self.input_json_schema = input_json_schema
        self.tasks = tasks
        self.task_runner = task_runner
        self.type = type
        self.folder = folder
        self.configuration = configuration
        self.id = id


class ComponentTemplateDataResult(msrest.serialization.Model):
    """ComponentTemplateDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ComponentTemplate
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ComponentTemplate'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["ComponentTemplate"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ComponentTemplateDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class ComponentTemplateListDataResult(msrest.serialization.Model):
    """ComponentTemplateListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ComponentTemplate]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ComponentTemplate]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ComponentTemplateListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class ComponentTemplatePermissions(msrest.serialization.Model):
    """ComponentTemplatePermissions.

    :param none:
    :type none: list[str]
    :param member:
    :type member: list[str]
    :param admin:
    :type admin: list[str]
    :param owner:
    :type owner: list[str]
    """

    _attribute_map = {
        'none': {'key': 'None', 'type': '[str]'},
        'member': {'key': 'Member', 'type': '[str]'},
        'admin': {'key': 'Admin', 'type': '[str]'},
        'owner': {'key': 'Owner', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        none: Optional[List[str]] = None,
        member: Optional[List[str]] = None,
        admin: Optional[List[str]] = None,
        owner: Optional[List[str]] = None,
        **kwargs
    ):
        super(ComponentTemplatePermissions, self).__init__(**kwargs)
        self.none = none
        self.member = member
        self.admin = admin
        self.owner = owner


class DeploymentScope(msrest.serialization.Model):
    """DeploymentScope.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :param display_name: Required.
    :type display_name: str
    :param slug: Required.
    :type slug: str
    :param is_default: Required.
    :type is_default: bool
    :param type: Required.  Possible values include: "AzureResourceManager", "AzureDevOps",
     "GitHub".
    :type type: str or ~teamcloud.models.DeploymentScopeType
    :param input_data_schema:
    :type input_data_schema: str
    :param input_data:
    :type input_data: str
    :param management_group_id:
    :type management_group_id: str
    :param subscription_ids:
    :type subscription_ids: list[str]
    :param authorizable:
    :type authorizable: bool
    :param authorized:
    :type authorized: bool
    :param authorize_url:
    :type authorize_url: str
    :param component_types:
    :type component_types: list[str or ~teamcloud.models.DeploymentScopeComponentTypesItem]
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'display_name': {'required': True},
        'slug': {'required': True},
        'is_default': {'required': True},
        'type': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'type': {'key': 'type', 'type': 'str'},
        'input_data_schema': {'key': 'inputDataSchema', 'type': 'str'},
        'input_data': {'key': 'inputData', 'type': 'str'},
        'management_group_id': {'key': 'managementGroupId', 'type': 'str'},
        'subscription_ids': {'key': 'subscriptionIds', 'type': '[str]'},
        'authorizable': {'key': 'authorizable', 'type': 'bool'},
        'authorized': {'key': 'authorized', 'type': 'bool'},
        'authorize_url': {'key': 'authorizeUrl', 'type': 'str'},
        'component_types': {'key': 'componentTypes', 'type': '[str]'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        organization: str,
        display_name: str,
        slug: str,
        is_default: bool,
        type: Union[str, "DeploymentScopeType"],
        id: str,
        input_data_schema: Optional[str] = None,
        input_data: Optional[str] = None,
        management_group_id: Optional[str] = None,
        subscription_ids: Optional[List[str]] = None,
        authorizable: Optional[bool] = None,
        authorized: Optional[bool] = None,
        authorize_url: Optional[str] = None,
        component_types: Optional[List[Union[str, "DeploymentScopeComponentTypesItem"]]] = None,
        **kwargs
    ):
        super(DeploymentScope, self).__init__(**kwargs)
        self.organization = organization
        self.display_name = display_name
        self.slug = slug
        self.is_default = is_default
        self.type = type
        self.input_data_schema = input_data_schema
        self.input_data = input_data
        self.management_group_id = management_group_id
        self.subscription_ids = subscription_ids
        self.authorizable = authorizable
        self.authorized = authorized
        self.authorize_url = authorize_url
        self.component_types = component_types
        self.id = id


class DeploymentScopeDataResult(msrest.serialization.Model):
    """DeploymentScopeDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.DeploymentScope
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'DeploymentScope'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["DeploymentScope"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(DeploymentScopeDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class DeploymentScopeDefinition(msrest.serialization.Model):
    """DeploymentScopeDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param display_name: Required.
    :type display_name: str
    :param type: Required.  Possible values include: "AzureResourceManager", "AzureDevOps",
     "GitHub".
    :type type: str or ~teamcloud.models.DeploymentScopeDefinitionType
    :ivar slug:
    :vartype slug: str
    :param input_data:
    :type input_data: str
    :param is_default:
    :type is_default: bool
    """

    _validation = {
        'display_name': {'required': True},
        'type': {'required': True},
        'slug': {'readonly': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'input_data': {'key': 'inputData', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        type: Union[str, "DeploymentScopeDefinitionType"],
        input_data: Optional[str] = None,
        is_default: Optional[bool] = None,
        **kwargs
    ):
        super(DeploymentScopeDefinition, self).__init__(**kwargs)
        self.display_name = display_name
        self.type = type
        self.slug = None
        self.input_data = input_data
        self.is_default = is_default


class DeploymentScopeListDataResult(msrest.serialization.Model):
    """DeploymentScopeListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.DeploymentScope]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[DeploymentScope]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(DeploymentScopeListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class ErrorResult(msrest.serialization.Model):
    """ErrorResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param errors:
    :type errors: list[~teamcloud.models.ResultError]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ResultError]'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        errors: Optional[List["ResultError"]] = None,
        **kwargs
    ):
        super(ErrorResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.errors = errors


class Organization(msrest.serialization.Model):
    """Organization.

    All required parameters must be populated in order to send to Azure.

    :param tenant: Required.
    :type tenant: str
    :param slug: Required.
    :type slug: str
    :param display_name: Required.
    :type display_name: str
    :param subscription_id: Required.
    :type subscription_id: str
    :param location: Required.
    :type location: str
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param resource_id:
    :type resource_id: str
    :param resource_state:  Possible values include: "Pending", "Initializing", "Provisioning",
     "Succeeded", "Failed".
    :type resource_state: str or ~teamcloud.models.OrganizationResourceState
    :param gallery_id:
    :type gallery_id: str
    :param registry_id:
    :type registry_id: str
    :param storage_id:
    :type storage_id: str
    :param id: Required.
    :type id: str
    """

    _validation = {
        'tenant': {'required': True},
        'slug': {'required': True},
        'display_name': {'required': True},
        'subscription_id': {'required': True},
        'location': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'tenant': {'key': 'tenant', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'gallery_id': {'key': 'galleryId', 'type': 'str'},
        'registry_id': {'key': 'registryId', 'type': 'str'},
        'storage_id': {'key': 'storageId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tenant: str,
        slug: str,
        display_name: str,
        subscription_id: str,
        location: str,
        id: str,
        tags: Optional[Dict[str, str]] = None,
        resource_id: Optional[str] = None,
        resource_state: Optional[Union[str, "OrganizationResourceState"]] = None,
        gallery_id: Optional[str] = None,
        registry_id: Optional[str] = None,
        storage_id: Optional[str] = None,
        **kwargs
    ):
        super(Organization, self).__init__(**kwargs)
        self.tenant = tenant
        self.slug = slug
        self.display_name = display_name
        self.subscription_id = subscription_id
        self.location = location
        self.tags = tags
        self.resource_id = resource_id
        self.resource_state = resource_state
        self.gallery_id = gallery_id
        self.registry_id = registry_id
        self.storage_id = storage_id
        self.id = id


class OrganizationDataResult(msrest.serialization.Model):
    """OrganizationDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.Organization
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Organization'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["Organization"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(OrganizationDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class OrganizationDefinition(msrest.serialization.Model):
    """OrganizationDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar slug:
    :vartype slug: str
    :param display_name: Required.
    :type display_name: str
    :param subscription_id: Required.
    :type subscription_id: str
    :param location: Required.
    :type location: str
    """

    _validation = {
        'slug': {'readonly': True},
        'display_name': {'required': True},
        'subscription_id': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        subscription_id: str,
        location: str,
        **kwargs
    ):
        super(OrganizationDefinition, self).__init__(**kwargs)
        self.slug = None
        self.display_name = display_name
        self.subscription_id = subscription_id
        self.location = location


class OrganizationListDataResult(msrest.serialization.Model):
    """OrganizationListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Organization]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Organization]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(OrganizationListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class Project(msrest.serialization.Model):
    """Project.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :param slug: Required.
    :type slug: str
    :param display_name: Required.
    :type display_name: str
    :param template: Required.
    :type template: str
    :param template_input:
    :type template_input: str
    :param users:
    :type users: list[~teamcloud.models.User]
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param resource_id:
    :type resource_id: str
    :param resource_state:  Possible values include: "Pending", "Initializing", "Provisioning",
     "Succeeded", "Failed".
    :type resource_state: str or ~teamcloud.models.ProjectResourceState
    :ivar vault_id:
    :vartype vault_id: str
    :param shared_vault_id:
    :type shared_vault_id: str
    :param secrets_vault_id:
    :type secrets_vault_id: str
    :param storage_id:
    :type storage_id: str
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'slug': {'required': True},
        'display_name': {'required': True},
        'template': {'required': True},
        'vault_id': {'readonly': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'template': {'key': 'template', 'type': 'str'},
        'template_input': {'key': 'templateInput', 'type': 'str'},
        'users': {'key': 'users', 'type': '[User]'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'vault_id': {'key': 'vaultId', 'type': 'str'},
        'shared_vault_id': {'key': 'sharedVaultId', 'type': 'str'},
        'secrets_vault_id': {'key': 'secretsVaultId', 'type': 'str'},
        'storage_id': {'key': 'storageId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        organization: str,
        slug: str,
        display_name: str,
        template: str,
        id: str,
        template_input: Optional[str] = None,
        users: Optional[List["User"]] = None,
        tags: Optional[Dict[str, str]] = None,
        resource_id: Optional[str] = None,
        resource_state: Optional[Union[str, "ProjectResourceState"]] = None,
        shared_vault_id: Optional[str] = None,
        secrets_vault_id: Optional[str] = None,
        storage_id: Optional[str] = None,
        **kwargs
    ):
        super(Project, self).__init__(**kwargs)
        self.organization = organization
        self.slug = slug
        self.display_name = display_name
        self.template = template
        self.template_input = template_input
        self.users = users
        self.tags = tags
        self.resource_id = resource_id
        self.resource_state = resource_state
        self.vault_id = None
        self.shared_vault_id = shared_vault_id
        self.secrets_vault_id = secrets_vault_id
        self.storage_id = storage_id
        self.id = id


class ProjectDataResult(msrest.serialization.Model):
    """ProjectDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.Project
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Project'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["Project"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ProjectDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class ProjectDefinition(msrest.serialization.Model):
    """ProjectDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar slug:
    :vartype slug: str
    :param display_name: Required.
    :type display_name: str
    :param template: Required.
    :type template: str
    :param template_input: Required.
    :type template_input: str
    :param users:
    :type users: list[~teamcloud.models.UserDefinition]
    """

    _validation = {
        'slug': {'readonly': True},
        'display_name': {'required': True},
        'template': {'required': True},
        'template_input': {'required': True},
    }

    _attribute_map = {
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'template': {'key': 'template', 'type': 'str'},
        'template_input': {'key': 'templateInput', 'type': 'str'},
        'users': {'key': 'users', 'type': '[UserDefinition]'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        template: str,
        template_input: str,
        users: Optional[List["UserDefinition"]] = None,
        **kwargs
    ):
        super(ProjectDefinition, self).__init__(**kwargs)
        self.slug = None
        self.display_name = display_name
        self.template = template
        self.template_input = template_input
        self.users = users


class ProjectIdentity(msrest.serialization.Model):
    """ProjectIdentity.

    All required parameters must be populated in order to send to Azure.

    :param project_id: Required.
    :type project_id: str
    :param organization: Required.
    :type organization: str
    :param display_name: Required.
    :type display_name: str
    :param deployment_scope_id: Required.
    :type deployment_scope_id: str
    :param tenant_id:
    :type tenant_id: str
    :param client_id:
    :type client_id: str
    :param client_secret:
    :type client_secret: str
    :param redirect_urls:
    :type redirect_urls: list[str]
    :param object_id:
    :type object_id: str
    :param id: Required.
    :type id: str
    """

    _validation = {
        'project_id': {'required': True},
        'organization': {'required': True},
        'display_name': {'required': True},
        'deployment_scope_id': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'project_id': {'key': 'projectId', 'type': 'str'},
        'organization': {'key': 'organization', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
        'redirect_urls': {'key': 'redirectUrls', 'type': '[str]'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        project_id: str,
        organization: str,
        display_name: str,
        deployment_scope_id: str,
        id: str,
        tenant_id: Optional[str] = None,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        redirect_urls: Optional[List[str]] = None,
        object_id: Optional[str] = None,
        **kwargs
    ):
        super(ProjectIdentity, self).__init__(**kwargs)
        self.project_id = project_id
        self.organization = organization
        self.display_name = display_name
        self.deployment_scope_id = deployment_scope_id
        self.tenant_id = tenant_id
        self.client_id = client_id
        self.client_secret = client_secret
        self.redirect_urls = redirect_urls
        self.object_id = object_id
        self.id = id


class ProjectIdentityDataResult(msrest.serialization.Model):
    """ProjectIdentityDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ProjectIdentity
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ProjectIdentity'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["ProjectIdentity"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ProjectIdentityDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class ProjectIdentityDefinition(msrest.serialization.Model):
    """ProjectIdentityDefinition.

    All required parameters must be populated in order to send to Azure.

    :param display_name: Required.
    :type display_name: str
    :param deployment_scope_id: Required.
    :type deployment_scope_id: str
    """

    _validation = {
        'display_name': {'required': True},
        'deployment_scope_id': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        deployment_scope_id: str,
        **kwargs
    ):
        super(ProjectIdentityDefinition, self).__init__(**kwargs)
        self.display_name = display_name
        self.deployment_scope_id = deployment_scope_id


class ProjectIdentityListDataResult(msrest.serialization.Model):
    """ProjectIdentityListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ProjectIdentity]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ProjectIdentity]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ProjectIdentityListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class ProjectListDataResult(msrest.serialization.Model):
    """ProjectListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Project]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Project]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ProjectListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class ProjectMembership(msrest.serialization.Model):
    """ProjectMembership.

    All required parameters must be populated in order to send to Azure.

    :param project_id: Required.
    :type project_id: str
    :param role: Required.  Possible values include: "None", "Member", "Admin", "Owner".
    :type role: str or ~teamcloud.models.ProjectMembershipRole
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    """

    _validation = {
        'project_id': {'required': True},
        'role': {'required': True},
    }

    _attribute_map = {
        'project_id': {'key': 'projectId', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        project_id: str,
        role: Union[str, "ProjectMembershipRole"],
        properties: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(ProjectMembership, self).__init__(**kwargs)
        self.project_id = project_id
        self.role = role
        self.properties = properties


class ProjectTemplate(msrest.serialization.Model):
    """ProjectTemplate.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :param slug: Required.
    :type slug: str
    :param name:
    :type name: str
    :param display_name: Required.
    :type display_name: str
    :param components:
    :type components: list[str]
    :param repository: Required.
    :type repository: ~teamcloud.models.RepositoryReference
    :param description:
    :type description: str
    :param is_default: Required.
    :type is_default: bool
    :param input_json_schema:
    :type input_json_schema: str
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'slug': {'required': True},
        'display_name': {'required': True},
        'repository': {'required': True},
        'is_default': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'components': {'key': 'components', 'type': '[str]'},
        'repository': {'key': 'repository', 'type': 'RepositoryReference'},
        'description': {'key': 'description', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'input_json_schema': {'key': 'inputJsonSchema', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        organization: str,
        slug: str,
        display_name: str,
        repository: "RepositoryReference",
        is_default: bool,
        id: str,
        name: Optional[str] = None,
        components: Optional[List[str]] = None,
        description: Optional[str] = None,
        input_json_schema: Optional[str] = None,
        **kwargs
    ):
        super(ProjectTemplate, self).__init__(**kwargs)
        self.organization = organization
        self.slug = slug
        self.name = name
        self.display_name = display_name
        self.components = components
        self.repository = repository
        self.description = description
        self.is_default = is_default
        self.input_json_schema = input_json_schema
        self.id = id


class ProjectTemplateDataResult(msrest.serialization.Model):
    """ProjectTemplateDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ProjectTemplate
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ProjectTemplate'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["ProjectTemplate"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ProjectTemplateDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class ProjectTemplateDefinition(msrest.serialization.Model):
    """ProjectTemplateDefinition.

    All required parameters must be populated in order to send to Azure.

    :param display_name: Required.
    :type display_name: str
    :param repository: Required.
    :type repository: ~teamcloud.models.RepositoryDefinition
    """

    _validation = {
        'display_name': {'required': True},
        'repository': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'RepositoryDefinition'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        repository: "RepositoryDefinition",
        **kwargs
    ):
        super(ProjectTemplateDefinition, self).__init__(**kwargs)
        self.display_name = display_name
        self.repository = repository


class ProjectTemplateListDataResult(msrest.serialization.Model):
    """ProjectTemplateListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ProjectTemplate]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ProjectTemplate]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ProjectTemplateListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class RepositoryDefinition(msrest.serialization.Model):
    """RepositoryDefinition.

    All required parameters must be populated in order to send to Azure.

    :param url: Required.
    :type url: str
    :param token:
    :type token: str
    :param version:
    :type version: str
    """

    _validation = {
        'url': {'required': True},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        url: str,
        token: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(RepositoryDefinition, self).__init__(**kwargs)
        self.url = url
        self.token = token
        self.version = version


class RepositoryReference(msrest.serialization.Model):
    """RepositoryReference.

    All required parameters must be populated in order to send to Azure.

    :param url: Required.
    :type url: str
    :param token:
    :type token: str
    :param version:
    :type version: str
    :param basel_url:
    :type basel_url: str
    :param mount_url:
    :type mount_url: str
    :param ref:
    :type ref: str
    :param provider: Required.  Possible values include: "Unknown", "GitHub", "DevOps".
    :type provider: str or ~teamcloud.models.RepositoryReferenceProvider
    :param type: Required.  Possible values include: "Unknown", "Tag", "Branch", "Hash".
    :type type: str or ~teamcloud.models.RepositoryReferenceType
    :param organization:
    :type organization: str
    :param repository:
    :type repository: str
    :param project:
    :type project: str
    """

    _validation = {
        'url': {'required': True},
        'provider': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'basel_url': {'key': 'baselUrl', 'type': 'str'},
        'mount_url': {'key': 'mountUrl', 'type': 'str'},
        'ref': {'key': 'ref', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'organization': {'key': 'organization', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'str'},
        'project': {'key': 'project', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        url: str,
        provider: Union[str, "RepositoryReferenceProvider"],
        type: Union[str, "RepositoryReferenceType"],
        token: Optional[str] = None,
        version: Optional[str] = None,
        basel_url: Optional[str] = None,
        mount_url: Optional[str] = None,
        ref: Optional[str] = None,
        organization: Optional[str] = None,
        repository: Optional[str] = None,
        project: Optional[str] = None,
        **kwargs
    ):
        super(RepositoryReference, self).__init__(**kwargs)
        self.url = url
        self.token = token
        self.version = version
        self.basel_url = basel_url
        self.mount_url = mount_url
        self.ref = ref
        self.provider = provider
        self.type = type
        self.organization = organization
        self.repository = repository
        self.project = project


class ResultError(msrest.serialization.Model):
    """ResultError.

    :param code:  Possible values include: "Unknown", "Failed", "Conflict", "NotFound",
     "ServerError", "ValidationError", "Unauthorized", "Forbidden".
    :type code: str or ~teamcloud.models.ResultErrorCode
    :param message:
    :type message: str
    :param errors:
    :type errors: list[~teamcloud.models.ValidationError]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ValidationError]'},
    }

    def __init__(
        self,
        *,
        code: Optional[Union[str, "ResultErrorCode"]] = None,
        message: Optional[str] = None,
        errors: Optional[List["ValidationError"]] = None,
        **kwargs
    ):
        super(ResultError, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.errors = errors


class Schedule(msrest.serialization.Model):
    """Schedule.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :param project_id: Required.
    :type project_id: str
    :param enabled:
    :type enabled: bool
    :param recurring:
    :type recurring: bool
    :param days_of_week:
    :type days_of_week: list[str or ~teamcloud.models.ScheduleDaysOfWeekItem]
    :param utc_hour:
    :type utc_hour: int
    :param utc_minute:
    :type utc_minute: int
    :param creator:
    :type creator: str
    :param created:
    :type created: ~datetime.datetime
    :param last_updated_by:
    :type last_updated_by: str
    :param last_updated:
    :type last_updated: ~datetime.datetime
    :param last_run:
    :type last_run: ~datetime.datetime
    :param component_tasks:
    :type component_tasks: list[~teamcloud.models.ComponentTaskReference]
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'project_id': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'recurring': {'key': 'recurring', 'type': 'bool'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'utc_hour': {'key': 'utcHour', 'type': 'int'},
        'utc_minute': {'key': 'utcMinute', 'type': 'int'},
        'creator': {'key': 'creator', 'type': 'str'},
        'created': {'key': 'created', 'type': 'iso-8601'},
        'last_updated_by': {'key': 'lastUpdatedBy', 'type': 'str'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'last_run': {'key': 'lastRun', 'type': 'iso-8601'},
        'component_tasks': {'key': 'componentTasks', 'type': '[ComponentTaskReference]'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        organization: str,
        project_id: str,
        id: str,
        enabled: Optional[bool] = None,
        recurring: Optional[bool] = None,
        days_of_week: Optional[List[Union[str, "ScheduleDaysOfWeekItem"]]] = None,
        utc_hour: Optional[int] = None,
        utc_minute: Optional[int] = None,
        creator: Optional[str] = None,
        created: Optional[datetime.datetime] = None,
        last_updated_by: Optional[str] = None,
        last_updated: Optional[datetime.datetime] = None,
        last_run: Optional[datetime.datetime] = None,
        component_tasks: Optional[List["ComponentTaskReference"]] = None,
        **kwargs
    ):
        super(Schedule, self).__init__(**kwargs)
        self.organization = organization
        self.project_id = project_id
        self.enabled = enabled
        self.recurring = recurring
        self.days_of_week = days_of_week
        self.utc_hour = utc_hour
        self.utc_minute = utc_minute
        self.creator = creator
        self.created = created
        self.last_updated_by = last_updated_by
        self.last_updated = last_updated
        self.last_run = last_run
        self.component_tasks = component_tasks
        self.id = id


class ScheduleDataResult(msrest.serialization.Model):
    """ScheduleDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.Schedule
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Schedule'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["Schedule"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ScheduleDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class ScheduleDefinition(msrest.serialization.Model):
    """ScheduleDefinition.

    :param enabled:
    :type enabled: bool
    :param recurring:
    :type recurring: bool
    :param days_of_week:
    :type days_of_week: list[str or ~teamcloud.models.ScheduleDefinitionDaysOfWeekItem]
    :param utc_hour:
    :type utc_hour: int
    :param utc_minute:
    :type utc_minute: int
    :param component_tasks:
    :type component_tasks: list[~teamcloud.models.ComponentTaskReference]
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'recurring': {'key': 'recurring', 'type': 'bool'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'utc_hour': {'key': 'utcHour', 'type': 'int'},
        'utc_minute': {'key': 'utcMinute', 'type': 'int'},
        'component_tasks': {'key': 'componentTasks', 'type': '[ComponentTaskReference]'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        recurring: Optional[bool] = None,
        days_of_week: Optional[List[Union[str, "ScheduleDefinitionDaysOfWeekItem"]]] = None,
        utc_hour: Optional[int] = None,
        utc_minute: Optional[int] = None,
        component_tasks: Optional[List["ComponentTaskReference"]] = None,
        **kwargs
    ):
        super(ScheduleDefinition, self).__init__(**kwargs)
        self.enabled = enabled
        self.recurring = recurring
        self.days_of_week = days_of_week
        self.utc_hour = utc_hour
        self.utc_minute = utc_minute
        self.component_tasks = component_tasks


class ScheduleListDataResult(msrest.serialization.Model):
    """ScheduleListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Schedule]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Schedule]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ScheduleListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class StatusResult(msrest.serialization.Model):
    """StatusResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar state:
    :vartype state: str
    :param state_message:
    :type state_message: str
    :param location:
    :type location: str
    :param errors:
    :type errors: list[~teamcloud.models.ResultError]
    :param tracking_id:
    :type tracking_id: str
    """

    _validation = {
        'state': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'state_message': {'key': 'stateMessage', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ResultError]'},
        'tracking_id': {'key': '_trackingId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        state_message: Optional[str] = None,
        location: Optional[str] = None,
        errors: Optional[List["ResultError"]] = None,
        tracking_id: Optional[str] = None,
        **kwargs
    ):
        super(StatusResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.state = None
        self.state_message = state_message
        self.location = location
        self.errors = errors
        self.tracking_id = tracking_id


class StringDictionaryDataResult(msrest.serialization.Model):
    """StringDictionaryDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data: Dictionary of :code:`<string>`.
    :vartype data: dict[str, str]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(StringDictionaryDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class StringListDataResult(msrest.serialization.Model):
    """StringListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[str]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[str]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(StringListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class User(msrest.serialization.Model):
    """User.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :param display_name:
    :type display_name: str
    :param login_name:
    :type login_name: str
    :param mail_address:
    :type mail_address: str
    :param user_type: Required.  Possible values include: "User", "Group", "System", "Service".
    :type user_type: str or ~teamcloud.models.UserType
    :param role: Required.  Possible values include: "None", "Member", "Admin", "Owner".
    :type role: str or ~teamcloud.models.UserRole
    :param project_memberships:
    :type project_memberships: list[~teamcloud.models.ProjectMembership]
    :param alternate_identities:
    :type alternate_identities: ~teamcloud.models.UserAlternateIdentities
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'user_type': {'required': True},
        'role': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'login_name': {'key': 'loginName', 'type': 'str'},
        'mail_address': {'key': 'mailAddress', 'type': 'str'},
        'user_type': {'key': 'userType', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'project_memberships': {'key': 'projectMemberships', 'type': '[ProjectMembership]'},
        'alternate_identities': {'key': 'alternateIdentities', 'type': 'UserAlternateIdentities'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        organization: str,
        user_type: Union[str, "UserType"],
        role: Union[str, "UserRole"],
        id: str,
        display_name: Optional[str] = None,
        login_name: Optional[str] = None,
        mail_address: Optional[str] = None,
        project_memberships: Optional[List["ProjectMembership"]] = None,
        alternate_identities: Optional["UserAlternateIdentities"] = None,
        properties: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(User, self).__init__(**kwargs)
        self.organization = organization
        self.display_name = display_name
        self.login_name = login_name
        self.mail_address = mail_address
        self.user_type = user_type
        self.role = role
        self.project_memberships = project_memberships
        self.alternate_identities = alternate_identities
        self.properties = properties
        self.id = id


class UserAlternateIdentities(msrest.serialization.Model):
    """UserAlternateIdentities.

    :param azure_resource_manager:
    :type azure_resource_manager: ~teamcloud.models.AlternateIdentity
    :param azure_dev_ops:
    :type azure_dev_ops: ~teamcloud.models.AlternateIdentity
    :param git_hub:
    :type git_hub: ~teamcloud.models.AlternateIdentity
    """

    _attribute_map = {
        'azure_resource_manager': {'key': 'AzureResourceManager', 'type': 'AlternateIdentity'},
        'azure_dev_ops': {'key': 'AzureDevOps', 'type': 'AlternateIdentity'},
        'git_hub': {'key': 'GitHub', 'type': 'AlternateIdentity'},
    }

    def __init__(
        self,
        *,
        azure_resource_manager: Optional["AlternateIdentity"] = None,
        azure_dev_ops: Optional["AlternateIdentity"] = None,
        git_hub: Optional["AlternateIdentity"] = None,
        **kwargs
    ):
        super(UserAlternateIdentities, self).__init__(**kwargs)
        self.azure_resource_manager = azure_resource_manager
        self.azure_dev_ops = azure_dev_ops
        self.git_hub = git_hub


class UserDataResult(msrest.serialization.Model):
    """UserDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.User
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'User'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        data: Optional["User"] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(UserDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = data
        self.location = location


class UserDefinition(msrest.serialization.Model):
    """UserDefinition.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required.
    :type identifier: str
    :param role: Required.
    :type role: str
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    """

    _validation = {
        'identifier': {'required': True},
        'role': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        identifier: str,
        role: str,
        properties: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(UserDefinition, self).__init__(**kwargs)
        self.identifier = identifier
        self.role = role
        self.properties = properties


class UserListDataResult(msrest.serialization.Model):
    """UserListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.User]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[User]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        status: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(UserListDataResult, self).__init__(**kwargs)
        self.code = code
        self.status = status
        self.data = None
        self.location = location


class ValidationError(msrest.serialization.Model):
    """ValidationError.

    :param field:
    :type field: str
    :param message:
    :type message: str
    """

    _attribute_map = {
        'field': {'key': 'field', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        field: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(ValidationError, self).__init__(**kwargs)
        self.field = field
        self.message = message
