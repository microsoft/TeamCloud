# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class AdapterInformation(msrest.serialization.Model):
    """AdapterInformation.

    :ivar type: Known values are: "AzureResourceManager", "AzureDevOps", "GitHub", "Kubernetes".
    :vartype type: str or ~teamcloud.models.AdapterInformationType
    :ivar display_name:
    :vartype display_name: str
    :ivar input_data_schema:
    :vartype input_data_schema: str
    :ivar input_data_form:
    :vartype input_data_form: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'input_data_schema': {'key': 'inputDataSchema', 'type': 'str'},
        'input_data_form': {'key': 'inputDataForm', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: Known values are: "AzureResourceManager", "AzureDevOps", "GitHub", "Kubernetes".
        :paramtype type: str or ~teamcloud.models.AdapterInformationType
        :keyword display_name:
        :paramtype display_name: str
        :keyword input_data_schema:
        :paramtype input_data_schema: str
        :keyword input_data_form:
        :paramtype input_data_form: str
        """
        super(AdapterInformation, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.display_name = kwargs.get('display_name', None)
        self.input_data_schema = kwargs.get('input_data_schema', None)
        self.input_data_form = kwargs.get('input_data_form', None)


class AdapterInformationListDataResult(msrest.serialization.Model):
    """AdapterInformationListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.AdapterInformation]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[AdapterInformation]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(AdapterInformationListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class AlternateIdentity(msrest.serialization.Model):
    """AlternateIdentity.

    :ivar login:
    :vartype login: str
    """

    _attribute_map = {
        'login': {'key': 'login', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword login:
        :paramtype login: str
        """
        super(AlternateIdentity, self).__init__(**kwargs)
        self.login = kwargs.get('login', None)


class CommandAuditEntity(msrest.serialization.Model):
    """CommandAuditEntity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar partition_key:
    :vartype partition_key: str
    :ivar row_key:
    :vartype row_key: str
    :ivar timestamp:
    :vartype timestamp: ~datetime.datetime
    :ivar e_tag: Any object.
    :vartype e_tag: any
    :ivar command_id:
    :vartype command_id: str
    :ivar organization_id:
    :vartype organization_id: str
    :ivar command_json:
    :vartype command_json: str
    :ivar result_json:
    :vartype result_json: str
    :ivar project_id:
    :vartype project_id: str
    :ivar user_id:
    :vartype user_id: str
    :ivar parent_id:
    :vartype parent_id: str
    :ivar command:
    :vartype command: str
    :ivar component_task:
    :vartype component_task: str
    :ivar runtime_status: Known values are: "Running", "Completed", "ContinuedAsNew", "Failed",
     "Canceled", "Terminated", "Pending", "Unknown".
    :vartype runtime_status: str or ~teamcloud.models.CommandAuditEntityRuntimeStatus
    :ivar custom_status:
    :vartype custom_status: str
    :ivar errors:
    :vartype errors: str
    :ivar created:
    :vartype created: ~datetime.datetime
    :ivar updated:
    :vartype updated: ~datetime.datetime
    """

    _validation = {
        'command_id': {'readonly': True},
        'organization_id': {'readonly': True},
    }

    _attribute_map = {
        'partition_key': {'key': 'partitionKey', 'type': 'str'},
        'row_key': {'key': 'rowKey', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'object'},
        'command_id': {'key': 'commandId', 'type': 'str'},
        'organization_id': {'key': 'organizationId', 'type': 'str'},
        'command_json': {'key': 'commandJson', 'type': 'str'},
        'result_json': {'key': 'resultJson', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'command': {'key': 'command', 'type': 'str'},
        'component_task': {'key': 'componentTask', 'type': 'str'},
        'runtime_status': {'key': 'runtimeStatus', 'type': 'str'},
        'custom_status': {'key': 'customStatus', 'type': 'str'},
        'errors': {'key': 'errors', 'type': 'str'},
        'created': {'key': 'created', 'type': 'iso-8601'},
        'updated': {'key': 'updated', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword partition_key:
        :paramtype partition_key: str
        :keyword row_key:
        :paramtype row_key: str
        :keyword timestamp:
        :paramtype timestamp: ~datetime.datetime
        :keyword e_tag: Any object.
        :paramtype e_tag: any
        :keyword command_json:
        :paramtype command_json: str
        :keyword result_json:
        :paramtype result_json: str
        :keyword project_id:
        :paramtype project_id: str
        :keyword user_id:
        :paramtype user_id: str
        :keyword parent_id:
        :paramtype parent_id: str
        :keyword command:
        :paramtype command: str
        :keyword component_task:
        :paramtype component_task: str
        :keyword runtime_status: Known values are: "Running", "Completed", "ContinuedAsNew", "Failed",
         "Canceled", "Terminated", "Pending", "Unknown".
        :paramtype runtime_status: str or ~teamcloud.models.CommandAuditEntityRuntimeStatus
        :keyword custom_status:
        :paramtype custom_status: str
        :keyword errors:
        :paramtype errors: str
        :keyword created:
        :paramtype created: ~datetime.datetime
        :keyword updated:
        :paramtype updated: ~datetime.datetime
        """
        super(CommandAuditEntity, self).__init__(**kwargs)
        self.partition_key = kwargs.get('partition_key', None)
        self.row_key = kwargs.get('row_key', None)
        self.timestamp = kwargs.get('timestamp', None)
        self.e_tag = kwargs.get('e_tag', None)
        self.command_id = None
        self.organization_id = None
        self.command_json = kwargs.get('command_json', None)
        self.result_json = kwargs.get('result_json', None)
        self.project_id = kwargs.get('project_id', None)
        self.user_id = kwargs.get('user_id', None)
        self.parent_id = kwargs.get('parent_id', None)
        self.command = kwargs.get('command', None)
        self.component_task = kwargs.get('component_task', None)
        self.runtime_status = kwargs.get('runtime_status', None)
        self.custom_status = kwargs.get('custom_status', None)
        self.errors = kwargs.get('errors', None)
        self.created = kwargs.get('created', None)
        self.updated = kwargs.get('updated', None)


class CommandAuditEntityDataResult(msrest.serialization.Model):
    """CommandAuditEntityDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.CommandAuditEntity
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'CommandAuditEntity'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.CommandAuditEntity
        :keyword location:
        :paramtype location: str
        """
        super(CommandAuditEntityDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class CommandAuditEntityListDataResult(msrest.serialization.Model):
    """CommandAuditEntityListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.CommandAuditEntity]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[CommandAuditEntity]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(CommandAuditEntityListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class Component(msrest.serialization.Model):
    """Component.

    All required parameters must be populated in order to send to Azure.

    :ivar href:
    :vartype href: str
    :ivar organization: Required.
    :vartype organization: str
    :ivar organization_name: Required.
    :vartype organization_name: str
    :ivar template_id: Required.
    :vartype template_id: str
    :ivar project_id: Required.
    :vartype project_id: str
    :ivar project_name: Required.
    :vartype project_name: str
    :ivar creator: Required.
    :vartype creator: str
    :ivar display_name:
    :vartype display_name: str
    :ivar description:
    :vartype description: str
    :ivar input_json:
    :vartype input_json: str
    :ivar value_json:
    :vartype value_json: str
    :ivar type: Required. Known values are: "Environment", "Repository", "Namespace".
    :vartype type: str or ~teamcloud.models.ComponentType
    :ivar resource_id:
    :vartype resource_id: str
    :ivar resource_url:
    :vartype resource_url: str
    :ivar resource_state: Known values are: "Pending", "Initializing", "Provisioning",
     "Provisioned", "Deprovisioning", "Deprovisioned", "Failed".
    :vartype resource_state: str or ~teamcloud.models.ComponentResourceState
    :ivar deployment_scope_id:
    :vartype deployment_scope_id: str
    :ivar deployment_scope_name:
    :vartype deployment_scope_name: str
    :ivar identity_id:
    :vartype identity_id: str
    :ivar deleted:
    :vartype deleted: ~datetime.datetime
    :ivar ttl:
    :vartype ttl: int
    :ivar slug: Required.
    :vartype slug: str
    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        'organization': {'required': True},
        'organization_name': {'required': True},
        'template_id': {'required': True},
        'project_id': {'required': True},
        'project_name': {'required': True},
        'creator': {'required': True},
        'type': {'required': True},
        'slug': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'href': {'key': 'href', 'type': 'str'},
        'organization': {'key': 'organization', 'type': 'str'},
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'template_id': {'key': 'templateId', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'project_name': {'key': 'projectName', 'type': 'str'},
        'creator': {'key': 'creator', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
        'value_json': {'key': 'valueJson', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_url': {'key': 'resourceUrl', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
        'deployment_scope_name': {'key': 'deploymentScopeName', 'type': 'str'},
        'identity_id': {'key': 'identityId', 'type': 'str'},
        'deleted': {'key': 'deleted', 'type': 'iso-8601'},
        'ttl': {'key': 'ttl', 'type': 'int'},
        'slug': {'key': 'slug', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword href:
        :paramtype href: str
        :keyword organization: Required.
        :paramtype organization: str
        :keyword organization_name: Required.
        :paramtype organization_name: str
        :keyword template_id: Required.
        :paramtype template_id: str
        :keyword project_id: Required.
        :paramtype project_id: str
        :keyword project_name: Required.
        :paramtype project_name: str
        :keyword creator: Required.
        :paramtype creator: str
        :keyword display_name:
        :paramtype display_name: str
        :keyword description:
        :paramtype description: str
        :keyword input_json:
        :paramtype input_json: str
        :keyword value_json:
        :paramtype value_json: str
        :keyword type: Required. Known values are: "Environment", "Repository", "Namespace".
        :paramtype type: str or ~teamcloud.models.ComponentType
        :keyword resource_id:
        :paramtype resource_id: str
        :keyword resource_url:
        :paramtype resource_url: str
        :keyword resource_state: Known values are: "Pending", "Initializing", "Provisioning",
         "Provisioned", "Deprovisioning", "Deprovisioned", "Failed".
        :paramtype resource_state: str or ~teamcloud.models.ComponentResourceState
        :keyword deployment_scope_id:
        :paramtype deployment_scope_id: str
        :keyword deployment_scope_name:
        :paramtype deployment_scope_name: str
        :keyword identity_id:
        :paramtype identity_id: str
        :keyword deleted:
        :paramtype deleted: ~datetime.datetime
        :keyword ttl:
        :paramtype ttl: int
        :keyword slug: Required.
        :paramtype slug: str
        :keyword id: Required.
        :paramtype id: str
        """
        super(Component, self).__init__(**kwargs)
        self.href = kwargs.get('href', None)
        self.organization = kwargs['organization']
        self.organization_name = kwargs['organization_name']
        self.template_id = kwargs['template_id']
        self.project_id = kwargs['project_id']
        self.project_name = kwargs['project_name']
        self.creator = kwargs['creator']
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.input_json = kwargs.get('input_json', None)
        self.value_json = kwargs.get('value_json', None)
        self.type = kwargs['type']
        self.resource_id = kwargs.get('resource_id', None)
        self.resource_url = kwargs.get('resource_url', None)
        self.resource_state = kwargs.get('resource_state', None)
        self.deployment_scope_id = kwargs.get('deployment_scope_id', None)
        self.deployment_scope_name = kwargs.get('deployment_scope_name', None)
        self.identity_id = kwargs.get('identity_id', None)
        self.deleted = kwargs.get('deleted', None)
        self.ttl = kwargs.get('ttl', None)
        self.slug = kwargs['slug']
        self.id = kwargs['id']


class ComponentDataResult(msrest.serialization.Model):
    """ComponentDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.Component
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Component'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.Component
        :keyword location:
        :paramtype location: str
        """
        super(ComponentDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ComponentDefinition(msrest.serialization.Model):
    """ComponentDefinition.

    All required parameters must be populated in order to send to Azure.

    :ivar template_id: Required.
    :vartype template_id: str
    :ivar display_name: Required.
    :vartype display_name: str
    :ivar input_json:
    :vartype input_json: str
    :ivar deployment_scope_id:
    :vartype deployment_scope_id: str
    """

    _validation = {
        'template_id': {'required': True},
        'display_name': {'required': True},
    }

    _attribute_map = {
        'template_id': {'key': 'templateId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword template_id: Required.
        :paramtype template_id: str
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword input_json:
        :paramtype input_json: str
        :keyword deployment_scope_id:
        :paramtype deployment_scope_id: str
        """
        super(ComponentDefinition, self).__init__(**kwargs)
        self.template_id = kwargs['template_id']
        self.display_name = kwargs['display_name']
        self.input_json = kwargs.get('input_json', None)
        self.deployment_scope_id = kwargs.get('deployment_scope_id', None)


class ComponentListDataResult(msrest.serialization.Model):
    """ComponentListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Component]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Component]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(ComponentListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ComponentTask(msrest.serialization.Model):
    """ComponentTask.

    All required parameters must be populated in order to send to Azure.

    :ivar organization: Required.
    :vartype organization: str
    :ivar organization_name: Required.
    :vartype organization_name: str
    :ivar component_id: Required.
    :vartype component_id: str
    :ivar component_name: Required.
    :vartype component_name: str
    :ivar project_id: Required.
    :vartype project_id: str
    :ivar project_name: Required.
    :vartype project_name: str
    :ivar requested_by:
    :vartype requested_by: str
    :ivar schedule_id:
    :vartype schedule_id: str
    :ivar type: Known values are: "Custom", "Create", "Delete".
    :vartype type: str or ~teamcloud.models.ComponentTaskType
    :ivar type_name:
    :vartype type_name: str
    :ivar created:
    :vartype created: ~datetime.datetime
    :ivar started:
    :vartype started: ~datetime.datetime
    :ivar finished:
    :vartype finished: ~datetime.datetime
    :ivar input_json:
    :vartype input_json: str
    :ivar output:
    :vartype output: str
    :ivar resource_id:
    :vartype resource_id: str
    :ivar task_state: Known values are: "Pending", "Initializing", "Processing", "Succeeded",
     "Canceled", "Failed".
    :vartype task_state: str or ~teamcloud.models.ComponentTaskState
    :ivar exit_code:
    :vartype exit_code: int
    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        'organization': {'required': True},
        'organization_name': {'required': True},
        'component_id': {'required': True},
        'component_name': {'required': True},
        'project_id': {'required': True},
        'project_name': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'component_id': {'key': 'componentId', 'type': 'str'},
        'component_name': {'key': 'componentName', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'project_name': {'key': 'projectName', 'type': 'str'},
        'requested_by': {'key': 'requestedBy', 'type': 'str'},
        'schedule_id': {'key': 'scheduleId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'type_name': {'key': 'typeName', 'type': 'str'},
        'created': {'key': 'created', 'type': 'iso-8601'},
        'started': {'key': 'started', 'type': 'iso-8601'},
        'finished': {'key': 'finished', 'type': 'iso-8601'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
        'output': {'key': 'output', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'task_state': {'key': 'taskState', 'type': 'str'},
        'exit_code': {'key': 'exitCode', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword organization: Required.
        :paramtype organization: str
        :keyword organization_name: Required.
        :paramtype organization_name: str
        :keyword component_id: Required.
        :paramtype component_id: str
        :keyword component_name: Required.
        :paramtype component_name: str
        :keyword project_id: Required.
        :paramtype project_id: str
        :keyword project_name: Required.
        :paramtype project_name: str
        :keyword requested_by:
        :paramtype requested_by: str
        :keyword schedule_id:
        :paramtype schedule_id: str
        :keyword type: Known values are: "Custom", "Create", "Delete".
        :paramtype type: str or ~teamcloud.models.ComponentTaskType
        :keyword type_name:
        :paramtype type_name: str
        :keyword created:
        :paramtype created: ~datetime.datetime
        :keyword started:
        :paramtype started: ~datetime.datetime
        :keyword finished:
        :paramtype finished: ~datetime.datetime
        :keyword input_json:
        :paramtype input_json: str
        :keyword output:
        :paramtype output: str
        :keyword resource_id:
        :paramtype resource_id: str
        :keyword task_state: Known values are: "Pending", "Initializing", "Processing", "Succeeded",
         "Canceled", "Failed".
        :paramtype task_state: str or ~teamcloud.models.ComponentTaskState
        :keyword exit_code:
        :paramtype exit_code: int
        :keyword id: Required.
        :paramtype id: str
        """
        super(ComponentTask, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.organization_name = kwargs['organization_name']
        self.component_id = kwargs['component_id']
        self.component_name = kwargs['component_name']
        self.project_id = kwargs['project_id']
        self.project_name = kwargs['project_name']
        self.requested_by = kwargs.get('requested_by', None)
        self.schedule_id = kwargs.get('schedule_id', None)
        self.type = kwargs.get('type', None)
        self.type_name = kwargs.get('type_name', None)
        self.created = kwargs.get('created', None)
        self.started = kwargs.get('started', None)
        self.finished = kwargs.get('finished', None)
        self.input_json = kwargs.get('input_json', None)
        self.output = kwargs.get('output', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.task_state = kwargs.get('task_state', None)
        self.exit_code = kwargs.get('exit_code', None)
        self.id = kwargs['id']


class ComponentTaskDataResult(msrest.serialization.Model):
    """ComponentTaskDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.ComponentTask
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ComponentTask'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.ComponentTask
        :keyword location:
        :paramtype location: str
        """
        super(ComponentTaskDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ComponentTaskDefinition(msrest.serialization.Model):
    """ComponentTaskDefinition.

    All required parameters must be populated in order to send to Azure.

    :ivar task_id: Required.
    :vartype task_id: str
    :ivar input_json:
    :vartype input_json: str
    """

    _validation = {
        'task_id': {'required': True},
    }

    _attribute_map = {
        'task_id': {'key': 'taskId', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword task_id: Required.
        :paramtype task_id: str
        :keyword input_json:
        :paramtype input_json: str
        """
        super(ComponentTaskDefinition, self).__init__(**kwargs)
        self.task_id = kwargs['task_id']
        self.input_json = kwargs.get('input_json', None)


class ComponentTaskListDataResult(msrest.serialization.Model):
    """ComponentTaskListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ComponentTask]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ComponentTask]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(ComponentTaskListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ComponentTaskReference(msrest.serialization.Model):
    """ComponentTaskReference.

    :ivar component_id:
    :vartype component_id: str
    :ivar component_name:
    :vartype component_name: str
    :ivar component_task_template_id:
    :vartype component_task_template_id: str
    :ivar input_json:
    :vartype input_json: str
    """

    _attribute_map = {
        'component_id': {'key': 'componentId', 'type': 'str'},
        'component_name': {'key': 'componentName', 'type': 'str'},
        'component_task_template_id': {'key': 'componentTaskTemplateId', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword component_id:
        :paramtype component_id: str
        :keyword component_name:
        :paramtype component_name: str
        :keyword component_task_template_id:
        :paramtype component_task_template_id: str
        :keyword input_json:
        :paramtype input_json: str
        """
        super(ComponentTaskReference, self).__init__(**kwargs)
        self.component_id = kwargs.get('component_id', None)
        self.component_name = kwargs.get('component_name', None)
        self.component_task_template_id = kwargs.get('component_task_template_id', None)
        self.input_json = kwargs.get('input_json', None)


class ComponentTaskRunner(msrest.serialization.Model):
    """ComponentTaskRunner.

    :ivar id:
    :vartype id: str
    :ivar web_server:
    :vartype web_server: bool
    :ivar with_property: Dictionary of :code:`<string>`.
    :vartype with_property: dict[str, str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'web_server': {'key': 'webServer', 'type': 'bool'},
        'with_property': {'key': 'with', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword web_server:
        :paramtype web_server: bool
        :keyword with_property: Dictionary of :code:`<string>`.
        :paramtype with_property: dict[str, str]
        """
        super(ComponentTaskRunner, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.web_server = kwargs.get('web_server', None)
        self.with_property = kwargs.get('with_property', None)


class ComponentTaskTemplate(msrest.serialization.Model):
    """ComponentTaskTemplate.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id:
    :vartype id: str
    :ivar display_name:
    :vartype display_name: str
    :ivar description:
    :vartype description: str
    :ivar input_json_schema:
    :vartype input_json_schema: str
    :ivar type: Known values are: "Custom", "Create", "Delete".
    :vartype type: str or ~teamcloud.models.ComponentTaskTemplateType
    :ivar type_name:
    :vartype type_name: str
    """

    _validation = {
        'type_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'input_json_schema': {'key': 'inputJsonSchema', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'type_name': {'key': 'typeName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword display_name:
        :paramtype display_name: str
        :keyword description:
        :paramtype description: str
        :keyword input_json_schema:
        :paramtype input_json_schema: str
        :keyword type: Known values are: "Custom", "Create", "Delete".
        :paramtype type: str or ~teamcloud.models.ComponentTaskTemplateType
        """
        super(ComponentTaskTemplate, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.input_json_schema = kwargs.get('input_json_schema', None)
        self.type = kwargs.get('type', None)
        self.type_name = None


class ComponentTemplate(msrest.serialization.Model):
    """ComponentTemplate.

    All required parameters must be populated in order to send to Azure.

    :ivar organization: Required.
    :vartype organization: str
    :ivar organization_name: Required.
    :vartype organization_name: str
    :ivar parent_id: Required.
    :vartype parent_id: str
    :ivar display_name:
    :vartype display_name: str
    :ivar description:
    :vartype description: str
    :ivar repository: Required.
    :vartype repository: ~teamcloud.models.RepositoryReference
    :ivar permissions:
    :vartype permissions: ~teamcloud.models.ComponentTemplatePermissions
    :ivar input_json_schema:
    :vartype input_json_schema: str
    :ivar tasks:
    :vartype tasks: list[~teamcloud.models.ComponentTaskTemplate]
    :ivar task_runner:
    :vartype task_runner: ~teamcloud.models.ComponentTaskRunner
    :ivar type: Required. Known values are: "Environment", "Repository", "Namespace".
    :vartype type: str or ~teamcloud.models.ComponentTemplateType
    :ivar folder:
    :vartype folder: str
    :ivar configuration: Anything.
    :vartype configuration: any
    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        'organization': {'required': True},
        'organization_name': {'required': True},
        'parent_id': {'required': True},
        'repository': {'required': True},
        'type': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'RepositoryReference'},
        'permissions': {'key': 'permissions', 'type': 'ComponentTemplatePermissions'},
        'input_json_schema': {'key': 'inputJsonSchema', 'type': 'str'},
        'tasks': {'key': 'tasks', 'type': '[ComponentTaskTemplate]'},
        'task_runner': {'key': 'taskRunner', 'type': 'ComponentTaskRunner'},
        'type': {'key': 'type', 'type': 'str'},
        'folder': {'key': 'folder', 'type': 'str'},
        'configuration': {'key': 'configuration', 'type': 'object'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword organization: Required.
        :paramtype organization: str
        :keyword organization_name: Required.
        :paramtype organization_name: str
        :keyword parent_id: Required.
        :paramtype parent_id: str
        :keyword display_name:
        :paramtype display_name: str
        :keyword description:
        :paramtype description: str
        :keyword repository: Required.
        :paramtype repository: ~teamcloud.models.RepositoryReference
        :keyword permissions:
        :paramtype permissions: ~teamcloud.models.ComponentTemplatePermissions
        :keyword input_json_schema:
        :paramtype input_json_schema: str
        :keyword tasks:
        :paramtype tasks: list[~teamcloud.models.ComponentTaskTemplate]
        :keyword task_runner:
        :paramtype task_runner: ~teamcloud.models.ComponentTaskRunner
        :keyword type: Required. Known values are: "Environment", "Repository", "Namespace".
        :paramtype type: str or ~teamcloud.models.ComponentTemplateType
        :keyword folder:
        :paramtype folder: str
        :keyword configuration: Anything.
        :paramtype configuration: any
        :keyword id: Required.
        :paramtype id: str
        """
        super(ComponentTemplate, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.organization_name = kwargs['organization_name']
        self.parent_id = kwargs['parent_id']
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.repository = kwargs['repository']
        self.permissions = kwargs.get('permissions', None)
        self.input_json_schema = kwargs.get('input_json_schema', None)
        self.tasks = kwargs.get('tasks', None)
        self.task_runner = kwargs.get('task_runner', None)
        self.type = kwargs['type']
        self.folder = kwargs.get('folder', None)
        self.configuration = kwargs.get('configuration', None)
        self.id = kwargs['id']


class ComponentTemplateDataResult(msrest.serialization.Model):
    """ComponentTemplateDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.ComponentTemplate
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ComponentTemplate'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.ComponentTemplate
        :keyword location:
        :paramtype location: str
        """
        super(ComponentTemplateDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ComponentTemplateListDataResult(msrest.serialization.Model):
    """ComponentTemplateListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ComponentTemplate]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ComponentTemplate]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(ComponentTemplateListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ComponentTemplatePermissions(msrest.serialization.Model):
    """ComponentTemplatePermissions.

    :ivar none:
    :vartype none: list[str]
    :ivar member:
    :vartype member: list[str]
    :ivar admin:
    :vartype admin: list[str]
    :ivar owner:
    :vartype owner: list[str]
    :ivar adapter:
    :vartype adapter: list[str]
    """

    _attribute_map = {
        'none': {'key': 'None', 'type': '[str]'},
        'member': {'key': 'Member', 'type': '[str]'},
        'admin': {'key': 'Admin', 'type': '[str]'},
        'owner': {'key': 'Owner', 'type': '[str]'},
        'adapter': {'key': 'Adapter', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword none:
        :paramtype none: list[str]
        :keyword member:
        :paramtype member: list[str]
        :keyword admin:
        :paramtype admin: list[str]
        :keyword owner:
        :paramtype owner: list[str]
        :keyword adapter:
        :paramtype adapter: list[str]
        """
        super(ComponentTemplatePermissions, self).__init__(**kwargs)
        self.none = kwargs.get('none', None)
        self.member = kwargs.get('member', None)
        self.admin = kwargs.get('admin', None)
        self.owner = kwargs.get('owner', None)
        self.adapter = kwargs.get('adapter', None)


class DeploymentScope(msrest.serialization.Model):
    """DeploymentScope.

    All required parameters must be populated in order to send to Azure.

    :ivar organization: Required.
    :vartype organization: str
    :ivar organization_name: Required.
    :vartype organization_name: str
    :ivar display_name: Required.
    :vartype display_name: str
    :ivar slug: Required.
    :vartype slug: str
    :ivar is_default: Required.
    :vartype is_default: bool
    :ivar type: Required. Known values are: "AzureResourceManager", "AzureDevOps", "GitHub",
     "Kubernetes".
    :vartype type: str or ~teamcloud.models.DeploymentScopeType
    :ivar input_data_schema:
    :vartype input_data_schema: str
    :ivar input_data:
    :vartype input_data: str
    :ivar management_group_id:
    :vartype management_group_id: str
    :ivar subscription_ids:
    :vartype subscription_ids: list[str]
    :ivar authorizable:
    :vartype authorizable: bool
    :ivar authorized:
    :vartype authorized: bool
    :ivar authorize_url:
    :vartype authorize_url: str
    :ivar component_types:
    :vartype component_types: list[str or ~teamcloud.models.DeploymentScopeComponentTypesItem]
    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        'organization': {'required': True},
        'organization_name': {'required': True},
        'display_name': {'required': True},
        'slug': {'required': True},
        'is_default': {'required': True},
        'type': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'type': {'key': 'type', 'type': 'str'},
        'input_data_schema': {'key': 'inputDataSchema', 'type': 'str'},
        'input_data': {'key': 'inputData', 'type': 'str'},
        'management_group_id': {'key': 'managementGroupId', 'type': 'str'},
        'subscription_ids': {'key': 'subscriptionIds', 'type': '[str]'},
        'authorizable': {'key': 'authorizable', 'type': 'bool'},
        'authorized': {'key': 'authorized', 'type': 'bool'},
        'authorize_url': {'key': 'authorizeUrl', 'type': 'str'},
        'component_types': {'key': 'componentTypes', 'type': '[str]'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword organization: Required.
        :paramtype organization: str
        :keyword organization_name: Required.
        :paramtype organization_name: str
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword slug: Required.
        :paramtype slug: str
        :keyword is_default: Required.
        :paramtype is_default: bool
        :keyword type: Required. Known values are: "AzureResourceManager", "AzureDevOps", "GitHub",
         "Kubernetes".
        :paramtype type: str or ~teamcloud.models.DeploymentScopeType
        :keyword input_data_schema:
        :paramtype input_data_schema: str
        :keyword input_data:
        :paramtype input_data: str
        :keyword management_group_id:
        :paramtype management_group_id: str
        :keyword subscription_ids:
        :paramtype subscription_ids: list[str]
        :keyword authorizable:
        :paramtype authorizable: bool
        :keyword authorized:
        :paramtype authorized: bool
        :keyword authorize_url:
        :paramtype authorize_url: str
        :keyword component_types:
        :paramtype component_types: list[str or ~teamcloud.models.DeploymentScopeComponentTypesItem]
        :keyword id: Required.
        :paramtype id: str
        """
        super(DeploymentScope, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.organization_name = kwargs['organization_name']
        self.display_name = kwargs['display_name']
        self.slug = kwargs['slug']
        self.is_default = kwargs['is_default']
        self.type = kwargs['type']
        self.input_data_schema = kwargs.get('input_data_schema', None)
        self.input_data = kwargs.get('input_data', None)
        self.management_group_id = kwargs.get('management_group_id', None)
        self.subscription_ids = kwargs.get('subscription_ids', None)
        self.authorizable = kwargs.get('authorizable', None)
        self.authorized = kwargs.get('authorized', None)
        self.authorize_url = kwargs.get('authorize_url', None)
        self.component_types = kwargs.get('component_types', None)
        self.id = kwargs['id']


class DeploymentScopeDataResult(msrest.serialization.Model):
    """DeploymentScopeDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.DeploymentScope
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'DeploymentScope'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.DeploymentScope
        :keyword location:
        :paramtype location: str
        """
        super(DeploymentScopeDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class DeploymentScopeDefinition(msrest.serialization.Model):
    """DeploymentScopeDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: Required.
    :vartype display_name: str
    :ivar type: Required. Known values are: "AzureResourceManager", "AzureDevOps", "GitHub",
     "Kubernetes".
    :vartype type: str or ~teamcloud.models.DeploymentScopeDefinitionType
    :ivar slug:
    :vartype slug: str
    :ivar input_data:
    :vartype input_data: str
    :ivar is_default:
    :vartype is_default: bool
    """

    _validation = {
        'display_name': {'required': True},
        'type': {'required': True},
        'slug': {'readonly': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'input_data': {'key': 'inputData', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword type: Required. Known values are: "AzureResourceManager", "AzureDevOps", "GitHub",
         "Kubernetes".
        :paramtype type: str or ~teamcloud.models.DeploymentScopeDefinitionType
        :keyword input_data:
        :paramtype input_data: str
        :keyword is_default:
        :paramtype is_default: bool
        """
        super(DeploymentScopeDefinition, self).__init__(**kwargs)
        self.display_name = kwargs['display_name']
        self.type = kwargs['type']
        self.slug = None
        self.input_data = kwargs.get('input_data', None)
        self.is_default = kwargs.get('is_default', None)


class DeploymentScopeListDataResult(msrest.serialization.Model):
    """DeploymentScopeListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.DeploymentScope]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[DeploymentScope]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(DeploymentScopeListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ErrorResult(msrest.serialization.Model):
    """ErrorResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar errors:
    :vartype errors: list[~teamcloud.models.ResultError]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ResultError]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword errors:
        :paramtype errors: list[~teamcloud.models.ResultError]
        """
        super(ErrorResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.errors = kwargs.get('errors', None)


class Organization(msrest.serialization.Model):
    """Organization.

    All required parameters must be populated in order to send to Azure.

    :ivar tenant: Required.
    :vartype tenant: str
    :ivar slug: Required.
    :vartype slug: str
    :ivar display_name: Required.
    :vartype display_name: str
    :ivar subscription_id: Required.
    :vartype subscription_id: str
    :ivar location: Required.
    :vartype location: str
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar resource_id:
    :vartype resource_id: str
    :ivar resource_state: Known values are: "Pending", "Initializing", "Provisioning",
     "Provisioned", "Deprovisioning", "Deprovisioned", "Failed".
    :vartype resource_state: str or ~teamcloud.models.OrganizationResourceState
    :ivar secrets_vault_id:
    :vartype secrets_vault_id: str
    :ivar gallery_id:
    :vartype gallery_id: str
    :ivar registry_id:
    :vartype registry_id: str
    :ivar storage_id:
    :vartype storage_id: str
    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        'tenant': {'required': True},
        'slug': {'required': True},
        'display_name': {'required': True},
        'subscription_id': {'required': True},
        'location': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'tenant': {'key': 'tenant', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'secrets_vault_id': {'key': 'secretsVaultId', 'type': 'str'},
        'gallery_id': {'key': 'galleryId', 'type': 'str'},
        'registry_id': {'key': 'registryId', 'type': 'str'},
        'storage_id': {'key': 'storageId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tenant: Required.
        :paramtype tenant: str
        :keyword slug: Required.
        :paramtype slug: str
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword subscription_id: Required.
        :paramtype subscription_id: str
        :keyword location: Required.
        :paramtype location: str
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword resource_id:
        :paramtype resource_id: str
        :keyword resource_state: Known values are: "Pending", "Initializing", "Provisioning",
         "Provisioned", "Deprovisioning", "Deprovisioned", "Failed".
        :paramtype resource_state: str or ~teamcloud.models.OrganizationResourceState
        :keyword secrets_vault_id:
        :paramtype secrets_vault_id: str
        :keyword gallery_id:
        :paramtype gallery_id: str
        :keyword registry_id:
        :paramtype registry_id: str
        :keyword storage_id:
        :paramtype storage_id: str
        :keyword id: Required.
        :paramtype id: str
        """
        super(Organization, self).__init__(**kwargs)
        self.tenant = kwargs['tenant']
        self.slug = kwargs['slug']
        self.display_name = kwargs['display_name']
        self.subscription_id = kwargs['subscription_id']
        self.location = kwargs['location']
        self.tags = kwargs.get('tags', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.resource_state = kwargs.get('resource_state', None)
        self.secrets_vault_id = kwargs.get('secrets_vault_id', None)
        self.gallery_id = kwargs.get('gallery_id', None)
        self.registry_id = kwargs.get('registry_id', None)
        self.storage_id = kwargs.get('storage_id', None)
        self.id = kwargs['id']


class OrganizationDataResult(msrest.serialization.Model):
    """OrganizationDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.Organization
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Organization'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.Organization
        :keyword location:
        :paramtype location: str
        """
        super(OrganizationDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class OrganizationDefinition(msrest.serialization.Model):
    """OrganizationDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar slug:
    :vartype slug: str
    :ivar display_name: Required.
    :vartype display_name: str
    :ivar subscription_id: Required.
    :vartype subscription_id: str
    :ivar location: Required.
    :vartype location: str
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'slug': {'readonly': True},
        'display_name': {'required': True},
        'subscription_id': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword subscription_id: Required.
        :paramtype subscription_id: str
        :keyword location: Required.
        :paramtype location: str
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        """
        super(OrganizationDefinition, self).__init__(**kwargs)
        self.slug = None
        self.display_name = kwargs['display_name']
        self.subscription_id = kwargs['subscription_id']
        self.location = kwargs['location']
        self.tags = kwargs.get('tags', None)


class OrganizationListDataResult(msrest.serialization.Model):
    """OrganizationListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Organization]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Organization]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(OrganizationListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class Project(msrest.serialization.Model):
    """Project.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar organization: Required.
    :vartype organization: str
    :ivar organization_name: Required.
    :vartype organization_name: str
    :ivar slug: Required.
    :vartype slug: str
    :ivar display_name: Required.
    :vartype display_name: str
    :ivar template: Required.
    :vartype template: str
    :ivar template_input:
    :vartype template_input: str
    :ivar users:
    :vartype users: list[~teamcloud.models.User]
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar resource_id:
    :vartype resource_id: str
    :ivar resource_state: Known values are: "Pending", "Initializing", "Provisioning",
     "Provisioned", "Deprovisioning", "Deprovisioned", "Failed".
    :vartype resource_state: str or ~teamcloud.models.ProjectResourceState
    :ivar vault_id:
    :vartype vault_id: str
    :ivar shared_vault_id:
    :vartype shared_vault_id: str
    :ivar secrets_vault_id:
    :vartype secrets_vault_id: str
    :ivar storage_id:
    :vartype storage_id: str
    :ivar deleted:
    :vartype deleted: ~datetime.datetime
    :ivar ttl:
    :vartype ttl: int
    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        'organization': {'required': True},
        'organization_name': {'required': True},
        'slug': {'required': True},
        'display_name': {'required': True},
        'template': {'required': True},
        'vault_id': {'readonly': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'template': {'key': 'template', 'type': 'str'},
        'template_input': {'key': 'templateInput', 'type': 'str'},
        'users': {'key': 'users', 'type': '[User]'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'vault_id': {'key': 'vaultId', 'type': 'str'},
        'shared_vault_id': {'key': 'sharedVaultId', 'type': 'str'},
        'secrets_vault_id': {'key': 'secretsVaultId', 'type': 'str'},
        'storage_id': {'key': 'storageId', 'type': 'str'},
        'deleted': {'key': 'deleted', 'type': 'iso-8601'},
        'ttl': {'key': 'ttl', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword organization: Required.
        :paramtype organization: str
        :keyword organization_name: Required.
        :paramtype organization_name: str
        :keyword slug: Required.
        :paramtype slug: str
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword template: Required.
        :paramtype template: str
        :keyword template_input:
        :paramtype template_input: str
        :keyword users:
        :paramtype users: list[~teamcloud.models.User]
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword resource_id:
        :paramtype resource_id: str
        :keyword resource_state: Known values are: "Pending", "Initializing", "Provisioning",
         "Provisioned", "Deprovisioning", "Deprovisioned", "Failed".
        :paramtype resource_state: str or ~teamcloud.models.ProjectResourceState
        :keyword shared_vault_id:
        :paramtype shared_vault_id: str
        :keyword secrets_vault_id:
        :paramtype secrets_vault_id: str
        :keyword storage_id:
        :paramtype storage_id: str
        :keyword deleted:
        :paramtype deleted: ~datetime.datetime
        :keyword ttl:
        :paramtype ttl: int
        :keyword id: Required.
        :paramtype id: str
        """
        super(Project, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.organization_name = kwargs['organization_name']
        self.slug = kwargs['slug']
        self.display_name = kwargs['display_name']
        self.template = kwargs['template']
        self.template_input = kwargs.get('template_input', None)
        self.users = kwargs.get('users', None)
        self.tags = kwargs.get('tags', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.resource_state = kwargs.get('resource_state', None)
        self.vault_id = None
        self.shared_vault_id = kwargs.get('shared_vault_id', None)
        self.secrets_vault_id = kwargs.get('secrets_vault_id', None)
        self.storage_id = kwargs.get('storage_id', None)
        self.deleted = kwargs.get('deleted', None)
        self.ttl = kwargs.get('ttl', None)
        self.id = kwargs['id']


class ProjectDataResult(msrest.serialization.Model):
    """ProjectDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.Project
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Project'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.Project
        :keyword location:
        :paramtype location: str
        """
        super(ProjectDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProjectDefinition(msrest.serialization.Model):
    """ProjectDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar slug:
    :vartype slug: str
    :ivar display_name: Required.
    :vartype display_name: str
    :ivar template: Required.
    :vartype template: str
    :ivar template_input: Required.
    :vartype template_input: str
    :ivar users:
    :vartype users: list[~teamcloud.models.UserDefinition]
    """

    _validation = {
        'slug': {'readonly': True},
        'display_name': {'required': True},
        'template': {'required': True},
        'template_input': {'required': True},
    }

    _attribute_map = {
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'template': {'key': 'template', 'type': 'str'},
        'template_input': {'key': 'templateInput', 'type': 'str'},
        'users': {'key': 'users', 'type': '[UserDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword template: Required.
        :paramtype template: str
        :keyword template_input: Required.
        :paramtype template_input: str
        :keyword users:
        :paramtype users: list[~teamcloud.models.UserDefinition]
        """
        super(ProjectDefinition, self).__init__(**kwargs)
        self.slug = None
        self.display_name = kwargs['display_name']
        self.template = kwargs['template']
        self.template_input = kwargs['template_input']
        self.users = kwargs.get('users', None)


class ProjectIdentity(msrest.serialization.Model):
    """ProjectIdentity.

    All required parameters must be populated in order to send to Azure.

    :ivar project_id: Required.
    :vartype project_id: str
    :ivar project_name: Required.
    :vartype project_name: str
    :ivar organization: Required.
    :vartype organization: str
    :ivar organization_name: Required.
    :vartype organization_name: str
    :ivar display_name: Required.
    :vartype display_name: str
    :ivar deployment_scope_id: Required.
    :vartype deployment_scope_id: str
    :ivar tenant_id:
    :vartype tenant_id: str
    :ivar client_id:
    :vartype client_id: str
    :ivar client_secret:
    :vartype client_secret: str
    :ivar redirect_urls:
    :vartype redirect_urls: list[str]
    :ivar object_id:
    :vartype object_id: str
    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        'project_id': {'required': True},
        'project_name': {'required': True},
        'organization': {'required': True},
        'organization_name': {'required': True},
        'display_name': {'required': True},
        'deployment_scope_id': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'project_id': {'key': 'projectId', 'type': 'str'},
        'project_name': {'key': 'projectName', 'type': 'str'},
        'organization': {'key': 'organization', 'type': 'str'},
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
        'redirect_urls': {'key': 'redirectUrls', 'type': '[str]'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword project_id: Required.
        :paramtype project_id: str
        :keyword project_name: Required.
        :paramtype project_name: str
        :keyword organization: Required.
        :paramtype organization: str
        :keyword organization_name: Required.
        :paramtype organization_name: str
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword deployment_scope_id: Required.
        :paramtype deployment_scope_id: str
        :keyword tenant_id:
        :paramtype tenant_id: str
        :keyword client_id:
        :paramtype client_id: str
        :keyword client_secret:
        :paramtype client_secret: str
        :keyword redirect_urls:
        :paramtype redirect_urls: list[str]
        :keyword object_id:
        :paramtype object_id: str
        :keyword id: Required.
        :paramtype id: str
        """
        super(ProjectIdentity, self).__init__(**kwargs)
        self.project_id = kwargs['project_id']
        self.project_name = kwargs['project_name']
        self.organization = kwargs['organization']
        self.organization_name = kwargs['organization_name']
        self.display_name = kwargs['display_name']
        self.deployment_scope_id = kwargs['deployment_scope_id']
        self.tenant_id = kwargs.get('tenant_id', None)
        self.client_id = kwargs.get('client_id', None)
        self.client_secret = kwargs.get('client_secret', None)
        self.redirect_urls = kwargs.get('redirect_urls', None)
        self.object_id = kwargs.get('object_id', None)
        self.id = kwargs['id']


class ProjectIdentityDataResult(msrest.serialization.Model):
    """ProjectIdentityDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.ProjectIdentity
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ProjectIdentity'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.ProjectIdentity
        :keyword location:
        :paramtype location: str
        """
        super(ProjectIdentityDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProjectIdentityDefinition(msrest.serialization.Model):
    """ProjectIdentityDefinition.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: Required.
    :vartype display_name: str
    :ivar deployment_scope_id: Required.
    :vartype deployment_scope_id: str
    """

    _validation = {
        'display_name': {'required': True},
        'deployment_scope_id': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword deployment_scope_id: Required.
        :paramtype deployment_scope_id: str
        """
        super(ProjectIdentityDefinition, self).__init__(**kwargs)
        self.display_name = kwargs['display_name']
        self.deployment_scope_id = kwargs['deployment_scope_id']


class ProjectIdentityListDataResult(msrest.serialization.Model):
    """ProjectIdentityListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ProjectIdentity]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ProjectIdentity]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(ProjectIdentityListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ProjectListDataResult(msrest.serialization.Model):
    """ProjectListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Project]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Project]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(ProjectListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ProjectMembership(msrest.serialization.Model):
    """ProjectMembership.

    All required parameters must be populated in order to send to Azure.

    :ivar project_id: Required.
    :vartype project_id: str
    :ivar role: Required. Known values are: "None", "Member", "Admin", "Owner", "Adapter".
    :vartype role: str or ~teamcloud.models.ProjectMembershipRole
    :ivar properties: Dictionary of :code:`<string>`.
    :vartype properties: dict[str, str]
    """

    _validation = {
        'project_id': {'required': True},
        'role': {'required': True},
    }

    _attribute_map = {
        'project_id': {'key': 'projectId', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword project_id: Required.
        :paramtype project_id: str
        :keyword role: Required. Known values are: "None", "Member", "Admin", "Owner", "Adapter".
        :paramtype role: str or ~teamcloud.models.ProjectMembershipRole
        :keyword properties: Dictionary of :code:`<string>`.
        :paramtype properties: dict[str, str]
        """
        super(ProjectMembership, self).__init__(**kwargs)
        self.project_id = kwargs['project_id']
        self.role = kwargs['role']
        self.properties = kwargs.get('properties', None)


class ProjectTemplate(msrest.serialization.Model):
    """ProjectTemplate.

    All required parameters must be populated in order to send to Azure.

    :ivar organization: Required.
    :vartype organization: str
    :ivar organization_name: Required.
    :vartype organization_name: str
    :ivar slug: Required.
    :vartype slug: str
    :ivar name:
    :vartype name: str
    :ivar display_name: Required.
    :vartype display_name: str
    :ivar components:
    :vartype components: list[str]
    :ivar repository: Required.
    :vartype repository: ~teamcloud.models.RepositoryReference
    :ivar description:
    :vartype description: str
    :ivar is_default: Required.
    :vartype is_default: bool
    :ivar input_json_schema:
    :vartype input_json_schema: str
    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        'organization': {'required': True},
        'organization_name': {'required': True},
        'slug': {'required': True},
        'display_name': {'required': True},
        'repository': {'required': True},
        'is_default': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'components': {'key': 'components', 'type': '[str]'},
        'repository': {'key': 'repository', 'type': 'RepositoryReference'},
        'description': {'key': 'description', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'input_json_schema': {'key': 'inputJsonSchema', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword organization: Required.
        :paramtype organization: str
        :keyword organization_name: Required.
        :paramtype organization_name: str
        :keyword slug: Required.
        :paramtype slug: str
        :keyword name:
        :paramtype name: str
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword components:
        :paramtype components: list[str]
        :keyword repository: Required.
        :paramtype repository: ~teamcloud.models.RepositoryReference
        :keyword description:
        :paramtype description: str
        :keyword is_default: Required.
        :paramtype is_default: bool
        :keyword input_json_schema:
        :paramtype input_json_schema: str
        :keyword id: Required.
        :paramtype id: str
        """
        super(ProjectTemplate, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.organization_name = kwargs['organization_name']
        self.slug = kwargs['slug']
        self.name = kwargs.get('name', None)
        self.display_name = kwargs['display_name']
        self.components = kwargs.get('components', None)
        self.repository = kwargs['repository']
        self.description = kwargs.get('description', None)
        self.is_default = kwargs['is_default']
        self.input_json_schema = kwargs.get('input_json_schema', None)
        self.id = kwargs['id']


class ProjectTemplateDataResult(msrest.serialization.Model):
    """ProjectTemplateDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.ProjectTemplate
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ProjectTemplate'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.ProjectTemplate
        :keyword location:
        :paramtype location: str
        """
        super(ProjectTemplateDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProjectTemplateDefinition(msrest.serialization.Model):
    """ProjectTemplateDefinition.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: Required.
    :vartype display_name: str
    :ivar repository: Required.
    :vartype repository: ~teamcloud.models.RepositoryDefinition
    """

    _validation = {
        'display_name': {'required': True},
        'repository': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'RepositoryDefinition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword repository: Required.
        :paramtype repository: ~teamcloud.models.RepositoryDefinition
        """
        super(ProjectTemplateDefinition, self).__init__(**kwargs)
        self.display_name = kwargs['display_name']
        self.repository = kwargs['repository']


class ProjectTemplateListDataResult(msrest.serialization.Model):
    """ProjectTemplateListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ProjectTemplate]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ProjectTemplate]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(ProjectTemplateListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class RepositoryDefinition(msrest.serialization.Model):
    """RepositoryDefinition.

    All required parameters must be populated in order to send to Azure.

    :ivar url: Required.
    :vartype url: str
    :ivar token:
    :vartype token: str
    :ivar version:
    :vartype version: str
    """

    _validation = {
        'url': {'required': True},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword url: Required.
        :paramtype url: str
        :keyword token:
        :paramtype token: str
        :keyword version:
        :paramtype version: str
        """
        super(RepositoryDefinition, self).__init__(**kwargs)
        self.url = kwargs['url']
        self.token = kwargs.get('token', None)
        self.version = kwargs.get('version', None)


class RepositoryReference(msrest.serialization.Model):
    """RepositoryReference.

    All required parameters must be populated in order to send to Azure.

    :ivar url: Required.
    :vartype url: str
    :ivar token:
    :vartype token: str
    :ivar version:
    :vartype version: str
    :ivar basel_url:
    :vartype basel_url: str
    :ivar mount_url:
    :vartype mount_url: str
    :ivar ref:
    :vartype ref: str
    :ivar provider: Required. Known values are: "Unknown", "GitHub", "DevOps".
    :vartype provider: str or ~teamcloud.models.RepositoryReferenceProvider
    :ivar type: Required. Known values are: "Unknown", "Tag", "Branch", "Hash".
    :vartype type: str or ~teamcloud.models.RepositoryReferenceType
    :ivar organization:
    :vartype organization: str
    :ivar repository:
    :vartype repository: str
    :ivar project:
    :vartype project: str
    """

    _validation = {
        'url': {'required': True},
        'provider': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'basel_url': {'key': 'baselUrl', 'type': 'str'},
        'mount_url': {'key': 'mountUrl', 'type': 'str'},
        'ref': {'key': 'ref', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'organization': {'key': 'organization', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'str'},
        'project': {'key': 'project', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword url: Required.
        :paramtype url: str
        :keyword token:
        :paramtype token: str
        :keyword version:
        :paramtype version: str
        :keyword basel_url:
        :paramtype basel_url: str
        :keyword mount_url:
        :paramtype mount_url: str
        :keyword ref:
        :paramtype ref: str
        :keyword provider: Required. Known values are: "Unknown", "GitHub", "DevOps".
        :paramtype provider: str or ~teamcloud.models.RepositoryReferenceProvider
        :keyword type: Required. Known values are: "Unknown", "Tag", "Branch", "Hash".
        :paramtype type: str or ~teamcloud.models.RepositoryReferenceType
        :keyword organization:
        :paramtype organization: str
        :keyword repository:
        :paramtype repository: str
        :keyword project:
        :paramtype project: str
        """
        super(RepositoryReference, self).__init__(**kwargs)
        self.url = kwargs['url']
        self.token = kwargs.get('token', None)
        self.version = kwargs.get('version', None)
        self.basel_url = kwargs.get('basel_url', None)
        self.mount_url = kwargs.get('mount_url', None)
        self.ref = kwargs.get('ref', None)
        self.provider = kwargs['provider']
        self.type = kwargs['type']
        self.organization = kwargs.get('organization', None)
        self.repository = kwargs.get('repository', None)
        self.project = kwargs.get('project', None)


class ResultError(msrest.serialization.Model):
    """ResultError.

    :ivar code: Known values are: "Unknown", "Failed", "Conflict", "NotFound", "ServerError",
     "ValidationError", "Unauthorized", "Forbidden".
    :vartype code: str or ~teamcloud.models.ResultErrorCode
    :ivar message:
    :vartype message: str
    :ivar errors:
    :vartype errors: list[~teamcloud.models.ValidationError]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ValidationError]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Known values are: "Unknown", "Failed", "Conflict", "NotFound", "ServerError",
         "ValidationError", "Unauthorized", "Forbidden".
        :paramtype code: str or ~teamcloud.models.ResultErrorCode
        :keyword message:
        :paramtype message: str
        :keyword errors:
        :paramtype errors: list[~teamcloud.models.ValidationError]
        """
        super(ResultError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.errors = kwargs.get('errors', None)


class Schedule(msrest.serialization.Model):
    """Schedule.

    All required parameters must be populated in order to send to Azure.

    :ivar organization: Required.
    :vartype organization: str
    :ivar organization_name: Required.
    :vartype organization_name: str
    :ivar project_id: Required.
    :vartype project_id: str
    :ivar project_name: Required.
    :vartype project_name: str
    :ivar enabled:
    :vartype enabled: bool
    :ivar recurring:
    :vartype recurring: bool
    :ivar days_of_week:
    :vartype days_of_week: list[str or ~teamcloud.models.ScheduleDaysOfWeekItem]
    :ivar utc_hour:
    :vartype utc_hour: int
    :ivar utc_minute:
    :vartype utc_minute: int
    :ivar creator:
    :vartype creator: str
    :ivar created:
    :vartype created: ~datetime.datetime
    :ivar last_updated_by:
    :vartype last_updated_by: str
    :ivar last_updated:
    :vartype last_updated: ~datetime.datetime
    :ivar last_run:
    :vartype last_run: ~datetime.datetime
    :ivar component_tasks:
    :vartype component_tasks: list[~teamcloud.models.ComponentTaskReference]
    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        'organization': {'required': True},
        'organization_name': {'required': True},
        'project_id': {'required': True},
        'project_name': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'project_name': {'key': 'projectName', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'recurring': {'key': 'recurring', 'type': 'bool'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'utc_hour': {'key': 'utcHour', 'type': 'int'},
        'utc_minute': {'key': 'utcMinute', 'type': 'int'},
        'creator': {'key': 'creator', 'type': 'str'},
        'created': {'key': 'created', 'type': 'iso-8601'},
        'last_updated_by': {'key': 'lastUpdatedBy', 'type': 'str'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'last_run': {'key': 'lastRun', 'type': 'iso-8601'},
        'component_tasks': {'key': 'componentTasks', 'type': '[ComponentTaskReference]'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword organization: Required.
        :paramtype organization: str
        :keyword organization_name: Required.
        :paramtype organization_name: str
        :keyword project_id: Required.
        :paramtype project_id: str
        :keyword project_name: Required.
        :paramtype project_name: str
        :keyword enabled:
        :paramtype enabled: bool
        :keyword recurring:
        :paramtype recurring: bool
        :keyword days_of_week:
        :paramtype days_of_week: list[str or ~teamcloud.models.ScheduleDaysOfWeekItem]
        :keyword utc_hour:
        :paramtype utc_hour: int
        :keyword utc_minute:
        :paramtype utc_minute: int
        :keyword creator:
        :paramtype creator: str
        :keyword created:
        :paramtype created: ~datetime.datetime
        :keyword last_updated_by:
        :paramtype last_updated_by: str
        :keyword last_updated:
        :paramtype last_updated: ~datetime.datetime
        :keyword last_run:
        :paramtype last_run: ~datetime.datetime
        :keyword component_tasks:
        :paramtype component_tasks: list[~teamcloud.models.ComponentTaskReference]
        :keyword id: Required.
        :paramtype id: str
        """
        super(Schedule, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.organization_name = kwargs['organization_name']
        self.project_id = kwargs['project_id']
        self.project_name = kwargs['project_name']
        self.enabled = kwargs.get('enabled', None)
        self.recurring = kwargs.get('recurring', None)
        self.days_of_week = kwargs.get('days_of_week', None)
        self.utc_hour = kwargs.get('utc_hour', None)
        self.utc_minute = kwargs.get('utc_minute', None)
        self.creator = kwargs.get('creator', None)
        self.created = kwargs.get('created', None)
        self.last_updated_by = kwargs.get('last_updated_by', None)
        self.last_updated = kwargs.get('last_updated', None)
        self.last_run = kwargs.get('last_run', None)
        self.component_tasks = kwargs.get('component_tasks', None)
        self.id = kwargs['id']


class ScheduleDataResult(msrest.serialization.Model):
    """ScheduleDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.Schedule
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Schedule'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.Schedule
        :keyword location:
        :paramtype location: str
        """
        super(ScheduleDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ScheduleDefinition(msrest.serialization.Model):
    """ScheduleDefinition.

    :ivar enabled:
    :vartype enabled: bool
    :ivar recurring:
    :vartype recurring: bool
    :ivar days_of_week:
    :vartype days_of_week: list[str or ~teamcloud.models.ScheduleDefinitionDaysOfWeekItem]
    :ivar utc_hour:
    :vartype utc_hour: int
    :ivar utc_minute:
    :vartype utc_minute: int
    :ivar component_tasks:
    :vartype component_tasks: list[~teamcloud.models.ComponentTaskReference]
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'recurring': {'key': 'recurring', 'type': 'bool'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'utc_hour': {'key': 'utcHour', 'type': 'int'},
        'utc_minute': {'key': 'utcMinute', 'type': 'int'},
        'component_tasks': {'key': 'componentTasks', 'type': '[ComponentTaskReference]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled:
        :paramtype enabled: bool
        :keyword recurring:
        :paramtype recurring: bool
        :keyword days_of_week:
        :paramtype days_of_week: list[str or ~teamcloud.models.ScheduleDefinitionDaysOfWeekItem]
        :keyword utc_hour:
        :paramtype utc_hour: int
        :keyword utc_minute:
        :paramtype utc_minute: int
        :keyword component_tasks:
        :paramtype component_tasks: list[~teamcloud.models.ComponentTaskReference]
        """
        super(ScheduleDefinition, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.recurring = kwargs.get('recurring', None)
        self.days_of_week = kwargs.get('days_of_week', None)
        self.utc_hour = kwargs.get('utc_hour', None)
        self.utc_minute = kwargs.get('utc_minute', None)
        self.component_tasks = kwargs.get('component_tasks', None)


class ScheduleListDataResult(msrest.serialization.Model):
    """ScheduleListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Schedule]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Schedule]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(ScheduleListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class StatusResult(msrest.serialization.Model):
    """StatusResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar state:
    :vartype state: str
    :ivar state_message:
    :vartype state_message: str
    :ivar location:
    :vartype location: str
    :ivar errors:
    :vartype errors: list[~teamcloud.models.ResultError]
    :ivar tracking_id:
    :vartype tracking_id: str
    """

    _validation = {
        'state': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'state_message': {'key': 'stateMessage', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ResultError]'},
        'tracking_id': {'key': '_trackingId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword state_message:
        :paramtype state_message: str
        :keyword location:
        :paramtype location: str
        :keyword errors:
        :paramtype errors: list[~teamcloud.models.ResultError]
        :keyword tracking_id:
        :paramtype tracking_id: str
        """
        super(StatusResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.state = None
        self.state_message = kwargs.get('state_message', None)
        self.location = kwargs.get('location', None)
        self.errors = kwargs.get('errors', None)
        self.tracking_id = kwargs.get('tracking_id', None)


class StringDictionaryDataResult(msrest.serialization.Model):
    """StringDictionaryDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data: Dictionary of :code:`<string>`.
    :vartype data: dict[str, str]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(StringDictionaryDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class StringListDataResult(msrest.serialization.Model):
    """StringListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[str]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[str]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(StringListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class TeamCloudInformation(msrest.serialization.Model):
    """TeamCloudInformation.

    :ivar image_version:
    :vartype image_version: str
    :ivar template_version:
    :vartype template_version: str
    """

    _attribute_map = {
        'image_version': {'key': 'imageVersion', 'type': 'str'},
        'template_version': {'key': 'templateVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword image_version:
        :paramtype image_version: str
        :keyword template_version:
        :paramtype template_version: str
        """
        super(TeamCloudInformation, self).__init__(**kwargs)
        self.image_version = kwargs.get('image_version', None)
        self.template_version = kwargs.get('template_version', None)


class TeamCloudInformationDataResult(msrest.serialization.Model):
    """TeamCloudInformationDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.TeamCloudInformation
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'TeamCloudInformation'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.TeamCloudInformation
        :keyword location:
        :paramtype location: str
        """
        super(TeamCloudInformationDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class User(msrest.serialization.Model):
    """User.

    All required parameters must be populated in order to send to Azure.

    :ivar organization: Required.
    :vartype organization: str
    :ivar organization_name: Required.
    :vartype organization_name: str
    :ivar display_name:
    :vartype display_name: str
    :ivar login_name:
    :vartype login_name: str
    :ivar mail_address:
    :vartype mail_address: str
    :ivar user_type: Required. Known values are: "User", "Group", "System", "Service".
    :vartype user_type: str or ~teamcloud.models.UserType
    :ivar role: Required. Known values are: "None", "Member", "Admin", "Owner", "Adapter".
    :vartype role: str or ~teamcloud.models.UserRole
    :ivar project_memberships:
    :vartype project_memberships: list[~teamcloud.models.ProjectMembership]
    :ivar alternate_identities:
    :vartype alternate_identities: ~teamcloud.models.UserAlternateIdentities
    :ivar properties: Dictionary of :code:`<string>`.
    :vartype properties: dict[str, str]
    :ivar id: Required.
    :vartype id: str
    """

    _validation = {
        'organization': {'required': True},
        'organization_name': {'required': True},
        'user_type': {'required': True},
        'role': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'login_name': {'key': 'loginName', 'type': 'str'},
        'mail_address': {'key': 'mailAddress', 'type': 'str'},
        'user_type': {'key': 'userType', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'project_memberships': {'key': 'projectMemberships', 'type': '[ProjectMembership]'},
        'alternate_identities': {'key': 'alternateIdentities', 'type': 'UserAlternateIdentities'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword organization: Required.
        :paramtype organization: str
        :keyword organization_name: Required.
        :paramtype organization_name: str
        :keyword display_name:
        :paramtype display_name: str
        :keyword login_name:
        :paramtype login_name: str
        :keyword mail_address:
        :paramtype mail_address: str
        :keyword user_type: Required. Known values are: "User", "Group", "System", "Service".
        :paramtype user_type: str or ~teamcloud.models.UserType
        :keyword role: Required. Known values are: "None", "Member", "Admin", "Owner", "Adapter".
        :paramtype role: str or ~teamcloud.models.UserRole
        :keyword project_memberships:
        :paramtype project_memberships: list[~teamcloud.models.ProjectMembership]
        :keyword alternate_identities:
        :paramtype alternate_identities: ~teamcloud.models.UserAlternateIdentities
        :keyword properties: Dictionary of :code:`<string>`.
        :paramtype properties: dict[str, str]
        :keyword id: Required.
        :paramtype id: str
        """
        super(User, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.organization_name = kwargs['organization_name']
        self.display_name = kwargs.get('display_name', None)
        self.login_name = kwargs.get('login_name', None)
        self.mail_address = kwargs.get('mail_address', None)
        self.user_type = kwargs['user_type']
        self.role = kwargs['role']
        self.project_memberships = kwargs.get('project_memberships', None)
        self.alternate_identities = kwargs.get('alternate_identities', None)
        self.properties = kwargs.get('properties', None)
        self.id = kwargs['id']


class UserAlternateIdentities(msrest.serialization.Model):
    """UserAlternateIdentities.

    :ivar azure_resource_manager:
    :vartype azure_resource_manager: ~teamcloud.models.AlternateIdentity
    :ivar azure_dev_ops:
    :vartype azure_dev_ops: ~teamcloud.models.AlternateIdentity
    :ivar git_hub:
    :vartype git_hub: ~teamcloud.models.AlternateIdentity
    :ivar kubernetes:
    :vartype kubernetes: ~teamcloud.models.AlternateIdentity
    """

    _attribute_map = {
        'azure_resource_manager': {'key': 'AzureResourceManager', 'type': 'AlternateIdentity'},
        'azure_dev_ops': {'key': 'AzureDevOps', 'type': 'AlternateIdentity'},
        'git_hub': {'key': 'GitHub', 'type': 'AlternateIdentity'},
        'kubernetes': {'key': 'Kubernetes', 'type': 'AlternateIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword azure_resource_manager:
        :paramtype azure_resource_manager: ~teamcloud.models.AlternateIdentity
        :keyword azure_dev_ops:
        :paramtype azure_dev_ops: ~teamcloud.models.AlternateIdentity
        :keyword git_hub:
        :paramtype git_hub: ~teamcloud.models.AlternateIdentity
        :keyword kubernetes:
        :paramtype kubernetes: ~teamcloud.models.AlternateIdentity
        """
        super(UserAlternateIdentities, self).__init__(**kwargs)
        self.azure_resource_manager = kwargs.get('azure_resource_manager', None)
        self.azure_dev_ops = kwargs.get('azure_dev_ops', None)
        self.git_hub = kwargs.get('git_hub', None)
        self.kubernetes = kwargs.get('kubernetes', None)


class UserDataResult(msrest.serialization.Model):
    """UserDataResult.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: ~teamcloud.models.User
    :ivar location:
    :vartype location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'User'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data: ~teamcloud.models.User
        :keyword location:
        :paramtype location: str
        """
        super(UserDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class UserDefinition(msrest.serialization.Model):
    """UserDefinition.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required.
    :vartype identifier: str
    :ivar role: Required.
    :vartype role: str
    :ivar properties: Dictionary of :code:`<string>`.
    :vartype properties: dict[str, str]
    """

    _validation = {
        'identifier': {'required': True},
        'role': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required.
        :paramtype identifier: str
        :keyword role: Required.
        :paramtype role: str
        :keyword properties: Dictionary of :code:`<string>`.
        :paramtype properties: dict[str, str]
        """
        super(UserDefinition, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.role = kwargs['role']
        self.properties = kwargs.get('properties', None)


class UserListDataResult(msrest.serialization.Model):
    """UserListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code:
    :vartype code: int
    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.User]
    :ivar location:
    :vartype location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[User]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: int
        :keyword status:
        :paramtype status: str
        :keyword location:
        :paramtype location: str
        """
        super(UserListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ValidationError(msrest.serialization.Model):
    """ValidationError.

    :ivar field:
    :vartype field: str
    :ivar message:
    :vartype message: str
    """

    _attribute_map = {
        'field': {'key': 'field', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword field:
        :paramtype field: str
        :keyword message:
        :paramtype message: str
        """
        super(ValidationError, self).__init__(**kwargs)
        self.field = kwargs.get('field', None)
        self.message = kwargs.get('message', None)
