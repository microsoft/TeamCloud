# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from six import with_metaclass
from azure.core import CaseInsensitiveEnumMeta


class AdapterInformationType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AZURE_RESOURCE_MANAGER = "AzureResourceManager"
    AZURE_DEV_OPS = "AzureDevOps"
    GIT_HUB = "GitHub"
    KUBERNETES = "Kubernetes"

class CommandAuditEntityRuntimeStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    RUNNING = "Running"
    COMPLETED = "Completed"
    CONTINUED_AS_NEW = "ContinuedAsNew"
    FAILED = "Failed"
    CANCELED = "Canceled"
    TERMINATED = "Terminated"
    PENDING = "Pending"
    UNKNOWN = "Unknown"

class ComponentResourceState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "Pending"
    INITIALIZING = "Initializing"
    PROVISIONING = "Provisioning"
    PROVISIONED = "Provisioned"
    DEPROVISIONING = "Deprovisioning"
    DEPROVISIONED = "Deprovisioned"
    FAILED = "Failed"

class ComponentTaskState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "Pending"
    INITIALIZING = "Initializing"
    PROCESSING = "Processing"
    SUCCEEDED = "Succeeded"
    CANCELED = "Canceled"
    FAILED = "Failed"

class ComponentTaskTemplateType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    CUSTOM = "Custom"
    CREATE = "Create"
    DELETE = "Delete"

class ComponentTaskType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    CUSTOM = "Custom"
    CREATE = "Create"
    DELETE = "Delete"

class ComponentTemplateType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ENVIRONMENT = "Environment"
    REPOSITORY = "Repository"
    NAMESPACE = "Namespace"

class ComponentType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ENVIRONMENT = "Environment"
    REPOSITORY = "Repository"
    NAMESPACE = "Namespace"

class DeploymentScopeComponentTypesItem(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ENVIRONMENT = "Environment"
    REPOSITORY = "Repository"
    NAMESPACE = "Namespace"

class DeploymentScopeDefinitionType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AZURE_RESOURCE_MANAGER = "AzureResourceManager"
    AZURE_DEV_OPS = "AzureDevOps"
    GIT_HUB = "GitHub"
    KUBERNETES = "Kubernetes"

class DeploymentScopeType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AZURE_RESOURCE_MANAGER = "AzureResourceManager"
    AZURE_DEV_OPS = "AzureDevOps"
    GIT_HUB = "GitHub"
    KUBERNETES = "Kubernetes"

class OrganizationResourceState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "Pending"
    INITIALIZING = "Initializing"
    PROVISIONING = "Provisioning"
    PROVISIONED = "Provisioned"
    DEPROVISIONING = "Deprovisioning"
    DEPROVISIONED = "Deprovisioned"
    FAILED = "Failed"

class ProjectMembershipRole(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    MEMBER = "Member"
    ADMIN = "Admin"
    OWNER = "Owner"
    ADAPTER = "Adapter"

class ProjectResourceState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "Pending"
    INITIALIZING = "Initializing"
    PROVISIONING = "Provisioning"
    PROVISIONED = "Provisioned"
    DEPROVISIONING = "Deprovisioning"
    DEPROVISIONED = "Deprovisioned"
    FAILED = "Failed"

class RepositoryReferenceProvider(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "Unknown"
    GIT_HUB = "GitHub"
    DEV_OPS = "DevOps"

class RepositoryReferenceType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "Unknown"
    TAG = "Tag"
    BRANCH = "Branch"
    HASH = "Hash"

class ResultErrorCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "Unknown"
    FAILED = "Failed"
    CONFLICT = "Conflict"
    NOT_FOUND = "NotFound"
    SERVER_ERROR = "ServerError"
    VALIDATION_ERROR = "ValidationError"
    UNAUTHORIZED = "Unauthorized"
    FORBIDDEN = "Forbidden"

class ScheduleDaysOfWeekItem(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "Sunday"
    MONDAY = "Monday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"
    THURSDAY = "Thursday"
    FRIDAY = "Friday"
    SATURDAY = "Saturday"

class ScheduleDefinitionDaysOfWeekItem(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "Sunday"
    MONDAY = "Monday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"
    THURSDAY = "Thursday"
    FRIDAY = "Friday"
    SATURDAY = "Saturday"

class UserRole(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    MEMBER = "Member"
    ADMIN = "Admin"
    OWNER = "Owner"
    ADAPTER = "Adapter"

class UserType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    USER = "User"
    GROUP = "Group"
    SYSTEM = "System"
    SERVICE = "Service"
