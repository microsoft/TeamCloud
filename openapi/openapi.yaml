openapi: 3.0.1
info:
  title: TeamCloud
  description: API for working with a TeamCloud instance.
  contact:
    name: TeamCloud Dev Team
    url: https://github.com/microsoft/TeamCloud/issues/new
    email: Markus.Heiliger@microsoft.com
  license:
    name: TeamCloud is licensed under the MIT License
    url: https://github.com/microsoft/TeamCloud/blob/main/LICENSE
  version: v1
paths:
  /adapters:
    get:
      tags:
        - Adapter
      summary: Gets all Adapters.
      operationId: GetAdapters
      responses:
        '200':
          description: Returns all Adapters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdapterInformationListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/components':
    get:
      tags:
        - Components
      summary: Gets all Components for a Project.
      operationId: GetComponents
      parameters:
        - name: deleted
          in: query
          schema:
            type: boolean
            default: false
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Project Components
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the provided projectId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - Components
      summary: Creates a new Project Component.
      operationId: CreateComponent
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentDefinition'
      responses:
        '201':
          description: The created Project Component.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDataResult'
        '202':
          description: Starts creating the new Project Component. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the provided projectId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A Project Component already exists with the id provided in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/components/{componentId}':
    get:
      tags:
        - Components
      summary: Gets a Project Component.
      operationId: GetComponent
      parameters:
        - name: componentId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns Project Component
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a Component with the provided id was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      tags:
        - Components
      summary: Deletes an existing Project Component.
      operationId: DeleteComponent
      parameters:
        - name: componentId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Starts deleting the Project Component. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '204':
          description: The Project Component was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided id was not found, or a Component with the provided id was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks':
    get:
      tags:
        - ComponentTasks
      summary: Gets all Component Tasks.
      operationId: GetComponentTasks
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: componentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Component Tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentTaskListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Component with the provided componentId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - ComponentTasks
      summary: Creates a new Project Component Task.
      operationId: CreateComponentTask
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: componentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentTaskDefinition'
      responses:
        '201':
          description: The created Project Component Task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentTaskDataResult'
        '202':
          description: Starts creating the new Project Component. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the provided projectId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A Project Component already exists with the id provided in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{id}':
    get:
      tags:
        - ComponentTasks
      summary: Gets the Component Task.
      operationId: GetComponentTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: componentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a Component Task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentTaskDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Component Task with the provided id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/templates':
    get:
      tags:
        - ComponentTemplates
      summary: Gets all Component Templates for a Project.
      operationId: GetComponentTemplates
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Project Component Templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentTemplateListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: Component Templates with the provided projectId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/templates/{id}':
    get:
      tags:
        - ComponentTemplates
      summary: Gets the Component Template.
      operationId: GetComponentTemplate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a Component Template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentTemplateDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project Component Template with the provided id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/scopes':
    get:
      tags:
        - DeploymentScopes
      summary: Gets all Deployment Scopes.
      operationId: GetDeploymentScopes
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Deployment Scopes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentScopeListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - DeploymentScopes
      summary: Creates a new Deployment Scope.
      operationId: CreateDeploymentScope
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentScopeDefinition'
      responses:
        '201':
          description: The new Deployment Scope was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentScopeDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A Deployment Scope already exists with the ID provided in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/scopes/{deploymentScopeId}':
    get:
      tags:
        - DeploymentScopes
      summary: Gets a Deployment Scope.
      operationId: GetDeploymentScope
      parameters:
        - name: deploymentScopeId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a DeploymentScope.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentScopeDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A DeploymentScope with the id provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    put:
      tags:
        - DeploymentScopes
      summary: Updates an existing Deployment Scope.
      operationId: UpdateDeploymentScope
      parameters:
        - name: deploymentScopeId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentScope'
      responses:
        '200':
          description: The DeploymentScope was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentScopeDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Deployment Scope with the ID provided in the request body could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      tags:
        - DeploymentScopes
      summary: Deletes a Deployment Scope.
      operationId: DeleteDeploymentScope
      parameters:
        - name: deploymentScopeId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The DeploymentScope was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentScopeDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A DeploymentScope with the id provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/scopes/{deploymentScopeId}/authorize':
    put:
      tags:
        - DeploymentScopes
      summary: Authorize an existing Deployment Scope.
      operationId: AuthorizeDeploymentScope
      parameters:
        - name: deploymentScopeId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DeploymentScope'
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentScope'
          text/json:
            schema:
              $ref: '#/components/schemas/DeploymentScope'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DeploymentScope'
      responses:
        '200':
          description: The DeploymentScope was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentScopeDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A DeploymentScope with the id provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/negotiate':
    post:
      tags:
        - Negotiate
      summary: Negotiates the SignalR connection.
      operationId: NegotiateSignalR
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/audit':
    get:
      tags:
        - OrganizationAudit
      summary: Gets all audit entries.
      operationId: GetAuditEntries
      parameters:
        - name: timeRange
          in: query
          schema:
            type: string
            nullable: true
        - name: commands
          in: query
          schema:
            type: array
            items:
              type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns audit entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandAuditEntityListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: The Organization was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/audit/{commandId}':
    get:
      tags:
        - OrganizationAudit
      summary: Gets an audit entry.
      operationId: GetAuditEntry
      parameters:
        - name: commandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: expand
          in: query
          schema:
            type: boolean
            default: false
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns an audit entry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandAuditEntityDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: The Organization was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/audit/commands':
    get:
      tags:
        - OrganizationAudit
      summary: Gets all auditable commands.
      operationId: GetAuditCommands
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all auditable commands.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: The Organization was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /orgs:
    get:
      tags:
        - Organizations
      summary: Gets all Organizations.
      operationId: GetOrganizations
      responses:
        '200':
          description: Returns all Organizations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: The TeamCloud instance was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - Organizations
      summary: Creates a new Organization.
      operationId: CreateOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDefinition'
      responses:
        '201':
          description: The new Organization was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'The TeamCloud instance was not found, or a User with the email address provided in the request body was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A User already exists with the email address provided in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}':
    get:
      tags:
        - Organizations
      summary: Gets an Organization.
      operationId: GetOrganization
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Returns an Organization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: An Organization with the provided identifier was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      tags:
        - Organizations
      summary: Deletes an existing Organization.
      operationId: DeleteOrganization
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        '202':
          description: Starts deleting the Organization. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '404':
          description: An Organization with the identifier provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/users':
    get:
      tags:
        - OrganizationUsers
      summary: Gets all Users.
      operationId: GetOrganizationUsers
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: The Organization was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - OrganizationUsers
      summary: Creates a new User.
      operationId: CreateOrganizationUser
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinition'
      responses:
        '201':
          description: The new Organization User was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'The Organization was not found, or a User with the email address provided in the request body was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A User already exists with the email address provided in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/users/{userId}':
    get:
      tags:
        - OrganizationUsers
      summary: Gets a User.
      operationId: GetOrganizationUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A User with the provided identifier was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    put:
      tags:
        - OrganizationUsers
      summary: Updates an existing User.
      operationId: UpdateOrganizationUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The user was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '202':
          description: Starts updating the User. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A User with the ID provided in the request body was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      tags:
        - OrganizationUsers
      summary: Deletes an existing User.
      operationId: DeleteOrganizationUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Starts deleting the User. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '204':
          description: The user was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '404':
          description: A User with the identifier provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/me':
    get:
      tags:
        - OrganizationUsers
      summary: Gets a User A User matching the current authenticated user.
      operationId: GetOrganizationUserMe
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A User matching the current user was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    put:
      tags:
        - OrganizationUsers
      summary: Updates an existing User.
      operationId: UpdateOrganizationUserMe
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The user was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '202':
          description: Starts updating the User. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A User with the ID provided in the request body was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects':
    get:
      tags:
        - Project
      summary: Gets all Projects.
      operationId: GetProjects
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - Project
      summary: Creates a new Project.
      operationId: CreateProject
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDefinition'
      responses:
        '201':
          description: The new Project was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDataResult'
        '202':
          description: Started creating the new Project. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A Project already exists with the name specified in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}':
    get:
      tags:
        - Project
      summary: Gets a Project.
      operationId: GetProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a Project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the specified Name or ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      tags:
        - Project
      summary: Deletes a Project.
      operationId: DeleteProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Starts deleting the specified Project. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the specified name or ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/identities':
    get:
      tags:
        - ProjectIdentities
      summary: Gets all Project Identities.
      operationId: GetProjectIdentities
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Project Identities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIdentityListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - ProjectIdentities
      summary: Creates a new Project Identity.
      operationId: CreateProjectIdentity
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectIdentityDefinition'
      responses:
        '201':
          description: The new Project Identity was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIdentityDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A Project Identity already exists with the ID provided in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}':
    get:
      tags:
        - ProjectIdentities
      summary: Gets a Project Identity.
      operationId: GetProjectIdentity
      parameters:
        - name: projectIdentityId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a ProjectIdentity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIdentityDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A ProjectIdentity with the projectIdentityId provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    put:
      tags:
        - ProjectIdentities
      summary: Updates an existing Project Identity.
      operationId: UpdateProjectIdentity
      parameters:
        - name: projectIdentityId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectIdentity'
      responses:
        '202':
          description: Starts updating the Project Identity. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a Identity with the key provided in the request body was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      tags:
        - ProjectIdentities
      summary: Deletes a Project Identity.
      operationId: DeleteProjectIdentity
      parameters:
        - name: projectIdentityId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The ProjectIdentity was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIdentityDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A ProjectIdentity with the projectIdentityId provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/tags':
    get:
      tags:
        - ProjectTags
      summary: Gets all Tags for a Project.
      operationId: GetProjectTags
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Project Tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringStringDictionaryDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the provided projectId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - ProjectTags
      summary: Creates a new Project Tag.
      operationId: CreateProjectTag
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
              nullable: true
      responses:
        '202':
          description: Starts creating the new Project Tag. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the provided projectId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A Project Tag already exists with the key provided in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    put:
      tags:
        - ProjectTags
      summary: Updates an existing Project Tag.
      operationId: UpdateProjectTag
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
              nullable: true
      responses:
        '202':
          description: Starts updating the Project Tag. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a Tag with the key provided in the request body was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}':
    get:
      tags:
        - ProjectTags
      summary: Gets a Project Tag by Key.
      operationId: GetProjectTagByKey
      parameters:
        - name: tagKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns Project Tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringStringDictionaryDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a Tag with the provided key was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      tags:
        - ProjectTags
      summary: Deletes an existing Project Tag.
      operationId: DeleteProjectTag
      parameters:
        - name: tagKey
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Starts deleting the Project Tag. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a Tag with the provided key was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/templates':
    get:
      tags:
        - ProjectTemplates
      summary: Gets all Project Templates.
      operationId: GetProjectTemplates
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Project Templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTemplateListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - ProjectTemplates
      summary: Creates a new Project Template.
      operationId: CreateProjectTemplate
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTemplateDefinition'
      responses:
        '201':
          description: The new Project Template was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTemplateDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A Project Template already exists with the ID provided in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/templates/{projectTemplateId}':
    get:
      tags:
        - ProjectTemplates
      summary: Gets a Project Template.
      operationId: GetProjectTemplate
      parameters:
        - name: projectTemplateId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a ProjectTemplate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTemplateDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A ProjectTemplate with the projectTemplateId provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    put:
      tags:
        - ProjectTemplates
      summary: Updates an existing Project Template.
      operationId: UpdateProjectTemplate
      parameters:
        - name: projectTemplateId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTemplate'
      responses:
        '200':
          description: The ProjectTemplate was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTemplateDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project Template with the ID provided in the request body could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      tags:
        - ProjectTemplates
      summary: Deletes a Project Template.
      operationId: DeleteProjectTemplate
      parameters:
        - name: projectTemplateId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The ProjectTemplate was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTemplateDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A ProjectTemplate with the projectTemplateId provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/users':
    get:
      tags:
        - ProjectUsers
      summary: Gets all Users for a Project.
      operationId: GetProjectUsers
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Project Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the provided projectId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - ProjectUsers
      summary: Creates a new Project User
      operationId: CreateProjectUser
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinition'
      responses:
        '201':
          description: The new Project User was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '202':
          description: Starts creating the new Project User. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a User with the email address provided in the request body was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A Project User already exists with the email address provided in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/users/{userId}':
    get:
      tags:
        - ProjectUsers
      summary: Gets a Project User by ID or email address.
      operationId: GetProjectUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns Project User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a User with the provided identifier was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    put:
      tags:
        - ProjectUsers
      summary: Updates an existing Project User.
      operationId: UpdateProjectUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The Project User was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '202':
          description: Starts updating the Project UserProject. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a User with the ID provided in the request body was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      tags:
        - ProjectUsers
      summary: Deletes an existing Project User.
      operationId: DeleteProjectUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Starts deleting the Project User. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a User with the provided identifier was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/users/me':
    get:
      tags:
        - ProjectUsers
      summary: Gets a Project User for the calling user.
      operationId: GetProjectUserMe
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns Project User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a User matching the current user was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    put:
      tags:
        - ProjectUsers
      summary: Updates an existing Project User.
      operationId: UpdateProjectUserMe
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The Project User was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResult'
        '202':
          description: Starts updating the Project User. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'A Project with the provided projectId was not found, or a User matching the current user was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/schedules':
    get:
      tags:
        - Schedule
      summary: Gets all Schedule.
      operationId: GetSchedules
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all Schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    post:
      tags:
        - Schedule
      summary: Creates a new Project Schedule.
      operationId: CreateSchedule
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleDefinition'
      responses:
        '201':
          description: The created Project Schedule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the provided projectId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A Project Schedule already exists with the id provided in the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}':
    get:
      tags:
        - Schedule
      summary: Gets the Schedule.
      operationId: GetSchedule
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a Schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Schedule with the provided id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    put:
      tags:
        - Schedule
      summary: Updates a Project Schedule.
      operationId: UpdateSchedule
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '200':
          description: The updated Project Schedule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the provided projectId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '409':
          description: A Project Schedule id provided in the could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}/run':
    post:
      tags:
        - Schedule
      summary: Runs a Project Schedule.
      operationId: RunSchedule
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The Project Schedule run.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A Project with the provided projectId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/status/{trackingId}':
    get:
      tags:
        - Status
      summary: Gets the status of a long-running operation.
      operationId: GetStatus
      parameters:
        - name: trackingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The long-running operation completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '202':
          description: The long-running operation is running. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '302':
          description: The long-running operation completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: The long-running operation with the trackingId provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/projects/{projectId}/status/{trackingId}':
    get:
      tags:
        - Status
      summary: Gets the status of a long-running operation.
      operationId: GetProjectStatus
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: trackingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The long-running operation completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '202':
          description: The long-running operation is running. Returns a StatusResult object that can be used to track progress of the long-running operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '302':
          description: The long-running operation completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: The long-running operation with the trackingId provided was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/users/{userId}/projects':
    get:
      tags:
        - UserProjects
      summary: Gets all Projects for a User.
      operationId: GetUserProjects
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all User Projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A User with the provided userId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/orgs/{organizationId}/me/projects':
    get:
      tags:
        - UserProjects
      summary: Gets all Projects for a User.
      operationId: GetUserProjectsMe
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all User Projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListDataResult'
        '400':
          description: A validation error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: A User with the provided userId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
components:
  schemas:
    AdapterInformation:
      type: object
      properties:
        type:
          enum:
            - AzureResourceManager
            - AzureDevOps
            - GitHub
          type: string
        displayName:
          type: string
          nullable: true
        inputDataSchema:
          type: string
          nullable: true
        inputDataForm:
          type: string
          nullable: true
      additionalProperties: false
    AdapterInformationListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/AdapterInformation'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    ValidationError:
      type: object
      properties:
        field:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
      additionalProperties: false
    ResultError:
      type: object
      properties:
        code:
          enum:
            - Unknown
            - Failed
            - Conflict
            - NotFound
            - ServerError
            - ValidationError
            - Unauthorized
            - Forbidden
          type: string
        message:
          type: string
          nullable: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
          nullable: true
      additionalProperties: false
    ErrorResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ResultError'
          nullable: true
      additionalProperties: false
    Component:
      required:
        - creator
        - id
        - organization
        - projectId
        - slug
        - templateId
        - type
      type: object
      properties:
        href:
          type: string
          nullable: true
        organization:
          type: string
        templateId:
          type: string
        projectId:
          type: string
        creator:
          type: string
        displayName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        inputJson:
          type: string
          nullable: true
        valueJson:
          type: string
          nullable: true
        type:
          enum:
            - Environment
            - Repository
          type: string
        resourceId:
          type: string
          nullable: true
        resourceUrl:
          type: string
          nullable: true
        resourceState:
          enum:
            - Pending
            - Initializing
            - Provisioning
            - Provisioned
            - Deprovisioning
            - Deprovisioned
            - Failed
          type: string
        deploymentScopeId:
          type: string
          nullable: true
        identityId:
          type: string
          nullable: true
        deleted:
          type: string
          format: date-time
          nullable: true
        ttl:
          type: integer
          format: int32
          nullable: true
        slug:
          type: string
        id:
          type: string
      additionalProperties: false
    ComponentListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Component'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    ComponentDefinition:
      required:
        - displayName
        - templateId
      type: object
      properties:
        templateId:
          type: string
        displayName:
          type: string
        inputJson:
          type: string
          nullable: true
        deploymentScopeId:
          type: string
          nullable: true
      additionalProperties: false
    ComponentDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/Component'
        location:
          type: string
          nullable: true
      additionalProperties: false
    StatusResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
          readOnly: true
        stateMessage:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ResultError'
          nullable: true
        _trackingId:
          type: string
          nullable: true
      additionalProperties: false
    ComponentTask:
      required:
        - componentId
        - id
        - organization
        - projectId
      type: object
      properties:
        organization:
          type: string
        componentId:
          type: string
        projectId:
          type: string
        requestedBy:
          type: string
          nullable: true
        scheduleId:
          type: string
          nullable: true
        type:
          enum:
            - Custom
            - Create
            - Delete
          type: string
        typeName:
          type: string
          nullable: true
        created:
          type: string
          format: date-time
        started:
          type: string
          format: date-time
          nullable: true
        finished:
          type: string
          format: date-time
          nullable: true
        inputJson:
          type: string
          nullable: true
        output:
          type: string
          nullable: true
        resourceId:
          type: string
          nullable: true
        taskState:
          enum:
            - Pending
            - Initializing
            - Processing
            - Succeeded
            - Failed
          type: string
        exitCode:
          type: integer
          format: int32
          nullable: true
        id:
          type: string
      additionalProperties: false
    ComponentTaskListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ComponentTask'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    ComponentTaskDefinition:
      required:
        - taskId
      type: object
      properties:
        taskId:
          type: string
        inputJson:
          type: string
          nullable: true
      additionalProperties: false
    ComponentTaskDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/ComponentTask'
        location:
          type: string
          nullable: true
      additionalProperties: false
    RepositoryReference:
      required:
        - provider
        - type
        - url
      type: object
      properties:
        url:
          type: string
        token:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
        baselUrl:
          type: string
          nullable: true
        mountUrl:
          type: string
          nullable: true
        ref:
          type: string
          nullable: true
        provider:
          enum:
            - Unknown
            - GitHub
            - DevOps
          type: string
        type:
          enum:
            - Unknown
            - Tag
            - Branch
            - Hash
          type: string
        organization:
          type: string
          nullable: true
        repository:
          type: string
          nullable: true
        project:
          type: string
          nullable: true
      additionalProperties: false
    ComponentTaskTemplate:
      type: object
      properties:
        id:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        inputJsonSchema:
          type: string
          nullable: true
        type:
          enum:
            - Custom
            - Create
            - Delete
          type: string
        typeName:
          type: string
          nullable: true
          readOnly: true
      additionalProperties: false
    ComponentTaskRunner:
      type: object
      properties:
        id:
          type: string
          nullable: true
        with:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    ComponentTemplate:
      required:
        - id
        - organization
        - parentId
        - repository
        - type
      type: object
      properties:
        organization:
          type: string
        parentId:
          type: string
        displayName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        repository:
          $ref: '#/components/schemas/RepositoryReference'
        permissions:
          type: object
          properties:
            None:
              type: array
              items:
                type: string
            Member:
              type: array
              items:
                type: string
            Admin:
              type: array
              items:
                type: string
            Owner:
              type: array
              items:
                type: string
            Adapter:
              type: array
              items:
                type: string
          nullable: true
        inputJsonSchema:
          type: string
          nullable: true
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/ComponentTaskTemplate'
          nullable: true
        taskRunner:
          $ref: '#/components/schemas/ComponentTaskRunner'
        type:
          enum:
            - Environment
            - Repository
          type: string
        folder:
          type: string
          nullable: true
        configuration:
          nullable: true
        id:
          type: string
      additionalProperties: false
    ComponentTemplateListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ComponentTemplate'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    ComponentTemplateDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/ComponentTemplate'
        location:
          type: string
          nullable: true
      additionalProperties: false
    DeploymentScope:
      required:
        - displayName
        - id
        - isDefault
        - organization
        - slug
        - type
      type: object
      properties:
        organization:
          type: string
        displayName:
          type: string
        slug:
          type: string
        isDefault:
          type: boolean
        type:
          enum:
            - AzureResourceManager
            - AzureDevOps
            - GitHub
          type: string
        inputDataSchema:
          type: string
          nullable: true
        inputData:
          type: string
          nullable: true
        managementGroupId:
          type: string
          nullable: true
        subscriptionIds:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        authorizable:
          type: boolean
        authorized:
          type: boolean
        authorizeUrl:
          type: string
          nullable: true
        componentTypes:
          type: array
          items:
            enum:
              - Environment
              - Repository
            type: string
          nullable: true
        id:
          type: string
      additionalProperties: false
    DeploymentScopeListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/DeploymentScope'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    DeploymentScopeDefinition:
      required:
        - displayName
        - type
      type: object
      properties:
        displayName:
          type: string
        type:
          enum:
            - AzureResourceManager
            - AzureDevOps
            - GitHub
          type: string
        slug:
          type: string
          nullable: true
          readOnly: true
        inputData:
          type: string
          nullable: true
        isDefault:
          type: boolean
      additionalProperties: false
    DeploymentScopeDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/DeploymentScope'
        location:
          type: string
          nullable: true
      additionalProperties: false
    CommandAuditEntity:
      type: object
      properties:
        commandId:
          type: string
          nullable: true
          readOnly: true
        organizationId:
          type: string
          nullable: true
          readOnly: true
        commandJson:
          type: string
          nullable: true
        resultJson:
          type: string
          nullable: true
        projectId:
          type: string
          nullable: true
          readOnly: true
        userId:
          type: string
          nullable: true
          readOnly: true
        parentId:
          type: string
          nullable: true
          readOnly: true
        command:
          type: string
          nullable: true
        componentTask:
          type: string
          nullable: true
          readOnly: true
        runtimeStatus:
          enum:
            - Unknown
            - Running
            - Completed
            - ContinuedAsNew
            - Failed
            - Canceled
            - Terminated
            - Pending
          type: string
        customStatus:
          type: string
          nullable: true
        errors:
          type: string
          nullable: true
        created:
          type: string
          format: date-time
          nullable: true
        updated:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    CommandAuditEntityListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/CommandAuditEntity'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    CommandAuditEntityDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/CommandAuditEntity'
        location:
          type: string
          nullable: true
      additionalProperties: false
    StringListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            type: string
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    Organization:
      required:
        - displayName
        - id
        - location
        - slug
        - subscriptionId
        - tenant
      type: object
      properties:
        tenant:
          type: string
        slug:
          type: string
        displayName:
          type: string
        subscriptionId:
          type: string
        location:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
          nullable: true
        resourceId:
          type: string
          nullable: true
        resourceState:
          enum:
            - Pending
            - Initializing
            - Provisioning
            - Provisioned
            - Deprovisioning
            - Deprovisioned
            - Failed
          type: string
        galleryId:
          type: string
          nullable: true
        registryId:
          type: string
          nullable: true
        storageId:
          type: string
          nullable: true
        id:
          type: string
      additionalProperties: false
    OrganizationListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    OrganizationDefinition:
      required:
        - displayName
        - location
        - subscriptionId
      type: object
      properties:
        slug:
          type: string
          nullable: true
          readOnly: true
        displayName:
          type: string
        subscriptionId:
          type: string
        location:
          type: string
      additionalProperties: false
    OrganizationDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/Organization'
        location:
          type: string
          nullable: true
      additionalProperties: false
    ProjectMembership:
      required:
        - projectId
        - role
      type: object
      properties:
        projectId:
          type: string
        role:
          enum:
            - None
            - Member
            - Admin
            - Owner
            - Adapter
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    AlternateIdentity:
      type: object
      properties:
        login:
          type: string
          nullable: true
      additionalProperties: false
    User:
      required:
        - id
        - organization
        - role
        - userType
      type: object
      properties:
        organization:
          type: string
        displayName:
          type: string
          nullable: true
        loginName:
          type: string
          nullable: true
        mailAddress:
          type: string
          nullable: true
        userType:
          enum:
            - User
            - Group
            - System
            - Service
          type: string
        role:
          enum:
            - None
            - Member
            - Admin
            - Owner
          type: string
        projectMemberships:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMembership'
          nullable: true
        alternateIdentities:
          type: object
          properties:
            AzureResourceManager:
              $ref: '#/components/schemas/AlternateIdentity'
            AzureDevOps:
              $ref: '#/components/schemas/AlternateIdentity'
            GitHub:
              $ref: '#/components/schemas/AlternateIdentity'
          nullable: true
        properties:
          type: object
          additionalProperties:
            type: string
          nullable: true
        id:
          type: string
      additionalProperties: false
    UserListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    UserDefinition:
      required:
        - identifier
        - role
      type: object
      properties:
        identifier:
          type: string
        role:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    UserDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/User'
        location:
          type: string
          nullable: true
      additionalProperties: false
    Project:
      required:
        - displayName
        - id
        - organization
        - slug
        - template
      type: object
      properties:
        organization:
          type: string
        slug:
          type: string
        displayName:
          type: string
        template:
          type: string
        templateInput:
          type: string
          nullable: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          nullable: true
        tags:
          type: object
          additionalProperties:
            type: string
          nullable: true
        resourceId:
          type: string
          nullable: true
        resourceState:
          enum:
            - Pending
            - Initializing
            - Provisioning
            - Provisioned
            - Deprovisioning
            - Deprovisioned
            - Failed
          type: string
        vaultId:
          type: string
          nullable: true
          readOnly: true
          deprecated: true
        sharedVaultId:
          type: string
          nullable: true
        secretsVaultId:
          type: string
          nullable: true
        storageId:
          type: string
          nullable: true
        id:
          type: string
      additionalProperties: false
    ProjectListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Project'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    ProjectDefinition:
      required:
        - displayName
        - template
        - templateInput
      type: object
      properties:
        slug:
          type: string
          nullable: true
          readOnly: true
        displayName:
          type: string
        template:
          type: string
        templateInput:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDefinition'
          nullable: true
      additionalProperties: false
    ProjectDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/Project'
        location:
          type: string
          nullable: true
      additionalProperties: false
    ProjectIdentity:
      required:
        - deploymentScopeId
        - displayName
        - id
        - organization
        - projectId
      type: object
      properties:
        projectId:
          type: string
        organization:
          type: string
        displayName:
          type: string
        deploymentScopeId:
          type: string
        tenantId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        clientSecret:
          type: string
          nullable: true
        redirectUrls:
          type: array
          items:
            type: string
          nullable: true
        objectId:
          type: string
          format: uuid
        id:
          type: string
      additionalProperties: false
    ProjectIdentityListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectIdentity'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    ProjectIdentityDefinition:
      required:
        - deploymentScopeId
        - displayName
      type: object
      properties:
        displayName:
          type: string
        deploymentScopeId:
          type: string
      additionalProperties: false
    ProjectIdentityDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/ProjectIdentity'
        location:
          type: string
          nullable: true
      additionalProperties: false
    StringStringDictionaryDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: object
          additionalProperties:
            type: string
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    ProjectTemplate:
      required:
        - displayName
        - id
        - isDefault
        - organization
        - repository
        - slug
      type: object
      properties:
        organization:
          type: string
        slug:
          type: string
        name:
          type: string
          nullable: true
        displayName:
          type: string
        components:
          type: array
          items:
            type: string
          nullable: true
        repository:
          $ref: '#/components/schemas/RepositoryReference'
        description:
          type: string
          nullable: true
        isDefault:
          type: boolean
        inputJsonSchema:
          type: string
          nullable: true
        id:
          type: string
      additionalProperties: false
    ProjectTemplateListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectTemplate'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    RepositoryDefinition:
      required:
        - url
      type: object
      properties:
        url:
          type: string
        token:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      additionalProperties: false
    ProjectTemplateDefinition:
      required:
        - displayName
        - repository
      type: object
      properties:
        displayName:
          type: string
        repository:
          $ref: '#/components/schemas/RepositoryDefinition'
      additionalProperties: false
    ProjectTemplateDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/ProjectTemplate'
        location:
          type: string
          nullable: true
      additionalProperties: false
    ComponentTaskReference:
      type: object
      properties:
        componentId:
          type: string
          nullable: true
        componentTaskTemplateId:
          type: string
          nullable: true
        inputJson:
          type: string
          nullable: true
      additionalProperties: false
    Schedule:
      required:
        - id
        - organization
        - projectId
      type: object
      properties:
        organization:
          type: string
        projectId:
          type: string
        enabled:
          type: boolean
        recurring:
          type: boolean
        daysOfWeek:
          type: array
          items:
            enum:
              - Sunday
              - Monday
              - Tuesday
              - Wednesday
              - Thursday
              - Friday
              - Saturday
            type: string
          nullable: true
        utcHour:
          type: integer
          format: int32
        utcMinute:
          type: integer
          format: int32
        creator:
          type: string
          nullable: true
        created:
          type: string
          format: date-time
        lastUpdatedBy:
          type: string
          nullable: true
        lastUpdated:
          type: string
          format: date-time
        lastRun:
          type: string
          format: date-time
          nullable: true
        componentTasks:
          type: array
          items:
            $ref: '#/components/schemas/ComponentTaskReference'
          nullable: true
        id:
          type: string
      additionalProperties: false
    ScheduleListDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
          nullable: true
          readOnly: true
        location:
          type: string
          nullable: true
      additionalProperties: false
    ScheduleDefinition:
      type: object
      properties:
        enabled:
          type: boolean
        recurring:
          type: boolean
        daysOfWeek:
          type: array
          items:
            enum:
              - Sunday
              - Monday
              - Tuesday
              - Wednesday
              - Thursday
              - Friday
              - Saturday
            type: string
          nullable: true
        utcHour:
          type: integer
          format: int32
        utcMinute:
          type: integer
          format: int32
        componentTasks:
          type: array
          items:
            $ref: '#/components/schemas/ComponentTaskReference'
          nullable: true
      additionalProperties: false
    ScheduleDataResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/Schedule'
        location:
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://login.microsoftonline.com//oauth2/v2.0/authorize
          tokenUrl: https://login.microsoftonline.com//oauth2/v2.0/token
          scopes:
            openid: Sign you in
            http://TeamCloud.aztcclitestsix/user_impersonation: Access the TeamCloud API
security:
  - oauth2:
      - openid
      - http://TeamCloud.aztcclitestsix/user_impersonation